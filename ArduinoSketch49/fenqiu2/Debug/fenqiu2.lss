
fenqiu2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000056  00800100  000018b0  00001944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  00800156  00800156  0000199a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a8  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000117aa  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027ac  00000000  00000000  0001395e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b5c  00000000  00000000  0001610a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001870  00000000  00000000  00019c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000273c  00000000  00000000  0001b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088c8  00000000  00000000  0001dc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  000264dc  2**0
=======
  0 .data         0000004e  00800100  000013ac  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000174  0080014e  0080014e  0000148e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000148e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c46b  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000213a  00000000  00000000  0000de43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a21  00000000  00000000  0000ff7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d80  00000000  00000000  000129a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000230e  00000000  00000000  00013720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004586  00000000  00000000  00015a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000490  00000000  00000000  00019fb4  2**0
>>>>>>> parent of c14ab71... 测出合适脉宽
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
<<<<<<< HEAD
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_18>
      4c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
=======
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__vector_18>
      4c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_24>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
>>>>>>> parent of c14ab71... 测出合适脉宽

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
<<<<<<< HEAD
      b8:	f2 01       	movw	r30, r4
      ba:	99 04       	cpc	r9, r9
      bc:	78 06       	cpc	r7, r24

000000be <__ctors_end>:
      be:	f6 01       	movw	r30, r12

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e0 eb       	ldi	r30, 0xB0	; 176
      d4:	f8 e1       	ldi	r31, 0x18	; 24
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a6 35       	cpi	r26, 0x56	; 86
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	22 e0       	ldi	r18, 0x02	; 2
      e4:	a6 e5       	ldi	r26, 0x56	; 86
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	ae 3d       	cpi	r26, 0xDE	; 222
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 07 0a 	call	0x140e	; 0x140e <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 a6 06 	call	0xd4c	; 0xd4c <main>
     10c:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_Z10step_motorv>:

int step_count = 0;

//定时器中断
void step_motor()
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	c5 e6       	ldi	r28, 0x65	; 101
     11a:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0;i<=100;i++)
	{
			digitalWrite(Step,HIGH);
     11c:	61 e0       	ldi	r22, 0x01	; 1
     11e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Step>
     122:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
			delayMicroseconds(500);
     126:	84 ef       	ldi	r24, 0xF4	; 244
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <delayMicroseconds>
			digitalWrite(Step,LOW);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Step>
     134:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
			delayMicroseconds(500);
     138:	84 ef       	ldi	r24, 0xF4	; 244
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <delayMicroseconds>
     140:	21 97       	sbiw	r28, 0x01	; 1
int step_count = 0;

//定时器中断
void step_motor()
{
	for(int i = 0;i<=100;i++)
     142:	61 f7       	brne	.-40     	; 0x11c <_Z10step_motorv+0x8>
			delayMicroseconds(500);
			digitalWrite(Step,LOW);
			delayMicroseconds(500);
	}

}
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <setup>:

void setup()
{
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
	Wire.begin(5);
     152:	65 e0       	ldi	r22, 0x05	; 5
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	8f ed       	ldi	r24, 0xDF	; 223
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN7TwoWire5beginEi>
	Wire.onReceive(receiveEvent);
     15e:	6a ef       	ldi	r22, 0xFA	; 250
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	8f ed       	ldi	r24, 0xDF	; 223
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN7TwoWire9onReceiveEPFviE>
	Wire.onRequest(requestEvent);
     16a:	6b e0       	ldi	r22, 0x0B	; 11
     16c:	72 e0       	ldi	r23, 0x02	; 2
     16e:	8f ed       	ldi	r24, 0xDF	; 223
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 94 04 	call	0x928	; 0x928 <_ZN7TwoWire9onRequestEPFvvE>
	pinMode(Step, OUTPUT); // Step
     176:	cc e0       	ldi	r28, 0x0C	; 12
     178:	d1 e0       	ldi	r29, 0x01	; 1
     17a:	61 e0       	ldi	r22, 0x01	; 1
     17c:	88 81       	ld	r24, Y
     17e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pinMode>
	pinMode(dir, OUTPUT); // Dir
     182:	0a e0       	ldi	r16, 0x0A	; 10
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	f8 01       	movw	r30, r16
     18a:	80 81       	ld	r24, Z
     18c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pinMode>
	digitalWrite(dir,HIGH);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	f8 01       	movw	r30, r16
     194:	80 81       	ld	r24, Z
     196:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
	digitalWrite(Step,LOW);
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	88 81       	ld	r24, Y
     19e:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     1a2:	26 e0       	ldi	r18, 0x06	; 6
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	52 ec       	ldi	r21, 0xC2	; 194
     1a8:	61 e0       	ldi	r22, 0x01	; 1
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	84 e3       	ldi	r24, 0x34	; 52
     1ae:	92 e0       	ldi	r25, 0x02	; 2
     1b0:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN14HardwareSerial5beginEmh>
	//pinMode(MS1,INPUT_PULLUP);
	//pinMode(MS2,INPUT_PULLUP);
	//pinMode(MS3,INPUT_PULLUP);
	
	Serial.begin(115200);
	delay(1000);
     1b4:	68 ee       	ldi	r22, 0xE8	; 232
     1b6:	73 e0       	ldi	r23, 0x03	; 3
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
	
	//#定时器初始化
	//tc1.setMode("CTC",2000);
	//tc1.attachInterrupt(step_motor);
}
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
	//pinMode(MS1,INPUT_PULLUP);
	//pinMode(MS2,INPUT_PULLUP);
	//pinMode(MS3,INPUT_PULLUP);
	
	Serial.begin(115200);
	delay(1000);
     1c4:	0c 94 2d 08 	jmp	0x105a	; 0x105a <delay>

000001c8 <_Z9wihteGoldv>:
}

void wihteGold()
{
	//刚开始没球就一直转
	if (p > 500)
     1c8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p>
     1cc:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p+0x1>
     1d0:	85 3f       	cpi	r24, 0xF5	; 245
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	92 07       	cpc	r25, r18
     1d6:	1c f0       	brlt	.+6      	; 0x1de <_Z9wihteGoldv+0x16>
	flag = true;
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <flag>
	
	if (flag == false)
     1de:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <flag>
     1e2:	21 11       	cpse	r18, r1
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <_Z9wihteGoldv+0x24>
	{
		step_count = 2;
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	32 c0       	rjmp	.+100    	; 0x250 <_Z9wihteGoldv+0x88>
	}
	else
	{
		if (p > 500)
     1ec:	85 3f       	cpi	r24, 0xF5	; 245
     1ee:	91 40       	sbci	r25, 0x01	; 1
     1f0:	9c f1       	brlt	.+102    	; 0x258 <_Z9wihteGoldv+0x90>
		{
			delay(200);
     1f2:	68 ec       	ldi	r22, 0xC8	; 200
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 2d 08 	call	0x105a	; 0x105a <delay>
			//收到白球
			if (q > 450)
     1fe:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <q>
     202:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <q+0x1>
     206:	83 3c       	cpi	r24, 0xC3	; 195
     208:	91 40       	sbci	r25, 0x01	; 1
     20a:	a4 f0       	brlt	.+40     	; 0x234 <_Z9wihteGoldv+0x6c>
			{
				digitalWrite(dir, LOW);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     212:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
				step_count = 122;
     216:	8a e7       	ldi	r24, 0x7A	; 122
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
     21e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
				w++;
     222:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <w>
     226:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <w+0x1>
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <w+0x1>
     230:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <w>
			}
			//收到黑球
			if (q < 450)
     234:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <q>
     238:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <q+0x1>
     23c:	82 3c       	cpi	r24, 0xC2	; 194
     23e:	91 40       	sbci	r25, 0x01	; 1
     240:	5c f4       	brge	.+22     	; 0x258 <_Z9wihteGoldv+0x90>
			{
				digitalWrite(dir, HIGH);
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     248:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
				step_count = 122;
     24c:	8a e7       	ldi	r24, 0x7A	; 122
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
     254:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
			}
		}
	}
	
	//赋值得分球数量
	g = w;
     258:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <w>
     25c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <w+0x1>
     260:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <g+0x1>
     264:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <g>
     268:	08 95       	ret

0000026a <_Z9blackGoldv>:
}
void blackGold()
{
	//刚上电没球就一直转
	if (p > 500)
     26a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p>
     26e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p+0x1>
     272:	85 3f       	cpi	r24, 0xF5	; 245
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	92 07       	cpc	r25, r18
     278:	1c f0       	brlt	.+6      	; 0x280 <_Z9blackGoldv+0x16>
	flag = true;
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <flag>

	if (flag == false)
     280:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <flag>
     284:	21 11       	cpse	r18, r1
     286:	03 c0       	rjmp	.+6      	; 0x28e <_Z9blackGoldv+0x24>
	{
		step_count = 2;
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	2c c0       	rjmp	.+88     	; 0x2e6 <_Z9blackGoldv+0x7c>
	}
	else
	{
		if (p > 500)
     28e:	85 3f       	cpi	r24, 0xF5	; 245
     290:	91 40       	sbci	r25, 0x01	; 1
     292:	6c f1       	brlt	.+90     	; 0x2ee <_Z9blackGoldv+0x84>
		{
			if (q < 450)
     294:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <q>
     298:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <q+0x1>
     29c:	82 3c       	cpi	r24, 0xC2	; 194
     29e:	91 40       	sbci	r25, 0x01	; 1
     2a0:	a4 f4       	brge	.+40     	; 0x2ca <_Z9blackGoldv+0x60>
			{
				digitalWrite(dir, LOW);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     2a8:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
				step_count = 122;
     2ac:	8a e7       	ldi	r24, 0x7A	; 122
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
     2b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
				b++;
     2b8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <b>
     2bc:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <b+0x1>
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <b+0x1>
     2c6:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <b>
			}
			if (q > 450)
     2ca:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <q>
     2ce:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <q+0x1>
     2d2:	83 3c       	cpi	r24, 0xC3	; 195
     2d4:	91 40       	sbci	r25, 0x01	; 1
     2d6:	5c f0       	brlt	.+22     	; 0x2ee <_Z9blackGoldv+0x84>
			{
				digitalWrite(dir, HIGH);
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     2de:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
				step_count = 122;
     2e2:	8a e7       	ldi	r24, 0x7A	; 122
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
     2ea:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
			}
		}
	}
	g = b;
     2ee:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <b>
     2f2:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <b+0x1>
     2f6:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <g+0x1>
     2fa:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <g>
     2fe:	08 95       	ret

00000300 <loop>:
	//tc1.setMode("CTC",2000);
	//tc1.attachInterrupt(step_motor);
}

void loop()
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
	int p = analogRead(Read1);
     308:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Read1>
     30c:	0e 94 af 08 	call	0x115e	; 0x115e <analogRead>
     310:	ec 01       	movw	r28, r24
	int q = analogRead(Read2);
     312:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Read2>
     316:	0e 94 af 08 	call	0x115e	; 0x115e <analogRead>
     31a:	8c 01       	movw	r16, r24

step_motor();
     31c:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10step_motorv>
delay(44000);
     320:	60 ee       	ldi	r22, 0xE0	; 224
     322:	7b ea       	ldi	r23, 0xAB	; 171
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 2d 08 	call	0x105a	; 0x105a <delay>
//step_count = 100;
		
	//#如果是收白球
	if (Q == 0)
     32c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <Q>
     330:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <Q+0x1>
     334:	89 2b       	or	r24, r25
     336:	61 f4       	brne	.+24     	; 0x350 <loop+0x50>
	{
		digitalWrite(Wled, HIGH);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Wled>
     33e:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
		digitalWrite(Bled, LOW);
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Bled>
     348:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
		
		//步进电机运动
		wihteGold();
     34c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z9wihteGoldv>
	}
	
	//#如果是收黑球
	if (Q == 1)
     350:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <Q>
     354:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <Q+0x1>
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	61 f4       	brne	.+24     	; 0x374 <loop+0x74>
	{
		digitalWrite(Bled, HIGH);
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Bled>
     362:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
		digitalWrite(Wled, LOW);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Wled>
     36c:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
		
		//步进电机运动
		blackGold();
     370:	0e 94 35 01 	call	0x26a	; 0x26a <_Z9blackGoldv>
	}
	
	//串口调试
// 	Serial.print("q:");
	Serial.print(q);
     374:	4a e0       	ldi	r20, 0x0A	; 10
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	b8 01       	movw	r22, r16
     37a:	84 e3       	ldi	r24, 0x34	; 52
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5Print5printEii>
	Serial.print("p:");
     382:	65 e1       	ldi	r22, 0x15	; 21
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	84 e3       	ldi	r24, 0x34	; 52
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN5Print5printEPKc>
	Serial.print(p);
     38e:	4a e0       	ldi	r20, 0x0A	; 10
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	be 01       	movw	r22, r28
     394:	84 e3       	ldi	r24, 0x34	; 52
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5Print5printEii>
	Serial.print("Q:");
     39c:	68 e1       	ldi	r22, 0x18	; 24
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	84 e3       	ldi	r24, 0x34	; 52
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN5Print5printEPKc>
	Serial.print(Q);
     3a8:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <Q>
     3ac:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <Q+0x1>
     3b0:	4a e0       	ldi	r20, 0x0A	; 10
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	84 e3       	ldi	r24, 0x34	; 52
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5Print5printEii>
	Serial.print("g:");
     3bc:	6b e1       	ldi	r22, 0x1B	; 27
     3be:	71 e0       	ldi	r23, 0x01	; 1
     3c0:	84 e3       	ldi	r24, 0x34	; 52
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN5Print5printEPKc>
	Serial.println(g);
     3c8:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <g>
     3cc:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <g+0x1>
     3d0:	4a e0       	ldi	r20, 0x0A	; 10
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	84 e3       	ldi	r24, 0x34	; 52
     3d6:	92 e0       	ldi	r25, 0x02	; 2
}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
	Serial.print("p:");
	Serial.print(p);
	Serial.print("Q:");
	Serial.print(Q);
	Serial.print("g:");
	Serial.println(g);
     3e0:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <_ZN5Print7printlnEii>

000003e4 <_GLOBAL__sub_I_tc1>:
#include "Timer1.h"
//Beginning of Auto generated function prototypes by Atmel Studio
void requestEvent();
//End of Auto generated function prototypes by Atmel Studio

Timer1 tc1;
     3e4:	85 e6       	ldi	r24, 0x65	; 101
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_ZN6Timer1C1Ev>

000003ec <_GLOBAL__sub_D_tc1>:
     3ec:	85 e6       	ldi	r24, 0x65	; 101
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0c 94 b3 04 	jmp	0x966	; 0x966 <_ZN6Timer1D1Ev>

000003f4 <_Z12receiveEventi>:
	Serial.print("g:");
	Serial.println(g);
}
void receiveEvent(int howMany)
{
	while (0 < Wire.available())
     3f4:	8f ed       	ldi	r24, 0xDF	; 223
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN7TwoWire9availableEv>
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	4c f4       	brge	.+18     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
	{
		Q = Wire.read();
     402:	8f ed       	ldi	r24, 0xDF	; 223
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 ad 03 	call	0x75a	; 0x75a <_ZN7TwoWire4readEv>
     40a:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <Q+0x1>
     40e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <Q>
     412:	f0 cf       	rjmp	.-32     	; 0x3f4 <_Z12receiveEventi>
	}
}
     414:	08 95       	ret

00000416 <_Z12requestEventv>:
=======
      b8:	fa 04       	cpc	r15, r10
      ba:	c2 06       	cpc	r12, r18

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	ec ea       	ldi	r30, 0xAC	; 172
      d0:	f3 e1       	ldi	r31, 0x13	; 19
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	ae 34       	cpi	r26, 0x4E	; 78
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	ae e4       	ldi	r26, 0x4E	; 78
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a2 3c       	cpi	r26, 0xC2	; 194
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 ce 09 	call	0x139c	; 0x139c <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 f0 06 	call	0xde0	; 0xde0 <main>
     108:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup>:
          digitalWrite(Step, HIGH); // Output high
          delayMicroseconds(5000); // Wait 1/2 a ms
          digitalWrite(Step, LOW); // Output low
          delayMicroseconds(5000); // Wait 1/2 a ms
        }
        b++;
     110:	65 e0       	ldi	r22, 0x05	; 5
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	87 ec       	ldi	r24, 0xC7	; 199
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN7TwoWire5beginEi>
     11c:	6b e5       	ldi	r22, 0x5B	; 91
     11e:	72 e0       	ldi	r23, 0x02	; 2
     120:	87 ec       	ldi	r24, 0xC7	; 199
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7TwoWire9onReceiveEPFviE>
     128:	6c e6       	ldi	r22, 0x6C	; 108
     12a:	72 e0       	ldi	r23, 0x02	; 2
     12c:	87 ec       	ldi	r24, 0xC7	; 199
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN7TwoWire9onRequestEPFvvE>
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     13a:	0e 94 3f 09 	call	0x127e	; 0x127e <pinMode>
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
     144:	0e 94 3f 09 	call	0x127e	; 0x127e <pinMode>
     148:	26 e0       	ldi	r18, 0x06	; 6
     14a:	40 e8       	ldi	r20, 0x80	; 128
     14c:	55 e2       	ldi	r21, 0x25	; 37
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	8c e1       	ldi	r24, 0x1C	; 28
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_ZN14HardwareSerial5beginEmh>
     15a:	68 ee       	ldi	r22, 0xE8	; 232
     15c:	73 e0       	ldi	r23, 0x03	; 3
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <delay>

00000166 <loop>:
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Read1>
     172:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <analogRead>
     176:	ec 01       	movw	r28, r24
     178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Read2>
     17c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <analogRead>
     180:	8c 01       	movw	r16, r24
     182:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Q>
     186:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Q+0x1>
     18a:	89 2b       	or	r24, r25
     18c:	09 f0       	breq	.+2      	; 0x190 <loop+0x2a>
     18e:	aa c0       	rjmp	.+340    	; 0x2e4 <loop+0x17e>
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Wled>
     196:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Bled>
     1a0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     1a4:	c5 3f       	cpi	r28, 0xF5	; 245
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	d8 07       	cpc	r29, r24
     1aa:	1c f0       	brlt	.+6      	; 0x1b2 <loop+0x4c>
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
     1b2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     1b6:	81 11       	cpse	r24, r1
     1b8:	18 c0       	rjmp	.+48     	; 0x1ea <loop+0x84>
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
     1c0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     1c4:	61 e0       	ldi	r22, 0x01	; 1
     1c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     1ca:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     1ce:	80 e4       	ldi	r24, 0x40	; 64
     1d0:	9f e1       	ldi	r25, 0x1F	; 31
     1d2:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     1dc:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     1e0:	80 e4       	ldi	r24, 0x40	; 64
     1e2:	9f e1       	ldi	r25, 0x1F	; 31
     1e4:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     1e8:	75 c0       	rjmp	.+234    	; 0x2d4 <loop+0x16e>
     1ea:	c5 3f       	cpi	r28, 0xF5	; 245
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	d8 07       	cpc	r29, r24
     1f0:	0c f4       	brge	.+2      	; 0x1f4 <loop+0x8e>
     1f2:	70 c0       	rjmp	.+224    	; 0x2d4 <loop+0x16e>
     1f4:	68 ec       	ldi	r22, 0xC8	; 200
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 77 08 	call	0x10ee	; 0x10ee <delay>
     200:	03 3c       	cpi	r16, 0xC3	; 195
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	18 07       	cpc	r17, r24
     206:	b4 f1       	brlt	.+108    	; 0x274 <loop+0x10e>
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
     20e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     212:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <x+0x1>
     216:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <x>
     21a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     21e:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     222:	83 34       	cpi	r24, 0x43	; 67
     224:	91 05       	cpc	r25, r1
     226:	e4 f4       	brge	.+56     	; 0x260 <loop+0xfa>
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     22e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     232:	88 e8       	ldi	r24, 0x88	; 136
     234:	93 e1       	ldi	r25, 0x13	; 19
     236:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     240:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     244:	88 e8       	ldi	r24, 0x88	; 136
     246:	93 e1       	ldi	r25, 0x13	; 19
     248:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     24c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     250:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <x+0x1>
     25a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <x>
     25e:	dd cf       	rjmp	.-70     	; 0x21a <loop+0xb4>
     260:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <w>
     264:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <w+0x1>
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <w+0x1>
     26e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <w>
     272:	30 c0       	rjmp	.+96     	; 0x2d4 <loop+0x16e>
     274:	02 3c       	cpi	r16, 0xC2	; 194
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	18 07       	cpc	r17, r24
     27a:	61 f1       	breq	.+88     	; 0x2d4 <loop+0x16e>
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
     282:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     286:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <x+0x1>
     28a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <x>
     28e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     292:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     296:	83 34       	cpi	r24, 0x43	; 67
     298:	91 05       	cpc	r25, r1
     29a:	e4 f4       	brge	.+56     	; 0x2d4 <loop+0x16e>
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     2a2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     2a6:	88 e8       	ldi	r24, 0x88	; 136
     2a8:	93 e1       	ldi	r25, 0x13	; 19
     2aa:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     2b4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     2b8:	88 e8       	ldi	r24, 0x88	; 136
     2ba:	93 e1       	ldi	r25, 0x13	; 19
     2bc:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     2c0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     2c4:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <x+0x1>
     2ce:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <x>
     2d2:	dd cf       	rjmp	.-70     	; 0x28e <loop+0x128>
     2d4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <w>
     2d8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <w+0x1>
     2dc:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <g+0x1>
     2e0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <g>
     2e4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Q>
     2e8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Q+0x1>
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <loop+0x18c>
     2f0:	a4 c0       	rjmp	.+328    	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Bled>
     2f8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Wled>
     302:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     306:	c5 3f       	cpi	r28, 0xF5	; 245
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	d8 07       	cpc	r29, r24
     30c:	1c f0       	brlt	.+6      	; 0x314 <loop+0x1ae>
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
     314:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     318:	81 11       	cpse	r24, r1
     31a:	18 c0       	rjmp	.+48     	; 0x34c <loop+0x1e6>
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
     322:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     326:	61 e0       	ldi	r22, 0x01	; 1
     328:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     32c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     330:	80 e4       	ldi	r24, 0x40	; 64
     332:	9f e1       	ldi	r25, 0x1F	; 31
     334:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     33e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     342:	80 e4       	ldi	r24, 0x40	; 64
     344:	9f e1       	ldi	r25, 0x1F	; 31
     346:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     34a:	6f c0       	rjmp	.+222    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     34c:	c5 3f       	cpi	r28, 0xF5	; 245
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	d8 07       	cpc	r29, r24
     352:	0c f4       	brge	.+2      	; 0x356 <loop+0x1f0>
     354:	6a c0       	rjmp	.+212    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     356:	02 3c       	cpi	r16, 0xC2	; 194
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	18 07       	cpc	r17, r24
     35c:	b4 f5       	brge	.+108    	; 0x3ca <loop+0x264>
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
     364:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     368:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <x+0x1>
     36c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <x>
     370:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     374:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     378:	83 34       	cpi	r24, 0x43	; 67
     37a:	91 05       	cpc	r25, r1
     37c:	e4 f4       	brge	.+56     	; 0x3b6 <loop+0x250>
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     384:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     388:	88 e8       	ldi	r24, 0x88	; 136
     38a:	93 e1       	ldi	r25, 0x13	; 19
     38c:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     396:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     39a:	88 e8       	ldi	r24, 0x88	; 136
     39c:	93 e1       	ldi	r25, 0x13	; 19
     39e:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     3a2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     3a6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <x+0x1>
     3b0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <x>
     3b4:	dd cf       	rjmp	.-70     	; 0x370 <loop+0x20a>
     3b6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <b>
     3ba:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <b+0x1>
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <b+0x1>
     3c4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <b>
     3c8:	30 c0       	rjmp	.+96     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     3ca:	02 3c       	cpi	r16, 0xC2	; 194
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	18 07       	cpc	r17, r24
     3d0:	61 f1       	breq	.+88     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
     3d8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     3dc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <x+0x1>
     3e0:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <x>
     3e4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     3e8:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     3ec:	83 34       	cpi	r24, 0x43	; 67
     3ee:	91 05       	cpc	r25, r1
     3f0:	e4 f4       	brge	.+56     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     3f8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     3fc:	88 e8       	ldi	r24, 0x88	; 136
     3fe:	93 e1       	ldi	r25, 0x13	; 19
     400:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Step>
     40a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     40e:	88 e8       	ldi	r24, 0x88	; 136
     410:	93 e1       	ldi	r25, 0x13	; 19
     412:	0e 94 b3 08 	call	0x1166	; 0x1166 <delayMicroseconds>
     416:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <x>
     41a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <x+0x1>
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <x+0x1>
     424:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <x>
     428:	dd cf       	rjmp	.-70     	; 0x3e4 <loop+0x27e>
     42a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <b>
     42e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <b+0x1>
     432:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <g+0x1>
     436:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <g>
     43a:	6f e0       	ldi	r22, 0x0F	; 15
     43c:	71 e0       	ldi	r23, 0x01	; 1
     43e:	8c e1       	ldi	r24, 0x1C	; 28
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN5Print5printEPKc>
     446:	4a e0       	ldi	r20, 0x0A	; 10
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	b8 01       	movw	r22, r16
     44c:	8c e1       	ldi	r24, 0x1C	; 28
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN5Print5printEii>
     454:	62 e1       	ldi	r22, 0x12	; 18
     456:	71 e0       	ldi	r23, 0x01	; 1
     458:	8c e1       	ldi	r24, 0x1C	; 28
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN5Print5printEPKc>
     460:	4a e0       	ldi	r20, 0x0A	; 10
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	be 01       	movw	r22, r28
     466:	8c e1       	ldi	r24, 0x1C	; 28
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN5Print5printEii>
     46e:	65 e1       	ldi	r22, 0x15	; 21
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	8c e1       	ldi	r24, 0x1C	; 28
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN5Print5printEPKc>
     47a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <Q>
     47e:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <Q+0x1>
     482:	4a e0       	ldi	r20, 0x0A	; 10
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	8c e1       	ldi	r24, 0x1C	; 28
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN5Print5printEii>
     48e:	68 e1       	ldi	r22, 0x18	; 24
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	8c e1       	ldi	r24, 0x1C	; 28
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN5Print5printEPKc>
     49a:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <g>
     49e:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <g+0x1>
     4a2:	4a e0       	ldi	r20, 0x0A	; 10
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	8c e1       	ldi	r24, 0x1C	; 28
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <_ZN5Print7printlnEii>

000004b6 <_Z12receiveEventi>:
    Serial.write('\n');
    delay(500);*/
}
void receiveEvent(int howMany)
{
  while (0 < Wire.available())
     4b6:	87 ec       	ldi	r24, 0xC7	; 199
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN7TwoWire9availableEv>
     4be:	18 16       	cp	r1, r24
     4c0:	19 06       	cpc	r1, r25
     4c2:	4c f4       	brge	.+18     	; 0x4d6 <_Z12receiveEventi+0x20>
  {
    Q = Wire.read();
     4c4:	87 ec       	ldi	r24, 0xC7	; 199
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN7TwoWire4readEv>
     4cc:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Q+0x1>
     4d0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Q>
     4d4:	f0 cf       	rjmp	.-32     	; 0x4b6 <_Z12receiveEventi>
  }
  /*Serial.print("Q:");
    Serial.println(Q);*/
}
     4d6:	08 95       	ret

000004d8 <_Z12requestEventv>:
>>>>>>> parent of c14ab71... 测出合适脉宽
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
<<<<<<< HEAD
     416:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <g>
     41a:	8f ed       	ldi	r24, 0xDF	; 223
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0c 94 31 04 	jmp	0x862	; 0x862 <_ZN7TwoWire5writeEh>

00000422 <twi_init>:
=======
     4d8:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <g>
     4dc:	87 ec       	ldi	r24, 0xC7	; 199
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0c 94 92 04 	jmp	0x924	; 0x924 <_ZN7TwoWire5writeEh>

000004e4 <twi_init>:
>>>>>>> parent of c14ab71... 测出合适脉宽
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
<<<<<<< HEAD
     422:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <twi_state>
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <twi_sendStop>
     42c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_inRepStart>
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	82 e1       	ldi	r24, 0x12	; 18
     434:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	83 e1       	ldi	r24, 0x13	; 19
     43c:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
     440:	e9 eb       	ldi	r30, 0xB9	; 185
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	8e 7f       	andi	r24, 0xFE	; 254
     448:	80 83       	st	Z, r24
     44a:	80 81       	ld	r24, Z
     44c:	8d 7f       	andi	r24, 0xFD	; 253
     44e:	80 83       	st	Z, r24
     450:	88 e4       	ldi	r24, 0x48	; 72
     452:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     456:	85 e4       	ldi	r24, 0x45	; 69
     458:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     45c:	08 95       	ret

0000045e <twi_setAddress>:
     45e:	88 0f       	add	r24, r24
     460:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     464:	08 95       	ret

00000466 <twi_transmit>:
     466:	40 91 93 01 	lds	r20, 0x0193	; 0x800193 <twi_txBufferLength>
     46a:	26 2f       	mov	r18, r22
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	24 0f       	add	r18, r20
     470:	31 1d       	adc	r19, r1
     472:	21 32       	cpi	r18, 0x21	; 33
     474:	31 05       	cpc	r19, r1
     476:	dc f4       	brge	.+54     	; 0x4ae <twi_transmit+0x48>
     478:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <twi_state>
     47c:	24 30       	cpi	r18, 0x04	; 4
     47e:	c9 f4       	brne	.+50     	; 0x4b2 <twi_transmit+0x4c>
     480:	fc 01       	movw	r30, r24
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	86 17       	cp	r24, r22
     488:	58 f4       	brcc	.+22     	; 0x4a0 <twi_transmit+0x3a>
     48a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <twi_txBufferLength>
     48e:	21 91       	ld	r18, Z+
     490:	dc 01       	movw	r26, r24
     492:	ab 56       	subi	r26, 0x6B	; 107
     494:	be 4f       	sbci	r27, 0xFE	; 254
     496:	a3 0f       	add	r26, r19
     498:	b1 1d       	adc	r27, r1
     49a:	2c 93       	st	X, r18
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	f3 cf       	rjmp	.-26     	; 0x486 <twi_transmit+0x20>
     4a0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_txBufferLength>
     4a4:	68 0f       	add	r22, r24
     4a6:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <twi_txBufferLength>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	08 95       	ret
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	08 95       	ret
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	08 95       	ret

000004b6 <twi_attachSlaveRxEvent>:
     4b6:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <twi_onSlaveReceive+0x1>
     4ba:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <twi_onSlaveReceive>
     4be:	08 95       	ret

000004c0 <twi_attachSlaveTxEvent>:
     4c0:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <twi_onSlaveTransmit+0x1>
     4c4:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <twi_onSlaveTransmit>
     4c8:	08 95       	ret

000004ca <twi_stop>:
=======
     4e4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <twi_state>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <twi_sendStop>
     4ee:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <twi_inRepStart>
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	82 e1       	ldi	r24, 0x12	; 18
     4f6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	83 e1       	ldi	r24, 0x13	; 19
     4fe:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <digitalWrite>
     502:	e9 eb       	ldi	r30, 0xB9	; 185
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	8e 7f       	andi	r24, 0xFE	; 254
     50a:	80 83       	st	Z, r24
     50c:	80 81       	ld	r24, Z
     50e:	8d 7f       	andi	r24, 0xFD	; 253
     510:	80 83       	st	Z, r24
     512:	88 e4       	ldi	r24, 0x48	; 72
     514:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     518:	85 e4       	ldi	r24, 0x45	; 69
     51a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     51e:	08 95       	ret

00000520 <twi_setAddress>:
     520:	88 0f       	add	r24, r24
     522:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     526:	08 95       	ret

00000528 <twi_transmit>:
     528:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <twi_txBufferLength>
     52c:	26 2f       	mov	r18, r22
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	24 0f       	add	r18, r20
     532:	31 1d       	adc	r19, r1
     534:	21 32       	cpi	r18, 0x21	; 33
     536:	31 05       	cpc	r19, r1
     538:	dc f4       	brge	.+54     	; 0x570 <twi_transmit+0x48>
     53a:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <twi_state>
     53e:	24 30       	cpi	r18, 0x04	; 4
     540:	c9 f4       	brne	.+50     	; 0x574 <twi_transmit+0x4c>
     542:	fc 01       	movw	r30, r24
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	86 17       	cp	r24, r22
     54a:	58 f4       	brcc	.+22     	; 0x562 <twi_transmit+0x3a>
     54c:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <twi_txBufferLength>
     550:	21 91       	ld	r18, Z+
     552:	dc 01       	movw	r26, r24
     554:	a3 58       	subi	r26, 0x83	; 131
     556:	be 4f       	sbci	r27, 0xFE	; 254
     558:	a3 0f       	add	r26, r19
     55a:	b1 1d       	adc	r27, r1
     55c:	2c 93       	st	X, r18
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	f3 cf       	rjmp	.-26     	; 0x548 <twi_transmit+0x20>
     562:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <twi_txBufferLength>
     566:	68 0f       	add	r22, r24
     568:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <twi_txBufferLength>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 95       	ret
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	08 95       	ret
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	08 95       	ret

00000578 <twi_attachSlaveRxEvent>:
     578:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <twi_onSlaveReceive+0x1>
     57c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <twi_onSlaveReceive>
     580:	08 95       	ret

00000582 <twi_attachSlaveTxEvent>:
     582:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <twi_onSlaveTransmit+0x1>
     586:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <twi_onSlaveTransmit>
     58a:	08 95       	ret

0000058c <twi_stop>:
>>>>>>> parent of c14ab71... 测出合适脉宽
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
<<<<<<< HEAD
     4ca:	85 ed       	ldi	r24, 0xD5	; 213
     4cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
=======
     58c:	85 ed       	ldi	r24, 0xD5	; 213
     58e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
>>>>>>> parent of c14ab71... 测出合适脉宽

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
<<<<<<< HEAD
     4d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4d4:	84 fd       	sbrc	r24, 4
     4d6:	fc cf       	rjmp	.-8      	; 0x4d0 <twi_stop+0x6>
=======
     592:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     596:	84 fd       	sbrc	r24, 4
     598:	fc cf       	rjmp	.-8      	; 0x592 <twi_stop+0x6>
>>>>>>> parent of c14ab71... 测出合适脉宽
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
<<<<<<< HEAD
     4d8:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <twi_state>
     4dc:	08 95       	ret

000004de <twi_releaseBus>:
=======
     59a:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <twi_state>
     59e:	08 95       	ret

000005a0 <twi_releaseBus>:
>>>>>>> parent of c14ab71... 测出合适脉宽
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
<<<<<<< HEAD
     4de:	85 ec       	ldi	r24, 0xC5	; 197
     4e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     4e4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <twi_state>
     4e8:	08 95       	ret

000004ea <__vector_24>:
=======
     5a0:	85 ec       	ldi	r24, 0xC5	; 197
     5a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     5a6:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <twi_state>
     5aa:	08 95       	ret

000005ac <__vector_24>:
>>>>>>> parent of c14ab71... 测出合适脉宽
}

ISR(TWI_vect)
{
<<<<<<< HEAD
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	2f 93       	push	r18
     4f6:	3f 93       	push	r19
     4f8:	4f 93       	push	r20
     4fa:	5f 93       	push	r21
     4fc:	6f 93       	push	r22
     4fe:	7f 93       	push	r23
     500:	8f 93       	push	r24
     502:	9f 93       	push	r25
     504:	af 93       	push	r26
     506:	bf 93       	push	r27
     508:	ef 93       	push	r30
     50a:	ff 93       	push	r31
  switch(TW_STATUS){
     50c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     510:	88 7f       	andi	r24, 0xF8	; 248
     512:	80 36       	cpi	r24, 0x60	; 96
     514:	09 f4       	brne	.+2      	; 0x518 <__vector_24+0x2e>
     516:	9e c0       	rjmp	.+316    	; 0x654 <__vector_24+0x16a>
     518:	78 f5       	brcc	.+94     	; 0x578 <__vector_24+0x8e>
     51a:	88 32       	cpi	r24, 0x28	; 40
     51c:	09 f4       	brne	.+2      	; 0x520 <__vector_24+0x36>
     51e:	5d c0       	rjmp	.+186    	; 0x5da <__vector_24+0xf0>
     520:	90 f4       	brcc	.+36     	; 0x546 <__vector_24+0x5c>
     522:	80 31       	cpi	r24, 0x10	; 16
     524:	09 f4       	brne	.+2      	; 0x528 <__vector_24+0x3e>
     526:	56 c0       	rjmp	.+172    	; 0x5d4 <__vector_24+0xea>
     528:	38 f4       	brcc	.+14     	; 0x538 <__vector_24+0x4e>
     52a:	88 23       	and	r24, r24
     52c:	09 f4       	brne	.+2      	; 0x530 <__vector_24+0x46>
     52e:	f5 c0       	rjmp	.+490    	; 0x71a <__vector_24+0x230>
     530:	88 30       	cpi	r24, 0x08	; 8
     532:	09 f4       	brne	.+2      	; 0x536 <__vector_24+0x4c>
     534:	4f c0       	rjmp	.+158    	; 0x5d4 <__vector_24+0xea>
     536:	f5 c0       	rjmp	.+490    	; 0x722 <__vector_24+0x238>
     538:	88 31       	cpi	r24, 0x18	; 24
     53a:	09 f4       	brne	.+2      	; 0x53e <__vector_24+0x54>
     53c:	4e c0       	rjmp	.+156    	; 0x5da <__vector_24+0xf0>
     53e:	80 32       	cpi	r24, 0x20	; 32
     540:	09 f4       	brne	.+2      	; 0x544 <__vector_24+0x5a>
     542:	5f c0       	rjmp	.+190    	; 0x602 <__vector_24+0x118>
     544:	ee c0       	rjmp	.+476    	; 0x722 <__vector_24+0x238>
     546:	80 34       	cpi	r24, 0x40	; 64
     548:	09 f4       	brne	.+2      	; 0x54c <__vector_24+0x62>
     54a:	6a c0       	rjmp	.+212    	; 0x620 <__vector_24+0x136>
     54c:	58 f4       	brcc	.+22     	; 0x564 <__vector_24+0x7a>
     54e:	80 33       	cpi	r24, 0x30	; 48
     550:	09 f4       	brne	.+2      	; 0x554 <__vector_24+0x6a>
     552:	57 c0       	rjmp	.+174    	; 0x602 <__vector_24+0x118>
     554:	88 33       	cpi	r24, 0x38	; 56
     556:	09 f0       	breq	.+2      	; 0x55a <__vector_24+0x70>
     558:	e4 c0       	rjmp	.+456    	; 0x722 <__vector_24+0x238>
=======
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	2f 93       	push	r18
     5b8:	3f 93       	push	r19
     5ba:	4f 93       	push	r20
     5bc:	5f 93       	push	r21
     5be:	6f 93       	push	r22
     5c0:	7f 93       	push	r23
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
     5c6:	af 93       	push	r26
     5c8:	bf 93       	push	r27
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
  switch(TW_STATUS){
     5ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5d2:	88 7f       	andi	r24, 0xF8	; 248
     5d4:	80 36       	cpi	r24, 0x60	; 96
     5d6:	09 f4       	brne	.+2      	; 0x5da <__vector_24+0x2e>
     5d8:	9e c0       	rjmp	.+316    	; 0x716 <__vector_24+0x16a>
     5da:	78 f5       	brcc	.+94     	; 0x63a <__vector_24+0x8e>
     5dc:	88 32       	cpi	r24, 0x28	; 40
     5de:	09 f4       	brne	.+2      	; 0x5e2 <__vector_24+0x36>
     5e0:	5d c0       	rjmp	.+186    	; 0x69c <__vector_24+0xf0>
     5e2:	90 f4       	brcc	.+36     	; 0x608 <__vector_24+0x5c>
     5e4:	80 31       	cpi	r24, 0x10	; 16
     5e6:	09 f4       	brne	.+2      	; 0x5ea <__vector_24+0x3e>
     5e8:	56 c0       	rjmp	.+172    	; 0x696 <__vector_24+0xea>
     5ea:	38 f4       	brcc	.+14     	; 0x5fa <__vector_24+0x4e>
     5ec:	88 23       	and	r24, r24
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <__vector_24+0x46>
     5f0:	f5 c0       	rjmp	.+490    	; 0x7dc <__vector_24+0x230>
     5f2:	88 30       	cpi	r24, 0x08	; 8
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <__vector_24+0x4c>
     5f6:	4f c0       	rjmp	.+158    	; 0x696 <__vector_24+0xea>
     5f8:	f5 c0       	rjmp	.+490    	; 0x7e4 <__vector_24+0x238>
     5fa:	88 31       	cpi	r24, 0x18	; 24
     5fc:	09 f4       	brne	.+2      	; 0x600 <__vector_24+0x54>
     5fe:	4e c0       	rjmp	.+156    	; 0x69c <__vector_24+0xf0>
     600:	80 32       	cpi	r24, 0x20	; 32
     602:	09 f4       	brne	.+2      	; 0x606 <__vector_24+0x5a>
     604:	5f c0       	rjmp	.+190    	; 0x6c4 <__vector_24+0x118>
     606:	ee c0       	rjmp	.+476    	; 0x7e4 <__vector_24+0x238>
     608:	80 34       	cpi	r24, 0x40	; 64
     60a:	09 f4       	brne	.+2      	; 0x60e <__vector_24+0x62>
     60c:	6a c0       	rjmp	.+212    	; 0x6e2 <__vector_24+0x136>
     60e:	58 f4       	brcc	.+22     	; 0x626 <__vector_24+0x7a>
     610:	80 33       	cpi	r24, 0x30	; 48
     612:	09 f4       	brne	.+2      	; 0x616 <__vector_24+0x6a>
     614:	57 c0       	rjmp	.+174    	; 0x6c4 <__vector_24+0x118>
     616:	88 33       	cpi	r24, 0x38	; 56
     618:	09 f0       	breq	.+2      	; 0x61c <__vector_24+0x70>
     61a:	e4 c0       	rjmp	.+456    	; 0x7e4 <__vector_24+0x238>
>>>>>>> parent of c14ab71... 测出合适脉宽
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
<<<<<<< HEAD
     55a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <twi_error>
      twi_releaseBus();
     55e:	0e 94 6f 02 	call	0x4de	; 0x4de <twi_releaseBus>
      break;
     562:	df c0       	rjmp	.+446    	; 0x722 <__vector_24+0x238>
=======
     61c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <twi_error>
      twi_releaseBus();
     620:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <twi_releaseBus>
      break;
     624:	df c0       	rjmp	.+446    	; 0x7e4 <__vector_24+0x238>
>>>>>>> parent of c14ab71... 测出合适脉宽
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
<<<<<<< HEAD
     564:	80 35       	cpi	r24, 0x50	; 80
     566:	09 f4       	brne	.+2      	; 0x56a <__vector_24+0x80>
     568:	4f c0       	rjmp	.+158    	; 0x608 <__vector_24+0x11e>
     56a:	88 35       	cpi	r24, 0x58	; 88
     56c:	09 f4       	brne	.+2      	; 0x570 <__vector_24+0x86>
     56e:	5d c0       	rjmp	.+186    	; 0x62a <__vector_24+0x140>
     570:	88 34       	cpi	r24, 0x48	; 72
     572:	09 f0       	breq	.+2      	; 0x576 <__vector_24+0x8c>
     574:	d6 c0       	rjmp	.+428    	; 0x722 <__vector_24+0x238>
     576:	d3 c0       	rjmp	.+422    	; 0x71e <__vector_24+0x234>
     578:	88 39       	cpi	r24, 0x98	; 152
     57a:	09 f4       	brne	.+2      	; 0x57e <__vector_24+0x94>
     57c:	c4 c0       	rjmp	.+392    	; 0x706 <__vector_24+0x21c>
     57e:	a8 f4       	brcc	.+42     	; 0x5aa <__vector_24+0xc0>
     580:	88 37       	cpi	r24, 0x78	; 120
     582:	09 f4       	brne	.+2      	; 0x586 <__vector_24+0x9c>
     584:	67 c0       	rjmp	.+206    	; 0x654 <__vector_24+0x16a>
     586:	38 f4       	brcc	.+14     	; 0x596 <__vector_24+0xac>
     588:	88 36       	cpi	r24, 0x68	; 104
     58a:	09 f4       	brne	.+2      	; 0x58e <__vector_24+0xa4>
     58c:	63 c0       	rjmp	.+198    	; 0x654 <__vector_24+0x16a>
     58e:	80 37       	cpi	r24, 0x70	; 112
     590:	09 f4       	brne	.+2      	; 0x594 <__vector_24+0xaa>
     592:	60 c0       	rjmp	.+192    	; 0x654 <__vector_24+0x16a>
     594:	c6 c0       	rjmp	.+396    	; 0x722 <__vector_24+0x238>
     596:	88 38       	cpi	r24, 0x88	; 136
     598:	09 f4       	brne	.+2      	; 0x59c <__vector_24+0xb2>
     59a:	b5 c0       	rjmp	.+362    	; 0x706 <__vector_24+0x21c>
     59c:	80 39       	cpi	r24, 0x90	; 144
     59e:	09 f4       	brne	.+2      	; 0x5a2 <__vector_24+0xb8>
     5a0:	5f c0       	rjmp	.+190    	; 0x660 <__vector_24+0x176>
     5a2:	80 38       	cpi	r24, 0x80	; 128
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_24+0xbe>
     5a6:	bd c0       	rjmp	.+378    	; 0x722 <__vector_24+0x238>
     5a8:	5b c0       	rjmp	.+182    	; 0x660 <__vector_24+0x176>
     5aa:	80 3b       	cpi	r24, 0xB0	; 176
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <__vector_24+0xc6>
     5ae:	83 c0       	rjmp	.+262    	; 0x6b6 <__vector_24+0x1cc>
     5b0:	38 f4       	brcc	.+14     	; 0x5c0 <__vector_24+0xd6>
     5b2:	80 3a       	cpi	r24, 0xA0	; 160
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <__vector_24+0xce>
     5b6:	66 c0       	rjmp	.+204    	; 0x684 <__vector_24+0x19a>
     5b8:	88 3a       	cpi	r24, 0xA8	; 168
     5ba:	09 f4       	brne	.+2      	; 0x5be <__vector_24+0xd4>
     5bc:	7c c0       	rjmp	.+248    	; 0x6b6 <__vector_24+0x1cc>
     5be:	b1 c0       	rjmp	.+354    	; 0x722 <__vector_24+0x238>
     5c0:	80 3c       	cpi	r24, 0xC0	; 192
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <__vector_24+0xdc>
     5c4:	a4 c0       	rjmp	.+328    	; 0x70e <__vector_24+0x224>
     5c6:	88 3c       	cpi	r24, 0xC8	; 200
     5c8:	09 f4       	brne	.+2      	; 0x5cc <__vector_24+0xe2>
     5ca:	a1 c0       	rjmp	.+322    	; 0x70e <__vector_24+0x224>
     5cc:	88 3b       	cpi	r24, 0xB8	; 184
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <__vector_24+0xe8>
     5d0:	87 c0       	rjmp	.+270    	; 0x6e0 <__vector_24+0x1f6>
     5d2:	a7 c0       	rjmp	.+334    	; 0x722 <__vector_24+0x238>
=======
     626:	80 35       	cpi	r24, 0x50	; 80
     628:	09 f4       	brne	.+2      	; 0x62c <__vector_24+0x80>
     62a:	4f c0       	rjmp	.+158    	; 0x6ca <__vector_24+0x11e>
     62c:	88 35       	cpi	r24, 0x58	; 88
     62e:	09 f4       	brne	.+2      	; 0x632 <__vector_24+0x86>
     630:	5d c0       	rjmp	.+186    	; 0x6ec <__vector_24+0x140>
     632:	88 34       	cpi	r24, 0x48	; 72
     634:	09 f0       	breq	.+2      	; 0x638 <__vector_24+0x8c>
     636:	d6 c0       	rjmp	.+428    	; 0x7e4 <__vector_24+0x238>
     638:	d3 c0       	rjmp	.+422    	; 0x7e0 <__vector_24+0x234>
     63a:	88 39       	cpi	r24, 0x98	; 152
     63c:	09 f4       	brne	.+2      	; 0x640 <__vector_24+0x94>
     63e:	c4 c0       	rjmp	.+392    	; 0x7c8 <__vector_24+0x21c>
     640:	a8 f4       	brcc	.+42     	; 0x66c <__vector_24+0xc0>
     642:	88 37       	cpi	r24, 0x78	; 120
     644:	09 f4       	brne	.+2      	; 0x648 <__vector_24+0x9c>
     646:	67 c0       	rjmp	.+206    	; 0x716 <__vector_24+0x16a>
     648:	38 f4       	brcc	.+14     	; 0x658 <__vector_24+0xac>
     64a:	88 36       	cpi	r24, 0x68	; 104
     64c:	09 f4       	brne	.+2      	; 0x650 <__vector_24+0xa4>
     64e:	63 c0       	rjmp	.+198    	; 0x716 <__vector_24+0x16a>
     650:	80 37       	cpi	r24, 0x70	; 112
     652:	09 f4       	brne	.+2      	; 0x656 <__vector_24+0xaa>
     654:	60 c0       	rjmp	.+192    	; 0x716 <__vector_24+0x16a>
     656:	c6 c0       	rjmp	.+396    	; 0x7e4 <__vector_24+0x238>
     658:	88 38       	cpi	r24, 0x88	; 136
     65a:	09 f4       	brne	.+2      	; 0x65e <__vector_24+0xb2>
     65c:	b5 c0       	rjmp	.+362    	; 0x7c8 <__vector_24+0x21c>
     65e:	80 39       	cpi	r24, 0x90	; 144
     660:	09 f4       	brne	.+2      	; 0x664 <__vector_24+0xb8>
     662:	5f c0       	rjmp	.+190    	; 0x722 <__vector_24+0x176>
     664:	80 38       	cpi	r24, 0x80	; 128
     666:	09 f0       	breq	.+2      	; 0x66a <__vector_24+0xbe>
     668:	bd c0       	rjmp	.+378    	; 0x7e4 <__vector_24+0x238>
     66a:	5b c0       	rjmp	.+182    	; 0x722 <__vector_24+0x176>
     66c:	80 3b       	cpi	r24, 0xB0	; 176
     66e:	09 f4       	brne	.+2      	; 0x672 <__vector_24+0xc6>
     670:	83 c0       	rjmp	.+262    	; 0x778 <__vector_24+0x1cc>
     672:	38 f4       	brcc	.+14     	; 0x682 <__vector_24+0xd6>
     674:	80 3a       	cpi	r24, 0xA0	; 160
     676:	09 f4       	brne	.+2      	; 0x67a <__vector_24+0xce>
     678:	66 c0       	rjmp	.+204    	; 0x746 <__vector_24+0x19a>
     67a:	88 3a       	cpi	r24, 0xA8	; 168
     67c:	09 f4       	brne	.+2      	; 0x680 <__vector_24+0xd4>
     67e:	7c c0       	rjmp	.+248    	; 0x778 <__vector_24+0x1cc>
     680:	b1 c0       	rjmp	.+354    	; 0x7e4 <__vector_24+0x238>
     682:	80 3c       	cpi	r24, 0xC0	; 192
     684:	09 f4       	brne	.+2      	; 0x688 <__vector_24+0xdc>
     686:	a4 c0       	rjmp	.+328    	; 0x7d0 <__vector_24+0x224>
     688:	88 3c       	cpi	r24, 0xC8	; 200
     68a:	09 f4       	brne	.+2      	; 0x68e <__vector_24+0xe2>
     68c:	a1 c0       	rjmp	.+322    	; 0x7d0 <__vector_24+0x224>
     68e:	88 3b       	cpi	r24, 0xB8	; 184
     690:	09 f4       	brne	.+2      	; 0x694 <__vector_24+0xe8>
     692:	87 c0       	rjmp	.+270    	; 0x7a2 <__vector_24+0x1f6>
     694:	a7 c0       	rjmp	.+334    	; 0x7e4 <__vector_24+0x238>
>>>>>>> parent of c14ab71... 测出合适脉宽
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
<<<<<<< HEAD
     5d4:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <twi_slarw>
     5d8:	10 c0       	rjmp	.+32     	; 0x5fa <__vector_24+0x110>
=======
     696:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <twi_slarw>
     69a:	10 c0       	rjmp	.+32     	; 0x6bc <__vector_24+0x110>
>>>>>>> parent of c14ab71... 测出合适脉宽

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
<<<<<<< HEAD
     5da:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <twi_masterBufferIndex>
     5de:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <twi_masterBufferLength>
     5e2:	98 17       	cp	r25, r24
     5e4:	70 f5       	brcc	.+92     	; 0x642 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     5e6:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <twi_masterBufferIndex>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	8e 0f       	add	r24, r30
     5ee:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_masterBufferIndex>
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	e9 54       	subi	r30, 0x49	; 73
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	80 81       	ld	r24, Z
     5fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
=======
     69c:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <twi_masterBufferIndex>
     6a0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <twi_masterBufferLength>
     6a4:	98 17       	cp	r25, r24
     6a6:	70 f5       	brcc	.+92     	; 0x704 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     6a8:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <twi_masterBufferIndex>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	8e 0f       	add	r24, r30
     6b0:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <twi_masterBufferIndex>
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e1 56       	subi	r30, 0x61	; 97
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	80 81       	ld	r24, Z
     6bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
>>>>>>> parent of c14ab71... 测出合适脉宽
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
<<<<<<< HEAD
     5fe:	85 ec       	ldi	r24, 0xC5	; 197
     600:	83 c0       	rjmp	.+262    	; 0x708 <__vector_24+0x21e>
=======
     6c0:	85 ec       	ldi	r24, 0xC5	; 197
     6c2:	83 c0       	rjmp	.+262    	; 0x7ca <__vector_24+0x21e>
>>>>>>> parent of c14ab71... 测出合适脉宽
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
<<<<<<< HEAD
     602:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <twi_error>
     606:	8b c0       	rjmp	.+278    	; 0x71e <__vector_24+0x234>
=======
     6c4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <twi_error>
     6c8:	8b c0       	rjmp	.+278    	; 0x7e0 <__vector_24+0x234>
>>>>>>> parent of c14ab71... 测出合适脉宽
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
<<<<<<< HEAD
     608:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <twi_masterBufferIndex>
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	8e 0f       	add	r24, r30
     610:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_masterBufferIndex>
     614:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	e9 54       	subi	r30, 0x49	; 73
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     620:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <twi_masterBufferIndex>
     624:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <twi_masterBufferLength>
     628:	6b c0       	rjmp	.+214    	; 0x700 <__vector_24+0x216>
=======
     6ca:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <twi_masterBufferIndex>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	8e 0f       	add	r24, r30
     6d2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <twi_masterBufferIndex>
     6d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	e1 56       	subi	r30, 0x61	; 97
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     6e2:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <twi_masterBufferIndex>
     6e6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <twi_masterBufferLength>
     6ea:	6b c0       	rjmp	.+214    	; 0x7c2 <__vector_24+0x216>
>>>>>>> parent of c14ab71... 测出合适脉宽
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
<<<<<<< HEAD
     62a:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <twi_masterBufferIndex>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8e 0f       	add	r24, r30
     632:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_masterBufferIndex>
     636:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	e9 54       	subi	r30, 0x49	; 73
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	80 83       	st	Z, r24
	if (twi_sendStop)
     642:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi_sendStop>
     646:	81 11       	cpse	r24, r1
     648:	6a c0       	rjmp	.+212    	; 0x71e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_inRepStart>
=======
     6ec:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <twi_masterBufferIndex>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	8e 0f       	add	r24, r30
     6f4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <twi_masterBufferIndex>
     6f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	e1 56       	subi	r30, 0x61	; 97
     700:	fe 4f       	sbci	r31, 0xFE	; 254
     702:	80 83       	st	Z, r24
	if (twi_sendStop)
     704:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <twi_sendStop>
     708:	81 11       	cpse	r24, r1
     70a:	6a c0       	rjmp	.+212    	; 0x7e0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <twi_inRepStart>
>>>>>>> parent of c14ab71... 测出合适脉宽
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
<<<<<<< HEAD
     650:	84 ea       	ldi	r24, 0xA4	; 164
     652:	5e c0       	rjmp	.+188    	; 0x710 <__vector_24+0x226>
=======
     712:	84 ea       	ldi	r24, 0xA4	; 164
     714:	5e c0       	rjmp	.+188    	; 0x7d2 <__vector_24+0x226>
>>>>>>> parent of c14ab71... 测出合适脉宽
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
<<<<<<< HEAD
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     65a:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <twi_rxBufferIndex>
     65e:	cf cf       	rjmp	.-98     	; 0x5fe <__vector_24+0x114>
=======
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     71c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <twi_rxBufferIndex>
     720:	cf cf       	rjmp	.-98     	; 0x6c0 <__vector_24+0x114>
>>>>>>> parent of c14ab71... 测出合适脉宽
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
<<<<<<< HEAD
     660:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_rxBufferIndex>
     664:	80 32       	cpi	r24, 0x20	; 32
     666:	08 f0       	brcs	.+2      	; 0x66a <__vector_24+0x180>
     668:	4e c0       	rjmp	.+156    	; 0x706 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     66a:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <twi_rxBufferIndex>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	8e 0f       	add	r24, r30
     672:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <twi_rxBufferIndex>
     676:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	ed 58       	subi	r30, 0x8D	; 141
     67e:	fe 4f       	sbci	r31, 0xFE	; 254
     680:	80 83       	st	Z, r24
     682:	bd cf       	rjmp	.-134    	; 0x5fe <__vector_24+0x114>
=======
     722:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <twi_rxBufferIndex>
     726:	80 32       	cpi	r24, 0x20	; 32
     728:	08 f0       	brcs	.+2      	; 0x72c <__vector_24+0x180>
     72a:	4e c0       	rjmp	.+156    	; 0x7c8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     72c:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <twi_rxBufferIndex>
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	8e 0f       	add	r24, r30
     734:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <twi_rxBufferIndex>
     738:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	e5 5a       	subi	r30, 0xA5	; 165
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	80 83       	st	Z, r24
     744:	bd cf       	rjmp	.-134    	; 0x6c0 <__vector_24+0x114>
>>>>>>> parent of c14ab71... 测出合适脉宽
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
<<<<<<< HEAD
     684:	0e 94 6f 02 	call	0x4de	; 0x4de <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     688:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_rxBufferIndex>
     68c:	80 32       	cpi	r24, 0x20	; 32
     68e:	30 f4       	brcc	.+12     	; 0x69c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     690:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <twi_rxBufferIndex>
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	ed 58       	subi	r30, 0x8D	; 141
     698:	fe 4f       	sbci	r31, 0xFE	; 254
     69a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     69c:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <twi_rxBufferIndex>
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <twi_onSlaveReceive>
     6a6:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <twi_onSlaveReceive+0x1>
     6aa:	83 e7       	ldi	r24, 0x73	; 115
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     6b0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <twi_rxBufferIndex>
      break;
     6b4:	36 c0       	rjmp	.+108    	; 0x722 <__vector_24+0x238>
=======
     746:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     74a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <twi_rxBufferIndex>
     74e:	80 32       	cpi	r24, 0x20	; 32
     750:	30 f4       	brcc	.+12     	; 0x75e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     752:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <twi_rxBufferIndex>
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	e5 5a       	subi	r30, 0xA5	; 165
     75a:	fe 4f       	sbci	r31, 0xFE	; 254
     75c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     75e:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <twi_rxBufferIndex>
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <twi_onSlaveReceive>
     768:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <twi_onSlaveReceive+0x1>
     76c:	8b e5       	ldi	r24, 0x5B	; 91
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     772:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <twi_rxBufferIndex>
      break;
     776:	36 c0       	rjmp	.+108    	; 0x7e4 <__vector_24+0x238>
>>>>>>> parent of c14ab71... 测出合适脉宽
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
<<<<<<< HEAD
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     6bc:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     6c0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     6c4:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <twi_onSlaveTransmit>
     6c8:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <twi_onSlaveTransmit+0x1>
     6cc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     6ce:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_txBufferLength>
     6d2:	81 11       	cpse	r24, r1
     6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     6dc:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <twi_txBuffer>
=======
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     77e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     782:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     786:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <twi_onSlaveTransmit>
     78a:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <twi_onSlaveTransmit+0x1>
     78e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     790:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <twi_txBufferLength>
     794:	81 11       	cpse	r24, r1
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     79e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <twi_txBuffer>
>>>>>>> parent of c14ab71... 测出合适脉宽
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
<<<<<<< HEAD
     6e0:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <twi_txBufferIndex>
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	8e 0f       	add	r24, r30
     6e8:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <twi_txBufferIndex>
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	eb 56       	subi	r30, 0x6B	; 107
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	80 81       	ld	r24, Z
     6f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     6f8:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <twi_txBufferIndex>
     6fc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_txBufferLength>
     700:	98 17       	cp	r25, r24
     702:	08 f4       	brcc	.+2      	; 0x706 <__vector_24+0x21c>
     704:	7c cf       	rjmp	.-264    	; 0x5fe <__vector_24+0x114>
=======
     7a2:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <twi_txBufferIndex>
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	8e 0f       	add	r24, r30
     7aa:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <twi_txBufferIndex>
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	e3 58       	subi	r30, 0x83	; 131
     7b2:	fe 4f       	sbci	r31, 0xFE	; 254
     7b4:	80 81       	ld	r24, Z
     7b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     7ba:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <twi_txBufferIndex>
     7be:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <twi_txBufferLength>
     7c2:	98 17       	cp	r25, r24
     7c4:	08 f4       	brcc	.+2      	; 0x7c8 <__vector_24+0x21c>
     7c6:	7c cf       	rjmp	.-264    	; 0x6c0 <__vector_24+0x114>
>>>>>>> parent of c14ab71... 测出合适脉宽
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
<<<<<<< HEAD
     706:	85 e8       	ldi	r24, 0x85	; 133
     708:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     70c:	0a c0       	rjmp	.+20     	; 0x722 <__vector_24+0x238>
=======
     7c8:	85 e8       	ldi	r24, 0x85	; 133
     7ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <__vector_24+0x238>
>>>>>>> parent of c14ab71... 测出合适脉宽
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
<<<<<<< HEAD
     70e:	85 ec       	ldi	r24, 0xC5	; 197
     710:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
=======
     7d0:	85 ec       	ldi	r24, 0xC5	; 197
     7d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
>>>>>>> parent of c14ab71... 测出合适脉宽
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
<<<<<<< HEAD
     714:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <twi_state>
      break;
     718:	04 c0       	rjmp	.+8      	; 0x722 <__vector_24+0x238>
=======
     7d6:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <twi_state>
      break;
     7da:	04 c0       	rjmp	.+8      	; 0x7e4 <__vector_24+0x238>
>>>>>>> parent of c14ab71... 测出合适脉宽

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
<<<<<<< HEAD
     71a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <twi_error>
      twi_stop();
     71e:	0e 94 65 02 	call	0x4ca	; 0x4ca <twi_stop>
      break;
  }
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <_ZN5Print17availableForWriteEv>:
=======
     7dc:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <twi_error>
      twi_stop();
     7e0:	0e 94 c6 02 	call	0x58c	; 0x58c <twi_stop>
      break;
  }
}
     7e4:	ff 91       	pop	r31
     7e6:	ef 91       	pop	r30
     7e8:	bf 91       	pop	r27
     7ea:	af 91       	pop	r26
     7ec:	9f 91       	pop	r25
     7ee:	8f 91       	pop	r24
     7f0:	7f 91       	pop	r23
     7f2:	6f 91       	pop	r22
     7f4:	5f 91       	pop	r21
     7f6:	4f 91       	pop	r20
     7f8:	3f 91       	pop	r19
     7fa:	2f 91       	pop	r18
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <_ZN5Print17availableForWriteEv>:
>>>>>>> parent of c14ab71... 测出合适脉宽
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
<<<<<<< HEAD
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	08 95       	ret

0000074a <_ZN7TwoWire9availableEv>:
     74a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZN7TwoWire14rxBufferLengthE>
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <_ZN7TwoWire13rxBufferIndexE>
     754:	82 1b       	sub	r24, r18
     756:	91 09       	sbc	r25, r1
     758:	08 95       	ret

0000075a <_ZN7TwoWire4readEv>:
     75a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <_ZN7TwoWire13rxBufferIndexE>
     75e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZN7TwoWire14rxBufferLengthE>
     762:	98 17       	cp	r25, r24
     764:	50 f4       	brcc	.+20     	; 0x77a <_ZN7TwoWire4readEv+0x20>
     766:	e9 2f       	mov	r30, r25
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	ec 5e       	subi	r30, 0xEC	; 236
     76c:	fd 4f       	sbci	r31, 0xFD	; 253
     76e:	20 81       	ld	r18, Z
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	9f 5f       	subi	r25, 0xFF	; 255
     774:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <_ZN7TwoWire13rxBufferIndexE>
     778:	02 c0       	rjmp	.+4      	; 0x77e <_ZN7TwoWire4readEv+0x24>
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	3f ef       	ldi	r19, 0xFF	; 255
     77e:	c9 01       	movw	r24, r18
     780:	08 95       	ret

00000782 <_ZN7TwoWire4peekEv>:
     782:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <_ZN7TwoWire13rxBufferIndexE>
     786:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZN7TwoWire14rxBufferLengthE>
     78a:	e8 17       	cp	r30, r24
     78c:	30 f4       	brcc	.+12     	; 0x79a <_ZN7TwoWire4peekEv+0x18>
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	ec 5e       	subi	r30, 0xEC	; 236
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	80 81       	ld	r24, Z
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	08 95       	ret

000007a0 <_ZN7TwoWire5flushEv>:
     7a0:	08 95       	ret

000007a2 <_ZN7TwoWire16onReceiveServiceEPhi>:
     7a2:	ac 01       	movw	r20, r24
     7a4:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <_ZN7TwoWire14user_onReceiveE>
     7a8:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <_ZN7TwoWire14user_onReceiveE+0x1>
     7ac:	30 97       	sbiw	r30, 0x00	; 0
     7ae:	e1 f0       	breq	.+56     	; 0x7e8 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
     7b0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <_ZN7TwoWire13rxBufferIndexE>
     7b4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZN7TwoWire14rxBufferLengthE>
     7b8:	98 17       	cp	r25, r24
     7ba:	b0 f0       	brcs	.+44     	; 0x7e8 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	29 2f       	mov	r18, r25
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	26 17       	cp	r18, r22
     7c4:	37 07       	cpc	r19, r23
     7c6:	54 f4       	brge	.+20     	; 0x7dc <_ZN7TwoWire16onReceiveServiceEPhi+0x3a>
     7c8:	da 01       	movw	r26, r20
     7ca:	a2 0f       	add	r26, r18
     7cc:	b3 1f       	adc	r27, r19
     7ce:	8c 91       	ld	r24, X
     7d0:	d9 01       	movw	r26, r18
     7d2:	ac 5e       	subi	r26, 0xEC	; 236
     7d4:	bd 4f       	sbci	r27, 0xFD	; 253
     7d6:	8c 93       	st	X, r24
     7d8:	9f 5f       	subi	r25, 0xFF	; 255
     7da:	f1 cf       	rjmp	.-30     	; 0x7be <_ZN7TwoWire16onReceiveServiceEPhi+0x1c>
     7dc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <_ZN7TwoWire13rxBufferIndexE>
     7e0:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <_ZN7TwoWire14rxBufferLengthE>
     7e4:	cb 01       	movw	r24, r22
     7e6:	09 94       	ijmp
     7e8:	08 95       	ret

000007ea <_ZN7TwoWire16onRequestServiceEv>:
     7ea:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <_ZN7TwoWire14user_onRequestE>
     7ee:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <_ZN7TwoWire14user_onRequestE+0x1>
     7f2:	30 97       	sbiw	r30, 0x00	; 0
     7f4:	29 f0       	breq	.+10     	; 0x800 <_ZN7TwoWire16onRequestServiceEv+0x16>
     7f6:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <_ZN7TwoWire13txBufferIndexE>
     7fa:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <_ZN7TwoWire14txBufferLengthE>
     7fe:	09 94       	ijmp
     800:	08 95       	ret

00000802 <_ZN7TwoWire5writeEPKhj>:
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	7c 01       	movw	r14, r24
     814:	26 2f       	mov	r18, r22
     816:	97 2f       	mov	r25, r23
     818:	8a 01       	movw	r16, r20
     81a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <_ZN7TwoWire12transmittingE>
     81e:	88 23       	and	r24, r24
     820:	91 f0       	breq	.+36     	; 0x846 <_ZN7TwoWire5writeEPKhj+0x44>
     822:	c6 2f       	mov	r28, r22
     824:	d7 2f       	mov	r29, r23
     826:	6e 01       	movw	r12, r28
     828:	c4 0e       	add	r12, r20
     82a:	d5 1e       	adc	r13, r21
     82c:	cc 15       	cp	r28, r12
     82e:	dd 05       	cpc	r29, r13
     830:	71 f0       	breq	.+28     	; 0x84e <_ZN7TwoWire5writeEPKhj+0x4c>
     832:	69 91       	ld	r22, Y+
     834:	d7 01       	movw	r26, r14
     836:	ed 91       	ld	r30, X+
     838:	fc 91       	ld	r31, X
     83a:	01 90       	ld	r0, Z+
     83c:	f0 81       	ld	r31, Z
     83e:	e0 2d       	mov	r30, r0
     840:	c7 01       	movw	r24, r14
     842:	09 95       	icall
     844:	f3 cf       	rjmp	.-26     	; 0x82c <_ZN7TwoWire5writeEPKhj+0x2a>
     846:	64 2f       	mov	r22, r20
     848:	82 2f       	mov	r24, r18
     84a:	0e 94 33 02 	call	0x466	; 0x466 <twi_transmit>
     84e:	c8 01       	movw	r24, r16
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	08 95       	ret

00000862 <_ZN7TwoWire5writeEh>:
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	1f 92       	push	r1
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	69 83       	std	Y+1, r22	; 0x01
     86e:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <_ZN7TwoWire12transmittingE>
     872:	22 23       	and	r18, r18
     874:	d1 f0       	breq	.+52     	; 0x8aa <_ZN7TwoWire5writeEh+0x48>
     876:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <_ZN7TwoWire14txBufferLengthE>
     87a:	20 32       	cpi	r18, 0x20	; 32
     87c:	40 f0       	brcs	.+16     	; 0x88e <_ZN7TwoWire5writeEh+0x2c>
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	fc 01       	movw	r30, r24
     884:	33 83       	std	Z+3, r19	; 0x03
     886:	22 83       	std	Z+2, r18	; 0x02
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	15 c0       	rjmp	.+42     	; 0x8b8 <_ZN7TwoWire5writeEh+0x56>
     88e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZN7TwoWire13txBufferIndexE>
     892:	e8 2f       	mov	r30, r24
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	ee 50       	subi	r30, 0x0E	; 14
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	99 81       	ldd	r25, Y+1	; 0x01
     89c:	90 83       	st	Z, r25
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <_ZN7TwoWire13txBufferIndexE>
     8a4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZN7TwoWire14txBufferLengthE>
     8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <_ZN7TwoWire5writeEh+0x52>
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 33 02 	call	0x466	; 0x466 <twi_transmit>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <_ZN7TwoWireC1Ev>:
     8c0:	fc 01       	movw	r30, r24
     8c2:	13 82       	std	Z+3, r1	; 0x03
     8c4:	12 82       	std	Z+2, r1	; 0x02
     8c6:	88 ee       	ldi	r24, 0xE8	; 232
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	a0 e0       	ldi	r26, 0x00	; 0
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	84 83       	std	Z+4, r24	; 0x04
     8d0:	95 83       	std	Z+5, r25	; 0x05
     8d2:	a6 83       	std	Z+6, r26	; 0x06
     8d4:	b7 83       	std	Z+7, r27	; 0x07
     8d6:	82 e2       	ldi	r24, 0x22	; 34
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
     8de:	08 95       	ret

000008e0 <_ZN7TwoWire5beginEv>:
     8e0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <_ZN7TwoWire13rxBufferIndexE>
     8e4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <_ZN7TwoWire14rxBufferLengthE>
     8e8:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <_ZN7TwoWire13txBufferIndexE>
     8ec:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <_ZN7TwoWire14txBufferLengthE>
     8f0:	0c 94 11 02 	jmp	0x422	; 0x422 <twi_init>

000008f4 <_ZN7TwoWire5beginEh>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
     8fa:	86 2f       	mov	r24, r22
     8fc:	0e 94 2f 02 	call	0x45e	; 0x45e <twi_setAddress>
     900:	85 ef       	ldi	r24, 0xF5	; 245
     902:	93 e0       	ldi	r25, 0x03	; 3
     904:	0e 94 60 02 	call	0x4c0	; 0x4c0 <twi_attachSlaveTxEvent>
     908:	81 ed       	ldi	r24, 0xD1	; 209
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <twi_attachSlaveRxEvent>
     910:	ce 01       	movw	r24, r28
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_ZN7TwoWire5beginEv>

0000091a <_ZN7TwoWire5beginEi>:
     91a:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_ZN7TwoWire5beginEh>

0000091e <_ZN7TwoWire9onReceiveEPFviE>:
=======
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	08 95       	ret

0000080c <_ZN7TwoWire9availableEv>:
     80c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZN7TwoWire14rxBufferLengthE>
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <_ZN7TwoWire13rxBufferIndexE>
     816:	82 1b       	sub	r24, r18
     818:	91 09       	sbc	r25, r1
     81a:	08 95       	ret

0000081c <_ZN7TwoWire4readEv>:
     81c:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <_ZN7TwoWire13rxBufferIndexE>
     820:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZN7TwoWire14rxBufferLengthE>
     824:	98 17       	cp	r25, r24
     826:	50 f4       	brcc	.+20     	; 0x83c <_ZN7TwoWire4readEv+0x20>
     828:	e9 2f       	mov	r30, r25
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	e4 50       	subi	r30, 0x04	; 4
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	20 81       	ld	r18, Z
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	9f 5f       	subi	r25, 0xFF	; 255
     836:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <_ZN7TwoWire13rxBufferIndexE>
     83a:	02 c0       	rjmp	.+4      	; 0x840 <_ZN7TwoWire4readEv+0x24>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	c9 01       	movw	r24, r18
     842:	08 95       	ret

00000844 <_ZN7TwoWire4peekEv>:
     844:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <_ZN7TwoWire13rxBufferIndexE>
     848:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZN7TwoWire14rxBufferLengthE>
     84c:	e8 17       	cp	r30, r24
     84e:	30 f4       	brcc	.+12     	; 0x85c <_ZN7TwoWire4peekEv+0x18>
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	e4 50       	subi	r30, 0x04	; 4
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	80 81       	ld	r24, Z
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	08 95       	ret
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	08 95       	ret

00000862 <_ZN7TwoWire5flushEv>:
     862:	08 95       	ret

00000864 <_ZN7TwoWire16onReceiveServiceEPhi>:
     864:	ac 01       	movw	r20, r24
     866:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <_ZN7TwoWire14user_onReceiveE>
     86a:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <_ZN7TwoWire14user_onReceiveE+0x1>
     86e:	30 97       	sbiw	r30, 0x00	; 0
     870:	e1 f0       	breq	.+56     	; 0x8aa <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
     872:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <_ZN7TwoWire13rxBufferIndexE>
     876:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZN7TwoWire14rxBufferLengthE>
     87a:	98 17       	cp	r25, r24
     87c:	b0 f0       	brcs	.+44     	; 0x8aa <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	29 2f       	mov	r18, r25
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	26 17       	cp	r18, r22
     886:	37 07       	cpc	r19, r23
     888:	54 f4       	brge	.+20     	; 0x89e <_ZN7TwoWire16onReceiveServiceEPhi+0x3a>
     88a:	da 01       	movw	r26, r20
     88c:	a2 0f       	add	r26, r18
     88e:	b3 1f       	adc	r27, r19
     890:	8c 91       	ld	r24, X
     892:	d9 01       	movw	r26, r18
     894:	a4 50       	subi	r26, 0x04	; 4
     896:	be 4f       	sbci	r27, 0xFE	; 254
     898:	8c 93       	st	X, r24
     89a:	9f 5f       	subi	r25, 0xFF	; 255
     89c:	f1 cf       	rjmp	.-30     	; 0x880 <_ZN7TwoWire16onReceiveServiceEPhi+0x1c>
     89e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <_ZN7TwoWire13rxBufferIndexE>
     8a2:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <_ZN7TwoWire14rxBufferLengthE>
     8a6:	cb 01       	movw	r24, r22
     8a8:	09 94       	ijmp
     8aa:	08 95       	ret

000008ac <_ZN7TwoWire16onRequestServiceEv>:
     8ac:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <_ZN7TwoWire14user_onRequestE>
     8b0:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <_ZN7TwoWire14user_onRequestE+0x1>
     8b4:	30 97       	sbiw	r30, 0x00	; 0
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <_ZN7TwoWire16onRequestServiceEv+0x16>
     8b8:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <_ZN7TwoWire13txBufferIndexE>
     8bc:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <_ZN7TwoWire14txBufferLengthE>
     8c0:	09 94       	ijmp
     8c2:	08 95       	ret

000008c4 <_ZN7TwoWire5writeEPKhj>:
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	7c 01       	movw	r14, r24
     8d6:	26 2f       	mov	r18, r22
     8d8:	97 2f       	mov	r25, r23
     8da:	8a 01       	movw	r16, r20
     8dc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZN7TwoWire12transmittingE>
     8e0:	88 23       	and	r24, r24
     8e2:	91 f0       	breq	.+36     	; 0x908 <__stack+0x9>
     8e4:	c6 2f       	mov	r28, r22
     8e6:	d7 2f       	mov	r29, r23
     8e8:	6e 01       	movw	r12, r28
     8ea:	c4 0e       	add	r12, r20
     8ec:	d5 1e       	adc	r13, r21
     8ee:	cc 15       	cp	r28, r12
     8f0:	dd 05       	cpc	r29, r13
     8f2:	71 f0       	breq	.+28     	; 0x910 <__stack+0x11>
     8f4:	69 91       	ld	r22, Y+
     8f6:	d7 01       	movw	r26, r14
     8f8:	ed 91       	ld	r30, X+
     8fa:	fc 91       	ld	r31, X
     8fc:	01 90       	ld	r0, Z+
     8fe:	f0 81       	ld	r31, Z
     900:	e0 2d       	mov	r30, r0
     902:	c7 01       	movw	r24, r14
     904:	09 95       	icall
     906:	f3 cf       	rjmp	.-26     	; 0x8ee <_ZN7TwoWire5writeEPKhj+0x2a>
     908:	64 2f       	mov	r22, r20
     90a:	82 2f       	mov	r24, r18
     90c:	0e 94 94 02 	call	0x528	; 0x528 <twi_transmit>
     910:	c8 01       	movw	r24, r16
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	08 95       	ret

00000924 <_ZN7TwoWire5writeEh>:
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	1f 92       	push	r1
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	69 83       	std	Y+1, r22	; 0x01
     930:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <_ZN7TwoWire12transmittingE>
     934:	22 23       	and	r18, r18
     936:	d1 f0       	breq	.+52     	; 0x96c <_ZN7TwoWire5writeEh+0x48>
     938:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <_ZN7TwoWire14txBufferLengthE>
     93c:	20 32       	cpi	r18, 0x20	; 32
     93e:	40 f0       	brcs	.+16     	; 0x950 <_ZN7TwoWire5writeEh+0x2c>
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	fc 01       	movw	r30, r24
     946:	33 83       	std	Z+3, r19	; 0x03
     948:	22 83       	std	Z+2, r18	; 0x02
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	15 c0       	rjmp	.+42     	; 0x97a <_ZN7TwoWire5writeEh+0x56>
     950:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <_ZN7TwoWire13txBufferIndexE>
     954:	e8 2f       	mov	r30, r24
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	e6 52       	subi	r30, 0x26	; 38
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	99 81       	ldd	r25, Y+1	; 0x01
     95e:	90 83       	st	Z, r25
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <_ZN7TwoWire13txBufferIndexE>
     966:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <_ZN7TwoWire14txBufferLengthE>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <_ZN7TwoWire5writeEh+0x52>
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	0e 94 94 02 	call	0x528	; 0x528 <twi_transmit>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <_ZN7TwoWireC1Ev>:
     982:	fc 01       	movw	r30, r24
     984:	13 82       	std	Z+3, r1	; 0x03
     986:	12 82       	std	Z+2, r1	; 0x02
     988:	88 ee       	ldi	r24, 0xE8	; 232
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	84 83       	std	Z+4, r24	; 0x04
     992:	95 83       	std	Z+5, r25	; 0x05
     994:	a6 83       	std	Z+6, r26	; 0x06
     996:	b7 83       	std	Z+7, r27	; 0x07
     998:	8f e1       	ldi	r24, 0x1F	; 31
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	80 83       	st	Z, r24
     9a0:	08 95       	ret

000009a2 <_ZN7TwoWire5beginEv>:
     9a2:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <_ZN7TwoWire13rxBufferIndexE>
     9a6:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <_ZN7TwoWire14rxBufferLengthE>
     9aa:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <_ZN7TwoWire13txBufferIndexE>
     9ae:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <_ZN7TwoWire14txBufferLengthE>
     9b2:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <twi_init>

000009b6 <_ZN7TwoWire5beginEh>:
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
     9bc:	86 2f       	mov	r24, r22
     9be:	0e 94 90 02 	call	0x520	; 0x520 <twi_setAddress>
     9c2:	86 e5       	ldi	r24, 0x56	; 86
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	0e 94 c1 02 	call	0x582	; 0x582 <twi_attachSlaveTxEvent>
     9ca:	82 e3       	ldi	r24, 0x32	; 50
     9cc:	94 e0       	ldi	r25, 0x04	; 4
     9ce:	0e 94 bc 02 	call	0x578	; 0x578 <twi_attachSlaveRxEvent>
     9d2:	ce 01       	movw	r24, r28
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN7TwoWire5beginEv>

000009dc <_ZN7TwoWire5beginEi>:
     9dc:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_ZN7TwoWire5beginEh>

000009e0 <_ZN7TwoWire9onReceiveEPFviE>:
>>>>>>> parent of c14ab71... 测出合适脉宽
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
<<<<<<< HEAD
     91e:	70 93 ec 01 	sts	0x01EC, r23	; 0x8001ec <_ZN7TwoWire14user_onReceiveE+0x1>
     922:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <_ZN7TwoWire14user_onReceiveE>
     926:	08 95       	ret

00000928 <_ZN7TwoWire9onRequestEPFvvE>:
=======
     9e0:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <_ZN7TwoWire14user_onReceiveE+0x1>
     9e4:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <_ZN7TwoWire14user_onReceiveE>
     9e8:	08 95       	ret

000009ea <_ZN7TwoWire9onRequestEPFvvE>:
>>>>>>> parent of c14ab71... 测出合适脉宽
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
<<<<<<< HEAD
     928:	70 93 ee 01 	sts	0x01EE, r23	; 0x8001ee <_ZN7TwoWire14user_onRequestE+0x1>
     92c:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <_ZN7TwoWire14user_onRequestE>
     930:	08 95       	ret

00000932 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
=======
     9ea:	70 93 d6 01 	sts	0x01D6, r23	; 0x8001d6 <_ZN7TwoWire14user_onRequestE+0x1>
     9ee:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <_ZN7TwoWire14user_onRequestE>
     9f2:	08 95       	ret

000009f4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
>>>>>>> parent of c14ab71... 测出合适脉宽
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
<<<<<<< HEAD
     932:	8f ed       	ldi	r24, 0xDF	; 223
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_ZN7TwoWireC1Ev>

0000093a <_ZL7nothingv>:
	}
}
=======
     9f4:	87 ec       	ldi	r24, 0xC7	; 199
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0c 94 c1 04 	jmp	0x982	; 0x982 <_ZN7TwoWireC1Ev>
>>>>>>> parent of c14ab71... 测出合适脉宽

000009fc <_ZL7nothingv>:
{
	_intFunc = userFunc;
<<<<<<< HEAD
     93a:	08 95       	ret

0000093c <_ZN6Timer1C1Ev>:
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	68 e4       	ldi	r22, 0x48	; 72
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	9f 83       	std	Y+7, r25	; 0x07
     950:	8e 83       	std	Y+6, r24	; 0x06
     952:	19 86       	std	Y+9, r1	; 0x09
     954:	18 86       	std	Y+8, r1	; 0x08
     956:	1b 86       	std	Y+11, r1	; 0x0b
     958:	1a 86       	std	Y+10, r1	; 0x0a
     95a:	8f b7       	in	r24, 0x3f	; 63
     95c:	80 68       	ori	r24, 0x80	; 128
     95e:	8f bf       	out	0x3f, r24	; 63
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <_ZN6Timer1D1Ev>:
=======
>>>>>>> parent of c14ab71... 测出合适脉宽
}

// default destructor
Timer1::~Timer1()
<<<<<<< HEAD
     966:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN6StringD1Ev>

0000096a <__vector_11>:
=======
     9fc:	08 95       	ret

000009fe <__vector_11>:
>>>>>>> parent of c14ab71... 测出合适脉宽
{
} //~Timer1

ISR (TIMER1_COMPA_vect)
{
<<<<<<< HEAD
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
	_intFunc();
     98c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <_ZL8_intFunc>
     990:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <_ZL8_intFunc+0x1>
     994:	09 95       	icall
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <_ZN14HardwareSerial9availableEv>:
=======
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
	_intFunc();
     a20:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <_ZL8_intFunc>
     a24:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <_ZL8_intFunc+0x1>
     a28:	09 95       	icall
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <_ZN14HardwareSerial9availableEv>:
>>>>>>> parent of c14ab71... 测出合适脉宽
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
<<<<<<< HEAD
     9b8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     9ba:	91 8d       	ldd	r25, Z+25	; 0x19
     9bc:	22 8d       	ldd	r18, Z+26	; 0x1a
     9be:	89 2f       	mov	r24, r25
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	80 5c       	subi	r24, 0xC0	; 192
     9c4:	9f 4f       	sbci	r25, 0xFF	; 255
     9c6:	82 1b       	sub	r24, r18
     9c8:	91 09       	sbc	r25, r1
}
     9ca:	8f 73       	andi	r24, 0x3F	; 63
     9cc:	99 27       	eor	r25, r25
     9ce:	08 95       	ret

000009d0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     9d0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     9d2:	91 8d       	ldd	r25, Z+25	; 0x19
     9d4:	82 8d       	ldd	r24, Z+26	; 0x1a
     9d6:	98 17       	cp	r25, r24
     9d8:	31 f0       	breq	.+12     	; 0x9e6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     9da:	82 8d       	ldd	r24, Z+26	; 0x1a
     9dc:	e8 0f       	add	r30, r24
     9de:	f1 1d       	adc	r31, r1
     9e0:	85 8d       	ldd	r24, Z+29	; 0x1d
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	08 95       	ret
=======
     a4c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a4e:	91 8d       	ldd	r25, Z+25	; 0x19
     a50:	22 8d       	ldd	r18, Z+26	; 0x1a
     a52:	89 2f       	mov	r24, r25
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	80 5c       	subi	r24, 0xC0	; 192
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	82 1b       	sub	r24, r18
     a5c:	91 09       	sbc	r25, r1
}
     a5e:	8f 73       	andi	r24, 0x3F	; 63
     a60:	99 27       	eor	r25, r25
     a62:	08 95       	ret

00000a64 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     a64:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     a66:	91 8d       	ldd	r25, Z+25	; 0x19
     a68:	82 8d       	ldd	r24, Z+26	; 0x1a
     a6a:	98 17       	cp	r25, r24
     a6c:	31 f0       	breq	.+12     	; 0xa7a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a6e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a70:	e8 0f       	add	r30, r24
     a72:	f1 1d       	adc	r31, r1
     a74:	85 8d       	ldd	r24, Z+29	; 0x1d
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	08 95       	ret
>>>>>>> parent of c14ab71... 测出合适脉宽
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
<<<<<<< HEAD
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
=======
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> parent of c14ab71... 测出合适脉宽
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
<<<<<<< HEAD
     9ea:	08 95       	ret

000009ec <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     9ec:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     9ee:	91 8d       	ldd	r25, Z+25	; 0x19
     9f0:	82 8d       	ldd	r24, Z+26	; 0x1a
     9f2:	98 17       	cp	r25, r24
     9f4:	61 f0       	breq	.+24     	; 0xa0e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     9f6:	82 8d       	ldd	r24, Z+26	; 0x1a
     9f8:	df 01       	movw	r26, r30
     9fa:	a8 0f       	add	r26, r24
     9fc:	b1 1d       	adc	r27, r1
     9fe:	5d 96       	adiw	r26, 0x1d	; 29
     a00:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a02:	92 8d       	ldd	r25, Z+26	; 0x1a
     a04:	9f 5f       	subi	r25, 0xFF	; 255
     a06:	9f 73       	andi	r25, 0x3F	; 63
     a08:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	08 95       	ret
=======
     a7e:	08 95       	ret

00000a80 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     a80:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     a82:	91 8d       	ldd	r25, Z+25	; 0x19
     a84:	82 8d       	ldd	r24, Z+26	; 0x1a
     a86:	98 17       	cp	r25, r24
     a88:	61 f0       	breq	.+24     	; 0xaa2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a8a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a8c:	df 01       	movw	r26, r30
     a8e:	a8 0f       	add	r26, r24
     a90:	b1 1d       	adc	r27, r1
     a92:	5d 96       	adiw	r26, 0x1d	; 29
     a94:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a96:	92 8d       	ldd	r25, Z+26	; 0x1a
     a98:	9f 5f       	subi	r25, 0xFF	; 255
     a9a:	9f 73       	andi	r25, 0x3F	; 63
     a9c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	08 95       	ret
>>>>>>> parent of c14ab71... 测出合适脉宽

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
<<<<<<< HEAD
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	9f ef       	ldi	r25, 0xFF	; 255
=======
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> parent of c14ab71... 测出合适脉宽
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
<<<<<<< HEAD
     a12:	08 95       	ret

00000a14 <_ZN14HardwareSerial17availableForWriteEv>:
=======
     aa6:	08 95       	ret

00000aa8 <_ZN14HardwareSerial17availableForWriteEv>:
>>>>>>> parent of c14ab71... 测出合适脉宽
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
<<<<<<< HEAD
     a14:	fc 01       	movw	r30, r24
     a16:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     a18:	44 8d       	ldd	r20, Z+28	; 0x1c
     a1a:	25 2f       	mov	r18, r21
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	84 2f       	mov	r24, r20
     a20:	90 e0       	ldi	r25, 0x00	; 0
=======
     aa8:	fc 01       	movw	r30, r24
     aaa:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     aac:	44 8d       	ldd	r20, Z+28	; 0x1c
     aae:	25 2f       	mov	r18, r21
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	84 2f       	mov	r24, r20
     ab4:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> parent of c14ab71... 测出合适脉宽
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
<<<<<<< HEAD
     a22:	82 1b       	sub	r24, r18
     a24:	93 0b       	sbc	r25, r19
     a26:	54 17       	cp	r21, r20
     a28:	10 f0       	brcs	.+4      	; 0xa2e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     a2a:	cf 96       	adiw	r24, 0x3f	; 63
     a2c:	08 95       	ret
  return tail - head - 1;
     a2e:	01 97       	sbiw	r24, 0x01	; 1
}
     a30:	08 95       	ret

00000a32 <_Z14serialEventRunv>:
=======
     ab6:	82 1b       	sub	r24, r18
     ab8:	93 0b       	sbc	r25, r19
     aba:	54 17       	cp	r21, r20
     abc:	10 f0       	brcs	.+4      	; 0xac2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     abe:	cf 96       	adiw	r24, 0x3f	; 63
     ac0:	08 95       	ret
  return tail - head - 1;
     ac2:	01 97       	sbiw	r24, 0x01	; 1
}
     ac4:	08 95       	ret

00000ac6 <_Z14serialEventRunv>:
>>>>>>> parent of c14ab71... 测出合适脉宽
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
<<<<<<< HEAD
     a32:	8e e6       	ldi	r24, 0x6E	; 110
     a34:	96 e0       	ldi	r25, 0x06	; 6
     a36:	89 2b       	or	r24, r25
     a38:	49 f0       	breq	.+18     	; 0xa4c <_Z14serialEventRunv+0x1a>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	89 2b       	or	r24, r25
     a40:	29 f0       	breq	.+10     	; 0xa4c <_Z14serialEventRunv+0x1a>
     a42:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z17Serial0_availablev>
     a46:	81 11       	cpse	r24, r1
     a48:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     a4c:	08 95       	ret

00000a4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
=======
     ac6:	88 eb       	ldi	r24, 0xB8	; 184
     ac8:	96 e0       	ldi	r25, 0x06	; 6
     aca:	89 2b       	or	r24, r25
     acc:	49 f0       	breq	.+18     	; 0xae0 <_Z14serialEventRunv+0x1a>
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	89 2b       	or	r24, r25
     ad4:	29 f0       	breq	.+10     	; 0xae0 <_Z14serialEventRunv+0x1a>
     ad6:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z17Serial0_availablev>
     ada:	81 11       	cpse	r24, r1
     adc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     ae0:	08 95       	ret

00000ae2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
>>>>>>> parent of c14ab71... 测出合适脉宽
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
<<<<<<< HEAD
     a4e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a50:	84 8d       	ldd	r24, Z+28	; 0x1c
     a52:	df 01       	movw	r26, r30
     a54:	a8 0f       	add	r26, r24
     a56:	b1 1d       	adc	r27, r1
     a58:	a3 5a       	subi	r26, 0xA3	; 163
     a5a:	bf 4f       	sbci	r27, 0xFF	; 255
     a5c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a5e:	84 8d       	ldd	r24, Z+28	; 0x1c
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	8f 73       	andi	r24, 0x3F	; 63
     a66:	99 27       	eor	r25, r25
     a68:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a6a:	a6 89       	ldd	r26, Z+22	; 0x16
     a6c:	b7 89       	ldd	r27, Z+23	; 0x17
     a6e:	2c 93       	st	X, r18
=======
     ae2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     ae4:	84 8d       	ldd	r24, Z+28	; 0x1c
     ae6:	df 01       	movw	r26, r30
     ae8:	a8 0f       	add	r26, r24
     aea:	b1 1d       	adc	r27, r1
     aec:	a3 5a       	subi	r26, 0xA3	; 163
     aee:	bf 4f       	sbci	r27, 0xFF	; 255
     af0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     af2:	84 8d       	ldd	r24, Z+28	; 0x1c
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	8f 73       	andi	r24, 0x3F	; 63
     afa:	99 27       	eor	r25, r25
     afc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     afe:	a6 89       	ldd	r26, Z+22	; 0x16
     b00:	b7 89       	ldd	r27, Z+23	; 0x17
     b02:	2c 93       	st	X, r18
>>>>>>> parent of c14ab71... 测出合适脉宽

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
<<<<<<< HEAD
     a70:	a0 89       	ldd	r26, Z+16	; 0x10
     a72:	b1 89       	ldd	r27, Z+17	; 0x11
     a74:	8c 91       	ld	r24, X
     a76:	80 64       	ori	r24, 0x40	; 64
     a78:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     a7a:	93 8d       	ldd	r25, Z+27	; 0x1b
     a7c:	84 8d       	ldd	r24, Z+28	; 0x1c
     a7e:	98 13       	cpse	r25, r24
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     a82:	02 88       	ldd	r0, Z+18	; 0x12
     a84:	f3 89       	ldd	r31, Z+19	; 0x13
     a86:	e0 2d       	mov	r30, r0
     a88:	80 81       	ld	r24, Z
     a8a:	8f 7d       	andi	r24, 0xDF	; 223
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <_ZN14HardwareSerial5flushEv>:
=======
     b04:	a0 89       	ldd	r26, Z+16	; 0x10
     b06:	b1 89       	ldd	r27, Z+17	; 0x11
     b08:	8c 91       	ld	r24, X
     b0a:	80 64       	ori	r24, 0x40	; 64
     b0c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     b0e:	93 8d       	ldd	r25, Z+27	; 0x1b
     b10:	84 8d       	ldd	r24, Z+28	; 0x1c
     b12:	98 13       	cpse	r25, r24
     b14:	06 c0       	rjmp	.+12     	; 0xb22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b16:	02 88       	ldd	r0, Z+18	; 0x12
     b18:	f3 89       	ldd	r31, Z+19	; 0x13
     b1a:	e0 2d       	mov	r30, r0
     b1c:	80 81       	ld	r24, Z
     b1e:	8f 7d       	andi	r24, 0xDF	; 223
     b20:	80 83       	st	Z, r24
     b22:	08 95       	ret

00000b24 <_ZN14HardwareSerial5flushEv>:
>>>>>>> parent of c14ab71... 测出合适脉宽
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
<<<<<<< HEAD
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
=======
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	ec 01       	movw	r28, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
<<<<<<< HEAD
     a96:	88 8d       	ldd	r24, Y+24	; 0x18
     a98:	88 23       	and	r24, r24
     a9a:	c9 f0       	breq	.+50     	; 0xace <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a9c:	ea 89       	ldd	r30, Y+18	; 0x12
     a9e:	fb 89       	ldd	r31, Y+19	; 0x13
     aa0:	80 81       	ld	r24, Z
     aa2:	85 fd       	sbrc	r24, 5
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <_ZN14HardwareSerial5flushEv+0x20>
     aa6:	a8 89       	ldd	r26, Y+16	; 0x10
     aa8:	b9 89       	ldd	r27, Y+17	; 0x11
     aaa:	8c 91       	ld	r24, X
     aac:	86 fd       	sbrc	r24, 6
     aae:	0f c0       	rjmp	.+30     	; 0xace <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	07 fc       	sbrc	r0, 7
     ab4:	f5 cf       	rjmp	.-22     	; 0xaa0 <_ZN14HardwareSerial5flushEv+0x10>
     ab6:	80 81       	ld	r24, Z
     ab8:	85 ff       	sbrs	r24, 5
     aba:	f2 cf       	rjmp	.-28     	; 0xaa0 <_ZN14HardwareSerial5flushEv+0x10>
=======
     b2a:	88 8d       	ldd	r24, Y+24	; 0x18
     b2c:	88 23       	and	r24, r24
     b2e:	c9 f0       	breq	.+50     	; 0xb62 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b30:	ea 89       	ldd	r30, Y+18	; 0x12
     b32:	fb 89       	ldd	r31, Y+19	; 0x13
     b34:	80 81       	ld	r24, Z
     b36:	85 fd       	sbrc	r24, 5
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <_ZN14HardwareSerial5flushEv+0x20>
     b3a:	a8 89       	ldd	r26, Y+16	; 0x10
     b3c:	b9 89       	ldd	r27, Y+17	; 0x11
     b3e:	8c 91       	ld	r24, X
     b40:	86 fd       	sbrc	r24, 6
     b42:	0f c0       	rjmp	.+30     	; 0xb62 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	07 fc       	sbrc	r0, 7
     b48:	f5 cf       	rjmp	.-22     	; 0xb34 <_ZN14HardwareSerial5flushEv+0x10>
     b4a:	80 81       	ld	r24, Z
     b4c:	85 ff       	sbrs	r24, 5
     b4e:	f2 cf       	rjmp	.-28     	; 0xb34 <_ZN14HardwareSerial5flushEv+0x10>
>>>>>>> parent of c14ab71... 测出合适脉宽
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
<<<<<<< HEAD
     abc:	a8 89       	ldd	r26, Y+16	; 0x10
     abe:	b9 89       	ldd	r27, Y+17	; 0x11
     ac0:	8c 91       	ld	r24, X
     ac2:	85 ff       	sbrs	r24, 5
     ac4:	ed cf       	rjmp	.-38     	; 0xaa0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     acc:	e7 cf       	rjmp	.-50     	; 0xa9c <_ZN14HardwareSerial5flushEv+0xc>
=======
     b50:	a8 89       	ldd	r26, Y+16	; 0x10
     b52:	b9 89       	ldd	r27, Y+17	; 0x11
     b54:	8c 91       	ld	r24, X
     b56:	85 ff       	sbrs	r24, 5
     b58:	ed cf       	rjmp	.-38     	; 0xb34 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b60:	e7 cf       	rjmp	.-50     	; 0xb30 <_ZN14HardwareSerial5flushEv+0xc>
>>>>>>> parent of c14ab71... 测出合适脉宽
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
<<<<<<< HEAD
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
  _written = true;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	88 8f       	std	Y+24, r24	; 0x18
=======
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
  _written = true;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	88 8f       	std	Y+24, r24	; 0x18
>>>>>>> parent of c14ab71... 测出合适脉宽
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
<<<<<<< HEAD
     ae6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ae8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aea:	98 13       	cpse	r25, r24
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <_ZN14HardwareSerial5writeEh+0x24>
     aee:	e8 89       	ldd	r30, Y+16	; 0x10
     af0:	f9 89       	ldd	r31, Y+17	; 0x11
     af2:	80 81       	ld	r24, Z
     af4:	85 fd       	sbrc	r24, 5
     af6:	24 c0       	rjmp	.+72     	; 0xb40 <_ZN14HardwareSerial5writeEh+0x6c>
     af8:	f6 2e       	mov	r15, r22
=======
     b7a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b7e:	98 13       	cpse	r25, r24
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <_ZN14HardwareSerial5writeEh+0x24>
     b82:	e8 89       	ldd	r30, Y+16	; 0x10
     b84:	f9 89       	ldd	r31, Y+17	; 0x11
     b86:	80 81       	ld	r24, Z
     b88:	85 fd       	sbrc	r24, 5
     b8a:	24 c0       	rjmp	.+72     	; 0xbd4 <_ZN14HardwareSerial5writeEh+0x6c>
     b8c:	f6 2e       	mov	r15, r22
>>>>>>> parent of c14ab71... 测出合适脉宽
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
<<<<<<< HEAD
     afa:	0b 8d       	ldd	r16, Y+27	; 0x1b
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	0f 5f       	subi	r16, 0xFF	; 255
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
     b02:	0f 73       	andi	r16, 0x3F	; 63
     b04:	11 27       	eor	r17, r17
     b06:	e0 2e       	mov	r14, r16
=======
     b8e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b90:	10 e0       	ldi	r17, 0x00	; 0
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	0f 73       	andi	r16, 0x3F	; 63
     b98:	11 27       	eor	r17, r17
     b9a:	e0 2e       	mov	r14, r16
>>>>>>> parent of c14ab71... 测出合适脉宽
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
<<<<<<< HEAD
     b08:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b0a:	e8 12       	cpse	r14, r24
     b0c:	0c c0       	rjmp	.+24     	; 0xb26 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	07 fc       	sbrc	r0, 7
     b12:	fa cf       	rjmp	.-12     	; 0xb08 <_ZN14HardwareSerial5writeEh+0x34>
=======
     b9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b9e:	e8 12       	cpse	r14, r24
     ba0:	0c c0       	rjmp	.+24     	; 0xbba <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	07 fc       	sbrc	r0, 7
     ba6:	fa cf       	rjmp	.-12     	; 0xb9c <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> parent of c14ab71... 测出合适脉宽
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
<<<<<<< HEAD
     b14:	e8 89       	ldd	r30, Y+16	; 0x10
     b16:	f9 89       	ldd	r31, Y+17	; 0x11
     b18:	80 81       	ld	r24, Z
     b1a:	85 ff       	sbrs	r24, 5
     b1c:	f5 cf       	rjmp	.-22     	; 0xb08 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     b1e:	ce 01       	movw	r24, r28
     b20:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b24:	f1 cf       	rjmp	.-30     	; 0xb08 <_ZN14HardwareSerial5writeEh+0x34>
=======
     ba8:	e8 89       	ldd	r30, Y+16	; 0x10
     baa:	f9 89       	ldd	r31, Y+17	; 0x11
     bac:	80 81       	ld	r24, Z
     bae:	85 ff       	sbrs	r24, 5
     bb0:	f5 cf       	rjmp	.-22     	; 0xb9c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     bb2:	ce 01       	movw	r24, r28
     bb4:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     bb8:	f1 cf       	rjmp	.-30     	; 0xb9c <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> parent of c14ab71... 测出合适脉宽
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
<<<<<<< HEAD
     b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b28:	fe 01       	movw	r30, r28
     b2a:	e8 0f       	add	r30, r24
     b2c:	f1 1d       	adc	r31, r1
     b2e:	e3 5a       	subi	r30, 0xA3	; 163
     b30:	ff 4f       	sbci	r31, 0xFF	; 255
     b32:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     b34:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     b36:	ea 89       	ldd	r30, Y+18	; 0x12
     b38:	fb 89       	ldd	r31, Y+19	; 0x13
     b3a:	80 81       	ld	r24, Z
     b3c:	80 62       	ori	r24, 0x20	; 32
     b3e:	07 c0       	rjmp	.+14     	; 0xb4e <_ZN14HardwareSerial5writeEh+0x7a>
=======
     bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bbc:	fe 01       	movw	r30, r28
     bbe:	e8 0f       	add	r30, r24
     bc0:	f1 1d       	adc	r31, r1
     bc2:	e3 5a       	subi	r30, 0xA3	; 163
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     bc8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     bca:	ea 89       	ldd	r30, Y+18	; 0x12
     bcc:	fb 89       	ldd	r31, Y+19	; 0x13
     bce:	80 81       	ld	r24, Z
     bd0:	80 62       	ori	r24, 0x20	; 32
     bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <_ZN14HardwareSerial5writeEh+0x7a>
>>>>>>> parent of c14ab71... 测出合适脉宽
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
<<<<<<< HEAD
     b40:	ee 89       	ldd	r30, Y+22	; 0x16
     b42:	ff 89       	ldd	r31, Y+23	; 0x17
     b44:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     b46:	e8 89       	ldd	r30, Y+16	; 0x10
     b48:	f9 89       	ldd	r31, Y+17	; 0x11
     b4a:	80 81       	ld	r24, Z
     b4c:	80 64       	ori	r24, 0x40	; 64
     b4e:	80 83       	st	Z, r24
=======
     bd4:	ee 89       	ldd	r30, Y+22	; 0x16
     bd6:	ff 89       	ldd	r31, Y+23	; 0x17
     bd8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     bda:	e8 89       	ldd	r30, Y+16	; 0x10
     bdc:	f9 89       	ldd	r31, Y+17	; 0x11
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
<<<<<<< HEAD
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	08 95       	ret

00000b62 <_ZN14HardwareSerial5beginEmh>:
=======
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	08 95       	ret

00000bf6 <_ZN14HardwareSerial5beginEmh>:
>>>>>>> parent of c14ab71... 测出合适脉宽
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
<<<<<<< HEAD
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	ec 01       	movw	r28, r24
     b72:	6a 01       	movw	r12, r20
     b74:	7b 01       	movw	r14, r22
     b76:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b78:	e8 89       	ldd	r30, Y+16	; 0x10
     b7a:	f9 89       	ldd	r31, Y+17	; 0x11
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	80 83       	st	Z, r24
=======
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
     c06:	6a 01       	movw	r12, r20
     c08:	7b 01       	movw	r14, r22
     c0a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c0c:	e8 89       	ldd	r30, Y+16	; 0x10
     c0e:	f9 89       	ldd	r31, Y+17	; 0x11
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
<<<<<<< HEAD
     b80:	41 15       	cp	r20, r1
     b82:	51 4e       	sbci	r21, 0xE1	; 225
     b84:	61 05       	cpc	r22, r1
     b86:	71 05       	cpc	r23, r1
     b88:	b1 f0       	breq	.+44     	; 0xbb6 <_ZN14HardwareSerial5beginEmh+0x54>
=======
     c14:	41 15       	cp	r20, r1
     c16:	51 4e       	sbci	r21, 0xE1	; 225
     c18:	61 05       	cpc	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	b1 f0       	breq	.+44     	; 0xc4a <_ZN14HardwareSerial5beginEmh+0x54>
>>>>>>> parent of c14ab71... 测出合适脉宽
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
<<<<<<< HEAD
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	79 e0       	ldi	r23, 0x09	; 9
     b8e:	8d e3       	ldi	r24, 0x3D	; 61
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a7 01       	movw	r20, r14
     b94:	96 01       	movw	r18, r12
     b96:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__udivmodsi4>
     b9a:	da 01       	movw	r26, r20
     b9c:	c9 01       	movw	r24, r18
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	a1 09       	sbc	r26, r1
     ba2:	b1 09       	sbc	r27, r1
     ba4:	b6 95       	lsr	r27
     ba6:	a7 95       	ror	r26
     ba8:	97 95       	ror	r25
     baa:	87 95       	ror	r24
     bac:	ac 01       	movw	r20, r24
=======
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	79 e0       	ldi	r23, 0x09	; 9
     c22:	8d e3       	ldi	r24, 0x3D	; 61
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a7 01       	movw	r20, r14
     c28:	96 01       	movw	r18, r12
     c2a:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodsi4>
     c2e:	da 01       	movw	r26, r20
     c30:	c9 01       	movw	r24, r18
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	a1 09       	sbc	r26, r1
     c36:	b1 09       	sbc	r27, r1
     c38:	b6 95       	lsr	r27
     c3a:	a7 95       	ror	r26
     c3c:	97 95       	ror	r25
     c3e:	87 95       	ror	r24
     c40:	ac 01       	movw	r20, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
<<<<<<< HEAD
     bae:	41 15       	cp	r20, r1
     bb0:	80 e1       	ldi	r24, 0x10	; 16
     bb2:	58 07       	cpc	r21, r24
     bb4:	a8 f0       	brcs	.+42     	; 0xbe0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     bb6:	e8 89       	ldd	r30, Y+16	; 0x10
     bb8:	f9 89       	ldd	r31, Y+17	; 0x11
     bba:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     bbc:	60 e8       	ldi	r22, 0x80	; 128
     bbe:	74 e8       	ldi	r23, 0x84	; 132
     bc0:	8e e1       	ldi	r24, 0x1E	; 30
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	a7 01       	movw	r20, r14
     bc6:	96 01       	movw	r18, r12
     bc8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__udivmodsi4>
     bcc:	ba 01       	movw	r22, r20
     bce:	a9 01       	movw	r20, r18
     bd0:	41 50       	subi	r20, 0x01	; 1
     bd2:	51 09       	sbc	r21, r1
     bd4:	61 09       	sbc	r22, r1
     bd6:	71 09       	sbc	r23, r1
     bd8:	76 95       	lsr	r23
     bda:	67 95       	ror	r22
     bdc:	57 95       	ror	r21
     bde:	47 95       	ror	r20
=======
     c42:	41 15       	cp	r20, r1
     c44:	80 e1       	ldi	r24, 0x10	; 16
     c46:	58 07       	cpc	r21, r24
     c48:	a8 f0       	brcs	.+42     	; 0xc74 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     c4a:	e8 89       	ldd	r30, Y+16	; 0x10
     c4c:	f9 89       	ldd	r31, Y+17	; 0x11
     c4e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c50:	60 e8       	ldi	r22, 0x80	; 128
     c52:	74 e8       	ldi	r23, 0x84	; 132
     c54:	8e e1       	ldi	r24, 0x1E	; 30
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a7 01       	movw	r20, r14
     c5a:	96 01       	movw	r18, r12
     c5c:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodsi4>
     c60:	ba 01       	movw	r22, r20
     c62:	a9 01       	movw	r20, r18
     c64:	41 50       	subi	r20, 0x01	; 1
     c66:	51 09       	sbc	r21, r1
     c68:	61 09       	sbc	r22, r1
     c6a:	71 09       	sbc	r23, r1
     c6c:	76 95       	lsr	r23
     c6e:	67 95       	ror	r22
     c70:	57 95       	ror	r21
     c72:	47 95       	ror	r20
>>>>>>> parent of c14ab71... 测出合适脉宽
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
<<<<<<< HEAD
     be0:	ec 85       	ldd	r30, Y+12	; 0x0c
     be2:	fd 85       	ldd	r31, Y+13	; 0x0d
     be4:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     be6:	ee 85       	ldd	r30, Y+14	; 0x0e
     be8:	ff 85       	ldd	r31, Y+15	; 0x0f
     bea:	40 83       	st	Z, r20

  _written = false;
     bec:	18 8e       	std	Y+24, r1	; 0x18
=======
     c74:	ec 85       	ldd	r30, Y+12	; 0x0c
     c76:	fd 85       	ldd	r31, Y+13	; 0x0d
     c78:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     c7a:	ee 85       	ldd	r30, Y+14	; 0x0e
     c7c:	ff 85       	ldd	r31, Y+15	; 0x0f
     c7e:	40 83       	st	Z, r20

  _written = false;
     c80:	18 8e       	std	Y+24, r1	; 0x18
>>>>>>> parent of c14ab71... 测出合适脉宽

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
<<<<<<< HEAD
     bee:	ec 89       	ldd	r30, Y+20	; 0x14
     bf0:	fd 89       	ldd	r31, Y+21	; 0x15
     bf2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     bf4:	ea 89       	ldd	r30, Y+18	; 0x12
     bf6:	fb 89       	ldd	r31, Y+19	; 0x13
     bf8:	80 81       	ld	r24, Z
     bfa:	80 61       	ori	r24, 0x10	; 16
     bfc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     bfe:	ea 89       	ldd	r30, Y+18	; 0x12
     c00:	fb 89       	ldd	r31, Y+19	; 0x13
     c02:	80 81       	ld	r24, Z
     c04:	88 60       	ori	r24, 0x08	; 8
     c06:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c08:	ea 89       	ldd	r30, Y+18	; 0x12
     c0a:	fb 89       	ldd	r31, Y+19	; 0x13
     c0c:	80 81       	ld	r24, Z
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c12:	ea 89       	ldd	r30, Y+18	; 0x12
     c14:	fb 89       	ldd	r31, Y+19	; 0x13
     c16:	80 81       	ld	r24, Z
     c18:	8f 7d       	andi	r24, 0xDF	; 223
     c1a:	80 83       	st	Z, r24
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	08 95       	ret

00000c2c <__vector_18>:
=======
     c82:	ec 89       	ldd	r30, Y+20	; 0x14
     c84:	fd 89       	ldd	r31, Y+21	; 0x15
     c86:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     c88:	ea 89       	ldd	r30, Y+18	; 0x12
     c8a:	fb 89       	ldd	r31, Y+19	; 0x13
     c8c:	80 81       	ld	r24, Z
     c8e:	80 61       	ori	r24, 0x10	; 16
     c90:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c92:	ea 89       	ldd	r30, Y+18	; 0x12
     c94:	fb 89       	ldd	r31, Y+19	; 0x13
     c96:	80 81       	ld	r24, Z
     c98:	88 60       	ori	r24, 0x08	; 8
     c9a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c9c:	ea 89       	ldd	r30, Y+18	; 0x12
     c9e:	fb 89       	ldd	r31, Y+19	; 0x13
     ca0:	80 81       	ld	r24, Z
     ca2:	80 68       	ori	r24, 0x80	; 128
     ca4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     ca6:	ea 89       	ldd	r30, Y+18	; 0x12
     ca8:	fb 89       	ldd	r31, Y+19	; 0x13
     caa:	80 81       	ld	r24, Z
     cac:	8f 7d       	andi	r24, 0xDF	; 223
     cae:	80 83       	st	Z, r24
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	08 95       	ret

00000cc0 <__vector_18>:
>>>>>>> parent of c14ab71... 测出合适脉宽
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
<<<<<<< HEAD
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
=======
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	2f 93       	push	r18
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
>>>>>>> parent of c14ab71... 测出合适脉宽

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
<<<<<<< HEAD
     c40:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <Serial+0x10>
     c44:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <Serial+0x11>
     c48:	80 81       	ld	r24, Z
     c4a:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <Serial+0x16>
     c4e:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <Serial+0x17>
     c52:	82 fd       	sbrc	r24, 2
     c54:	12 c0       	rjmp	.+36     	; 0xc7a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c56:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c58:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <Serial+0x19>
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	8f 73       	andi	r24, 0x3F	; 63
=======
     cd4:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <Serial+0x10>
     cd8:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <Serial+0x11>
     cdc:	80 81       	ld	r24, Z
     cde:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <Serial+0x16>
     ce2:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <Serial+0x17>
     ce6:	82 fd       	sbrc	r24, 2
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     cea:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     cec:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <Serial+0x19>
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
     cf2:	8f 73       	andi	r24, 0x3F	; 63
>>>>>>> parent of c14ab71... 测出合适脉宽

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
<<<<<<< HEAD
     c60:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <Serial+0x1a>
     c64:	82 17       	cp	r24, r18
     c66:	51 f0       	breq	.+20     	; 0xc7c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     c68:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <Serial+0x19>
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	ec 5c       	subi	r30, 0xCC	; 204
     c70:	fd 4f       	sbci	r31, 0xFD	; 253
     c72:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     c74:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <Serial+0x19>
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <__vector_18+0x50>
=======
     cf4:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <Serial+0x1a>
     cf8:	82 17       	cp	r24, r18
     cfa:	51 f0       	breq	.+20     	; 0xd10 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     cfc:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <Serial+0x19>
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	e4 5e       	subi	r30, 0xE4	; 228
     d04:	fd 4f       	sbci	r31, 0xFD	; 253
     d06:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     d08:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <Serial+0x19>
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <__vector_18+0x50>
>>>>>>> parent of c14ab71... 测出合适脉宽
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
<<<<<<< HEAD
     c7a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_19>:
=======
     d0e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_19>:
>>>>>>> parent of c14ab71... 测出合适脉宽
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
<<<<<<< HEAD
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     cb2:	84 e3       	ldi	r24, 0x34	; 52
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <_Z17Serial0_availablev>:
=======
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d46:	8c e1       	ldi	r24, 0x1C	; 28
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <_Z17Serial0_availablev>:
>>>>>>> parent of c14ab71... 测出合适脉宽
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
<<<<<<< HEAD
     cdc:	84 e3       	ldi	r24, 0x34	; 52
     cde:	92 e0       	ldi	r25, 0x02	; 2
     ce0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_ZN14HardwareSerial9availableEv>
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	89 2b       	or	r24, r25
     ce8:	09 f4       	brne	.+2      	; 0xcec <_Z17Serial0_availablev+0x10>
     cea:	20 e0       	ldi	r18, 0x00	; 0
}
     cec:	82 2f       	mov	r24, r18
     cee:	08 95       	ret

00000cf0 <_GLOBAL__sub_I___vector_18>:
=======
     d70:	8c e1       	ldi	r24, 0x1C	; 28
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN14HardwareSerial9availableEv>
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	89 2b       	or	r24, r25
     d7c:	09 f4       	brne	.+2      	; 0xd80 <_Z17Serial0_availablev+0x10>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
}
     d80:	82 2f       	mov	r24, r18
     d82:	08 95       	ret

00000d84 <_GLOBAL__sub_I___vector_18>:
>>>>>>> parent of c14ab71... 测出合适脉宽
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
<<<<<<< HEAD
     cf0:	e4 e3       	ldi	r30, 0x34	; 52
     cf2:	f2 e0       	ldi	r31, 0x02	; 2
     cf4:	13 82       	std	Z+3, r1	; 0x03
     cf6:	12 82       	std	Z+2, r1	; 0x02
=======
     d84:	ec e1       	ldi	r30, 0x1C	; 28
     d86:	f2 e0       	ldi	r31, 0x02	; 2
     d88:	13 82       	std	Z+3, r1	; 0x03
     d8a:	12 82       	std	Z+2, r1	; 0x02
>>>>>>> parent of c14ab71... 测出合适脉宽
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
<<<<<<< HEAD
     cf8:	88 ee       	ldi	r24, 0xE8	; 232
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	a0 e0       	ldi	r26, 0x00	; 0
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	84 83       	std	Z+4, r24	; 0x04
     d02:	95 83       	std	Z+5, r25	; 0x05
     d04:	a6 83       	std	Z+6, r26	; 0x06
     d06:	b7 83       	std	Z+7, r27	; 0x07
=======
     d8c:	88 ee       	ldi	r24, 0xE8	; 232
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	a0 e0       	ldi	r26, 0x00	; 0
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	84 83       	std	Z+4, r24	; 0x04
     d96:	95 83       	std	Z+5, r25	; 0x05
     d98:	a6 83       	std	Z+6, r26	; 0x06
     d9a:	b7 83       	std	Z+7, r27	; 0x07
>>>>>>> parent of c14ab71... 测出合适脉宽
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
<<<<<<< HEAD
     d08:	88 e3       	ldi	r24, 0x38	; 56
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	91 83       	std	Z+1, r25	; 0x01
     d0e:	80 83       	st	Z, r24
     d10:	85 ec       	ldi	r24, 0xC5	; 197
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	95 87       	std	Z+13, r25	; 0x0d
     d16:	84 87       	std	Z+12, r24	; 0x0c
     d18:	84 ec       	ldi	r24, 0xC4	; 196
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	97 87       	std	Z+15, r25	; 0x0f
     d1e:	86 87       	std	Z+14, r24	; 0x0e
     d20:	80 ec       	ldi	r24, 0xC0	; 192
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	91 8b       	std	Z+17, r25	; 0x11
     d26:	80 8b       	std	Z+16, r24	; 0x10
     d28:	81 ec       	ldi	r24, 0xC1	; 193
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	93 8b       	std	Z+19, r25	; 0x13
     d2e:	82 8b       	std	Z+18, r24	; 0x12
     d30:	82 ec       	ldi	r24, 0xC2	; 194
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	95 8b       	std	Z+21, r25	; 0x15
     d36:	84 8b       	std	Z+20, r24	; 0x14
     d38:	86 ec       	ldi	r24, 0xC6	; 198
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	97 8b       	std	Z+23, r25	; 0x17
     d3e:	86 8b       	std	Z+22, r24	; 0x16
     d40:	11 8e       	std	Z+25, r1	; 0x19
     d42:	12 8e       	std	Z+26, r1	; 0x1a
     d44:	13 8e       	std	Z+27, r1	; 0x1b
     d46:	14 8e       	std	Z+28, r1	; 0x1c
     d48:	08 95       	ret

00000d4a <initVariant>:
=======
     d9c:	81 e3       	ldi	r24, 0x31	; 49
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	80 83       	st	Z, r24
     da4:	85 ec       	ldi	r24, 0xC5	; 197
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	95 87       	std	Z+13, r25	; 0x0d
     daa:	84 87       	std	Z+12, r24	; 0x0c
     dac:	84 ec       	ldi	r24, 0xC4	; 196
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	97 87       	std	Z+15, r25	; 0x0f
     db2:	86 87       	std	Z+14, r24	; 0x0e
     db4:	80 ec       	ldi	r24, 0xC0	; 192
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	91 8b       	std	Z+17, r25	; 0x11
     dba:	80 8b       	std	Z+16, r24	; 0x10
     dbc:	81 ec       	ldi	r24, 0xC1	; 193
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	93 8b       	std	Z+19, r25	; 0x13
     dc2:	82 8b       	std	Z+18, r24	; 0x12
     dc4:	82 ec       	ldi	r24, 0xC2	; 194
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	95 8b       	std	Z+21, r25	; 0x15
     dca:	84 8b       	std	Z+20, r24	; 0x14
     dcc:	86 ec       	ldi	r24, 0xC6	; 198
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	97 8b       	std	Z+23, r25	; 0x17
     dd2:	86 8b       	std	Z+22, r24	; 0x16
     dd4:	11 8e       	std	Z+25, r1	; 0x19
     dd6:	12 8e       	std	Z+26, r1	; 0x1a
     dd8:	13 8e       	std	Z+27, r1	; 0x1b
     dda:	14 8e       	std	Z+28, r1	; 0x1c
     ddc:	08 95       	ret

00000dde <initVariant>:
>>>>>>> parent of c14ab71... 测出合适脉宽
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
<<<<<<< HEAD
     d4a:	08 95       	ret

00000d4c <main>:
=======
     dde:	08 95       	ret

00000de0 <main>:
>>>>>>> parent of c14ab71... 测出合适脉宽

int main(void)
{
	init();
<<<<<<< HEAD
     d4c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <init>

	initVariant();
     d50:	0e 94 a5 06 	call	0xd4a	; 0xd4a <initVariant>
=======
     de0:	0e 94 be 08 	call	0x117c	; 0x117c <init>

	initVariant();
     de4:	0e 94 ef 06 	call	0xdde	; 0xdde <initVariant>
>>>>>>> parent of c14ab71... 测出合适脉宽

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
<<<<<<< HEAD
     d54:	0e 94 a5 00 	call	0x14a	; 0x14a <setup>
=======
     de8:	0e 94 88 00 	call	0x110	; 0x110 <setup>
>>>>>>> parent of c14ab71... 测出合适脉宽
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
<<<<<<< HEAD
     d58:	c9 e1       	ldi	r28, 0x19	; 25
     d5a:	d5 e0       	ldi	r29, 0x05	; 5
=======
     dec:	c3 e6       	ldi	r28, 0x63	; 99
     dee:	d5 e0       	ldi	r29, 0x05	; 5
>>>>>>> parent of c14ab71... 测出合适脉宽
#endif
	
	setup();
    
	for (;;) {
		loop();
<<<<<<< HEAD
     d5c:	0e 94 80 01 	call	0x300	; 0x300 <loop>
		if (serialEventRun) serialEventRun();
     d60:	20 97       	sbiw	r28, 0x00	; 0
     d62:	e1 f3       	breq	.-8      	; 0xd5c <main+0x10>
     d64:	0e 94 19 05 	call	0xa32	; 0xa32 <_Z14serialEventRunv>
     d68:	f9 cf       	rjmp	.-14     	; 0xd5c <main+0x10>

00000d6a <_ZN5Print5writeEPKhj>:
=======
     df0:	0e 94 b3 00 	call	0x166	; 0x166 <loop>
		if (serialEventRun) serialEventRun();
     df4:	20 97       	sbiw	r28, 0x00	; 0
     df6:	e1 f3       	breq	.-8      	; 0xdf0 <main+0x10>
     df8:	0e 94 63 05 	call	0xac6	; 0xac6 <_Z14serialEventRunv>
     dfc:	f9 cf       	rjmp	.-14     	; 0xdf0 <main+0x10>

00000dfe <_ZN5Print5writeEPKhj>:
>>>>>>> parent of c14ab71... 测出合适脉宽
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
<<<<<<< HEAD
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	6c 01       	movw	r12, r24
     d7c:	7a 01       	movw	r14, r20
     d7e:	8b 01       	movw	r16, r22
     d80:	c0 e0       	ldi	r28, 0x00	; 0
     d82:	d0 e0       	ldi	r29, 0x00	; 0
     d84:	ce 15       	cp	r28, r14
     d86:	df 05       	cpc	r29, r15
     d88:	89 f0       	breq	.+34     	; 0xdac <_ZN5Print5writeEPKhj+0x42>
     d8a:	d8 01       	movw	r26, r16
     d8c:	6d 91       	ld	r22, X+
     d8e:	8d 01       	movw	r16, r26
     d90:	d6 01       	movw	r26, r12
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	01 90       	ld	r0, Z+
     d98:	f0 81       	ld	r31, Z
     d9a:	e0 2d       	mov	r30, r0
     d9c:	c6 01       	movw	r24, r12
     d9e:	09 95       	icall
     da0:	89 2b       	or	r24, r25
     da2:	11 f4       	brne	.+4      	; 0xda8 <_ZN5Print5writeEPKhj+0x3e>
     da4:	7e 01       	movw	r14, r28
     da6:	02 c0       	rjmp	.+4      	; 0xdac <_ZN5Print5writeEPKhj+0x42>
     da8:	21 96       	adiw	r28, 0x01	; 1
     daa:	ec cf       	rjmp	.-40     	; 0xd84 <_ZN5Print5writeEPKhj+0x1a>
     dac:	c7 01       	movw	r24, r14
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	08 95       	ret

00000dc0 <_ZN5Print5writeEPKc>:
     dc0:	61 15       	cp	r22, r1
     dc2:	71 05       	cpc	r23, r1
     dc4:	79 f0       	breq	.+30     	; 0xde4 <_ZN5Print5writeEPKc+0x24>
     dc6:	fb 01       	movw	r30, r22
     dc8:	01 90       	ld	r0, Z+
     dca:	00 20       	and	r0, r0
     dcc:	e9 f7       	brne	.-6      	; 0xdc8 <_ZN5Print5writeEPKc+0x8>
     dce:	31 97       	sbiw	r30, 0x01	; 1
     dd0:	af 01       	movw	r20, r30
     dd2:	46 1b       	sub	r20, r22
     dd4:	57 0b       	sbc	r21, r23
     dd6:	dc 01       	movw	r26, r24
     dd8:	ed 91       	ld	r30, X+
     dda:	fc 91       	ld	r31, X
     ddc:	02 80       	ldd	r0, Z+2	; 0x02
     dde:	f3 81       	ldd	r31, Z+3	; 0x03
     de0:	e0 2d       	mov	r30, r0
     de2:	09 94       	ijmp
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	08 95       	ret

00000dea <_ZN5Print5printEPKc>:
     dea:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <_ZN5Print5writeEPKc>

00000dee <_ZN5Print5printEc>:
     dee:	dc 01       	movw	r26, r24
     df0:	ed 91       	ld	r30, X+
     df2:	fc 91       	ld	r31, X
     df4:	01 90       	ld	r0, Z+
     df6:	f0 81       	ld	r31, Z
     df8:	e0 2d       	mov	r30, r0
     dfa:	09 94       	ijmp

00000dfc <_ZN5Print7printlnEv>:
     dfc:	66 e4       	ldi	r22, 0x46	; 70
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <_ZN5Print5writeEPKc>

00000e04 <_ZN5Print11printNumberEmh>:
=======
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	6c 01       	movw	r12, r24
     e10:	7a 01       	movw	r14, r20
     e12:	8b 01       	movw	r16, r22
     e14:	c0 e0       	ldi	r28, 0x00	; 0
     e16:	d0 e0       	ldi	r29, 0x00	; 0
     e18:	ce 15       	cp	r28, r14
     e1a:	df 05       	cpc	r29, r15
     e1c:	89 f0       	breq	.+34     	; 0xe40 <_ZN5Print5writeEPKhj+0x42>
     e1e:	d8 01       	movw	r26, r16
     e20:	6d 91       	ld	r22, X+
     e22:	8d 01       	movw	r16, r26
     e24:	d6 01       	movw	r26, r12
     e26:	ed 91       	ld	r30, X+
     e28:	fc 91       	ld	r31, X
     e2a:	01 90       	ld	r0, Z+
     e2c:	f0 81       	ld	r31, Z
     e2e:	e0 2d       	mov	r30, r0
     e30:	c6 01       	movw	r24, r12
     e32:	09 95       	icall
     e34:	89 2b       	or	r24, r25
     e36:	11 f4       	brne	.+4      	; 0xe3c <_ZN5Print5writeEPKhj+0x3e>
     e38:	7e 01       	movw	r14, r28
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <_ZN5Print5writeEPKhj+0x42>
     e3c:	21 96       	adiw	r28, 0x01	; 1
     e3e:	ec cf       	rjmp	.-40     	; 0xe18 <_ZN5Print5writeEPKhj+0x1a>
     e40:	c7 01       	movw	r24, r14
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	08 95       	ret

00000e54 <_ZN5Print5writeEPKc>:
     e54:	61 15       	cp	r22, r1
     e56:	71 05       	cpc	r23, r1
     e58:	79 f0       	breq	.+30     	; 0xe78 <_ZN5Print5writeEPKc+0x24>
     e5a:	fb 01       	movw	r30, r22
     e5c:	01 90       	ld	r0, Z+
     e5e:	00 20       	and	r0, r0
     e60:	e9 f7       	brne	.-6      	; 0xe5c <_ZN5Print5writeEPKc+0x8>
     e62:	31 97       	sbiw	r30, 0x01	; 1
     e64:	af 01       	movw	r20, r30
     e66:	46 1b       	sub	r20, r22
     e68:	57 0b       	sbc	r21, r23
     e6a:	dc 01       	movw	r26, r24
     e6c:	ed 91       	ld	r30, X+
     e6e:	fc 91       	ld	r31, X
     e70:	02 80       	ldd	r0, Z+2	; 0x02
     e72:	f3 81       	ldd	r31, Z+3	; 0x03
     e74:	e0 2d       	mov	r30, r0
     e76:	09 94       	ijmp
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	08 95       	ret

00000e7e <_ZN5Print5printEPKc>:
     e7e:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_ZN5Print5writeEPKc>

00000e82 <_ZN5Print5printEc>:
     e82:	dc 01       	movw	r26, r24
     e84:	ed 91       	ld	r30, X+
     e86:	fc 91       	ld	r31, X
     e88:	01 90       	ld	r0, Z+
     e8a:	f0 81       	ld	r31, Z
     e8c:	e0 2d       	mov	r30, r0
     e8e:	09 94       	ijmp

00000e90 <_ZN5Print7printlnEv>:
     e90:	6f e3       	ldi	r22, 0x3F	; 63
     e92:	71 e0       	ldi	r23, 0x01	; 1
     e94:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_ZN5Print5writeEPKc>

00000e98 <_ZN5Print11printNumberEmh>:
>>>>>>> parent of c14ab71... 测出合适脉宽

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
<<<<<<< HEAD
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	a1 97       	sbiw	r28, 0x21	; 33
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	7c 01       	movw	r14, r24
     e2e:	d4 2e       	mov	r13, r20
     e30:	c5 2e       	mov	r12, r21
     e32:	db 01       	movw	r26, r22
=======
     e98:	8f 92       	push	r8
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	a1 97       	sbiw	r28, 0x21	; 33
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	7c 01       	movw	r14, r24
     ec2:	d4 2e       	mov	r13, r20
     ec4:	c5 2e       	mov	r12, r21
     ec6:	db 01       	movw	r26, r22
>>>>>>> parent of c14ab71... 测出合适脉宽
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
<<<<<<< HEAD
     e34:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	08 f4       	brcc	.+2      	; 0xe3c <_ZN5Print11printNumberEmh+0x38>
     e3a:	2a e0       	ldi	r18, 0x0A	; 10
     e3c:	8e 01       	movw	r16, r28
     e3e:	0f 5d       	subi	r16, 0xDF	; 223
     e40:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     e42:	82 2e       	mov	r8, r18
     e44:	91 2c       	mov	r9, r1
     e46:	a1 2c       	mov	r10, r1
     e48:	b1 2c       	mov	r11, r1
     e4a:	6d 2d       	mov	r22, r13
     e4c:	7c 2d       	mov	r23, r12
     e4e:	cd 01       	movw	r24, r26
     e50:	a5 01       	movw	r20, r10
     e52:	94 01       	movw	r18, r8
     e54:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__udivmodsi4>
    n /= base;
     e58:	d2 2e       	mov	r13, r18
     e5a:	c3 2e       	mov	r12, r19
     e5c:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     e5e:	01 50       	subi	r16, 0x01	; 1
     e60:	11 09       	sbc	r17, r1
     e62:	6a 30       	cpi	r22, 0x0A	; 10
     e64:	71 05       	cpc	r23, r1
     e66:	81 05       	cpc	r24, r1
     e68:	91 05       	cpc	r25, r1
     e6a:	10 f4       	brcc	.+4      	; 0xe70 <_ZN5Print11printNumberEmh+0x6c>
     e6c:	60 5d       	subi	r22, 0xD0	; 208
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <_ZN5Print11printNumberEmh+0x6e>
     e70:	69 5c       	subi	r22, 0xC9	; 201
     e72:	f8 01       	movw	r30, r16
     e74:	60 83       	st	Z, r22
=======
     ec8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <_ZN5Print11printNumberEmh+0x38>
     ece:	2a e0       	ldi	r18, 0x0A	; 10
     ed0:	8e 01       	movw	r16, r28
     ed2:	0f 5d       	subi	r16, 0xDF	; 223
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     ed6:	82 2e       	mov	r8, r18
     ed8:	91 2c       	mov	r9, r1
     eda:	a1 2c       	mov	r10, r1
     edc:	b1 2c       	mov	r11, r1
     ede:	6d 2d       	mov	r22, r13
     ee0:	7c 2d       	mov	r23, r12
     ee2:	cd 01       	movw	r24, r26
     ee4:	a5 01       	movw	r20, r10
     ee6:	94 01       	movw	r18, r8
     ee8:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodsi4>
    n /= base;
     eec:	d2 2e       	mov	r13, r18
     eee:	c3 2e       	mov	r12, r19
     ef0:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     ef2:	01 50       	subi	r16, 0x01	; 1
     ef4:	11 09       	sbc	r17, r1
     ef6:	6a 30       	cpi	r22, 0x0A	; 10
     ef8:	71 05       	cpc	r23, r1
     efa:	81 05       	cpc	r24, r1
     efc:	91 05       	cpc	r25, r1
     efe:	10 f4       	brcc	.+4      	; 0xf04 <_ZN5Print11printNumberEmh+0x6c>
     f00:	60 5d       	subi	r22, 0xD0	; 208
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <_ZN5Print11printNumberEmh+0x6e>
     f04:	69 5c       	subi	r22, 0xC9	; 201
     f06:	f8 01       	movw	r30, r16
     f08:	60 83       	st	Z, r22
>>>>>>> parent of c14ab71... 测出合适脉宽
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
<<<<<<< HEAD
     e76:	23 2b       	or	r18, r19
     e78:	24 2b       	or	r18, r20
     e7a:	25 2b       	or	r18, r21
     e7c:	31 f7       	brne	.-52     	; 0xe4a <_ZN5Print11printNumberEmh+0x46>
=======
     f0a:	23 2b       	or	r18, r19
     f0c:	24 2b       	or	r18, r20
     f0e:	25 2b       	or	r18, r21
     f10:	31 f7       	brne	.-52     	; 0xede <_ZN5Print11printNumberEmh+0x46>
>>>>>>> parent of c14ab71... 测出合适脉宽
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
<<<<<<< HEAD
     e7e:	b8 01       	movw	r22, r16
     e80:	c7 01       	movw	r24, r14
     e82:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN5Print5writeEPKc>
}
     e86:	a1 96       	adiw	r28, 0x21	; 33
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	9f 90       	pop	r9
     ea8:	8f 90       	pop	r8
     eaa:	08 95       	ret

00000eac <_ZN5Print5printEli>:
=======
     f12:	b8 01       	movw	r22, r16
     f14:	c7 01       	movw	r24, r14
     f16:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN5Print5writeEPKc>
}
     f1a:	a1 96       	adiw	r28, 0x21	; 33
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	08 95       	ret

00000f40 <_ZN5Print5printEli>:
>>>>>>> parent of c14ab71... 测出合适脉宽
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
<<<<<<< HEAD
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	ec 01       	movw	r28, r24
     ebe:	6a 01       	movw	r12, r20
     ec0:	7b 01       	movw	r14, r22
  if (base == 0) {
     ec2:	21 15       	cp	r18, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	79 f4       	brne	.+30     	; 0xee6 <_ZN5Print5printEli+0x3a>
    return write(n);
     ec8:	e8 81       	ld	r30, Y
     eca:	f9 81       	ldd	r31, Y+1	; 0x01
     ecc:	01 90       	ld	r0, Z+
     ece:	f0 81       	ld	r31, Z
     ed0:	e0 2d       	mov	r30, r0
     ed2:	64 2f       	mov	r22, r20
=======
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
     f52:	6a 01       	movw	r12, r20
     f54:	7b 01       	movw	r14, r22
  if (base == 0) {
     f56:	21 15       	cp	r18, r1
     f58:	31 05       	cpc	r19, r1
     f5a:	79 f4       	brne	.+30     	; 0xf7a <_ZN5Print5printEli+0x3a>
    return write(n);
     f5c:	e8 81       	ld	r30, Y
     f5e:	f9 81       	ldd	r31, Y+1	; 0x01
     f60:	01 90       	ld	r0, Z+
     f62:	f0 81       	ld	r31, Z
     f64:	e0 2d       	mov	r30, r0
     f66:	64 2f       	mov	r22, r20
>>>>>>> parent of c14ab71... 测出合适脉宽
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
<<<<<<< HEAD
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
=======
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
>>>>>>> parent of c14ab71... 测出合适脉宽
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
<<<<<<< HEAD
     ee4:	09 94       	ijmp
  } else if (base == 10) {
     ee6:	2a 30       	cpi	r18, 0x0A	; 10
     ee8:	31 05       	cpc	r19, r1
     eea:	e9 f4       	brne	.+58     	; 0xf26 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
     eec:	77 ff       	sbrs	r23, 7
     eee:	1a c0       	rjmp	.+52     	; 0xf24 <_ZN5Print5printEli+0x78>
      int t = print('-');
     ef0:	6d e2       	ldi	r22, 0x2D	; 45
     ef2:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN5Print5printEc>
     ef6:	8c 01       	movw	r16, r24
      n = -n;
     ef8:	44 27       	eor	r20, r20
     efa:	55 27       	eor	r21, r21
     efc:	ba 01       	movw	r22, r20
     efe:	4c 19       	sub	r20, r12
     f00:	5d 09       	sbc	r21, r13
     f02:	6e 09       	sbc	r22, r14
     f04:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     f06:	2a e0       	ldi	r18, 0x0A	; 10
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN5Print11printNumberEmh>
     f0e:	80 0f       	add	r24, r16
     f10:	91 1f       	adc	r25, r17
=======
     f78:	09 94       	ijmp
  } else if (base == 10) {
     f7a:	2a 30       	cpi	r18, 0x0A	; 10
     f7c:	31 05       	cpc	r19, r1
     f7e:	e9 f4       	brne	.+58     	; 0xfba <_ZN5Print5printEli+0x7a>
    if (n < 0) {
     f80:	77 ff       	sbrs	r23, 7
     f82:	1a c0       	rjmp	.+52     	; 0xfb8 <_ZN5Print5printEli+0x78>
      int t = print('-');
     f84:	6d e2       	ldi	r22, 0x2D	; 45
     f86:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN5Print5printEc>
     f8a:	8c 01       	movw	r16, r24
      n = -n;
     f8c:	44 27       	eor	r20, r20
     f8e:	55 27       	eor	r21, r21
     f90:	ba 01       	movw	r22, r20
     f92:	4c 19       	sub	r20, r12
     f94:	5d 09       	sbc	r21, r13
     f96:	6e 09       	sbc	r22, r14
     f98:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     f9a:	2a e0       	ldi	r18, 0x0A	; 10
     f9c:	ce 01       	movw	r24, r28
     f9e:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN5Print11printNumberEmh>
     fa2:	80 0f       	add	r24, r16
     fa4:	91 1f       	adc	r25, r17
>>>>>>> parent of c14ab71... 测出合适脉宽
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
<<<<<<< HEAD
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	08 95       	ret
=======
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	08 95       	ret
>>>>>>> parent of c14ab71... 测出合适脉宽
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
<<<<<<< HEAD
     f24:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     f26:	b7 01       	movw	r22, r14
     f28:	a6 01       	movw	r20, r12
     f2a:	ce 01       	movw	r24, r28
  }
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
=======
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     fba:	b7 01       	movw	r22, r14
     fbc:	a6 01       	movw	r20, r12
     fbe:	ce 01       	movw	r24, r28
  }
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
>>>>>>> parent of c14ab71... 测出合适脉宽
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
<<<<<<< HEAD
     f3c:	0c 94 02 07 	jmp	0xe04	; 0xe04 <_ZN5Print11printNumberEmh>

00000f40 <_ZN5Print5printEii>:
=======
     fd0:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <_ZN5Print11printNumberEmh>

00000fd4 <_ZN5Print5printEii>:
>>>>>>> parent of c14ab71... 测出合适脉宽
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
<<<<<<< HEAD
     f40:	9a 01       	movw	r18, r20
  return print((long) n, base);
     f42:	ab 01       	movw	r20, r22
     f44:	77 0f       	add	r23, r23
     f46:	66 0b       	sbc	r22, r22
     f48:	77 0b       	sbc	r23, r23
     f4a:	0c 94 56 07 	jmp	0xeac	; 0xeac <_ZN5Print5printEli>

00000f4e <_ZN5Print7printlnEii>:
=======
     fd4:	9a 01       	movw	r18, r20
  return print((long) n, base);
     fd6:	ab 01       	movw	r20, r22
     fd8:	77 0f       	add	r23, r23
     fda:	66 0b       	sbc	r22, r22
     fdc:	77 0b       	sbc	r23, r23
     fde:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_ZN5Print5printEli>

00000fe2 <_ZN5Print7printlnEii>:
>>>>>>> parent of c14ab71... 测出合适脉宽
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
<<<<<<< HEAD
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
     f58:	9a 01       	movw	r18, r20
=======
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
     fec:	9a 01       	movw	r18, r20
>>>>>>> parent of c14ab71... 测出合适脉宽
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
<<<<<<< HEAD
     f5a:	ab 01       	movw	r20, r22
     f5c:	77 0f       	add	r23, r23
     f5e:	66 0b       	sbc	r22, r22
     f60:	77 0b       	sbc	r23, r23
     f62:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN5Print5printEli>
     f66:	8c 01       	movw	r16, r24
=======
     fee:	ab 01       	movw	r20, r22
     ff0:	77 0f       	add	r23, r23
     ff2:	66 0b       	sbc	r22, r22
     ff4:	77 0b       	sbc	r23, r23
     ff6:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5Print5printEli>
     ffa:	8c 01       	movw	r16, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
<<<<<<< HEAD
     f68:	ce 01       	movw	r24, r28
     f6a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN5Print7printlnEv>
  return n;
}
     f6e:	80 0f       	add	r24, r16
     f70:	91 1f       	adc	r25, r17
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	08 95       	ret

00000f7c <__vector_16>:
=======
     ffc:	ce 01       	movw	r24, r28
     ffe:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN5Print7printlnEv>
  return n;
}
    1002:	80 0f       	add	r24, r16
    1004:	91 1f       	adc	r25, r17
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	08 95       	ret

00001010 <__vector_16>:
>>>>>>> parent of c14ab71... 测出合适脉宽
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
<<<<<<< HEAD
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <timer0_millis>
     f96:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <timer0_millis+0x1>
     f9a:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <timer0_millis+0x2>
     f9e:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <timer0_millis+0x3>
     fa2:	30 91 d1 02 	lds	r19, 0x02D1	; 0x8002d1 <timer0_fract>
     fa6:	23 e0       	ldi	r18, 0x03	; 3
     fa8:	23 0f       	add	r18, r19
     faa:	2d 37       	cpi	r18, 0x7D	; 125
     fac:	20 f4       	brcc	.+8      	; 0xfb6 <__vector_16+0x3a>
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	a1 1d       	adc	r26, r1
     fb2:	b1 1d       	adc	r27, r1
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <__vector_16+0x44>
     fb6:	26 e8       	ldi	r18, 0x86	; 134
     fb8:	23 0f       	add	r18, r19
     fba:	02 96       	adiw	r24, 0x02	; 2
     fbc:	a1 1d       	adc	r26, r1
     fbe:	b1 1d       	adc	r27, r1
     fc0:	20 93 d1 02 	sts	0x02D1, r18	; 0x8002d1 <timer0_fract>
     fc4:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <timer0_millis>
     fc8:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <timer0_millis+0x1>
     fcc:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <timer0_millis+0x2>
     fd0:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <timer0_millis+0x3>
     fd4:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <timer0_overflow_count>
     fd8:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <timer0_overflow_count+0x1>
     fdc:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x2>
     fe0:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x3>
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	a1 1d       	adc	r26, r1
     fe8:	b1 1d       	adc	r27, r1
     fea:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <timer0_overflow_count>
     fee:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <timer0_overflow_count+0x1>
     ff2:	a0 93 d8 02 	sts	0x02D8, r26	; 0x8002d8 <timer0_overflow_count+0x2>
     ff6:	b0 93 d9 02 	sts	0x02D9, r27	; 0x8002d9 <timer0_overflow_count+0x3>
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <micros>:
=======
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	8f 93       	push	r24
    1020:	9f 93       	push	r25
    1022:	af 93       	push	r26
    1024:	bf 93       	push	r27
    1026:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer0_millis>
    102a:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <timer0_millis+0x1>
    102e:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <timer0_millis+0x2>
    1032:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <timer0_millis+0x3>
    1036:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <timer0_fract>
    103a:	23 e0       	ldi	r18, 0x03	; 3
    103c:	23 0f       	add	r18, r19
    103e:	2d 37       	cpi	r18, 0x7D	; 125
    1040:	20 f4       	brcc	.+8      	; 0x104a <__vector_16+0x3a>
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	a1 1d       	adc	r26, r1
    1046:	b1 1d       	adc	r27, r1
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <__vector_16+0x44>
    104a:	26 e8       	ldi	r18, 0x86	; 134
    104c:	23 0f       	add	r18, r19
    104e:	02 96       	adiw	r24, 0x02	; 2
    1050:	a1 1d       	adc	r26, r1
    1052:	b1 1d       	adc	r27, r1
    1054:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <timer0_fract>
    1058:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <timer0_millis>
    105c:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <timer0_millis+0x1>
    1060:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <timer0_millis+0x2>
    1064:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <timer0_millis+0x3>
    1068:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <timer0_overflow_count>
    106c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <timer0_overflow_count+0x1>
    1070:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <timer0_overflow_count+0x2>
    1074:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <timer0_overflow_count+0x3>
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	a1 1d       	adc	r26, r1
    107c:	b1 1d       	adc	r27, r1
    107e:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <timer0_overflow_count>
    1082:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <timer0_overflow_count+0x1>
    1086:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <timer0_overflow_count+0x2>
    108a:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <timer0_overflow_count+0x3>
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <micros>:
>>>>>>> parent of c14ab71... 测出合适脉宽

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
<<<<<<< HEAD
    1010:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1012:	f8 94       	cli
	m = timer0_overflow_count;
    1014:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <timer0_overflow_count>
    1018:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <timer0_overflow_count+0x1>
    101c:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x2>
    1020:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1024:	26 b5       	in	r18, 0x26	; 38
=======
    10a4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    10a6:	f8 94       	cli
	m = timer0_overflow_count;
    10a8:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <timer0_overflow_count>
    10ac:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <timer0_overflow_count+0x1>
    10b0:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <timer0_overflow_count+0x2>
    10b4:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    10b8:	26 b5       	in	r18, 0x26	; 38
>>>>>>> parent of c14ab71... 测出合适脉宽
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
<<<<<<< HEAD
    1026:	a8 9b       	sbis	0x15, 0	; 21
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <micros+0x24>
    102a:	2f 3f       	cpi	r18, 0xFF	; 255
    102c:	19 f0       	breq	.+6      	; 0x1034 <micros+0x24>
		m++;
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	a1 1d       	adc	r26, r1
    1032:	b1 1d       	adc	r27, r1
=======
    10ba:	a8 9b       	sbis	0x15, 0	; 21
    10bc:	05 c0       	rjmp	.+10     	; 0x10c8 <micros+0x24>
    10be:	2f 3f       	cpi	r18, 0xFF	; 255
    10c0:	19 f0       	breq	.+6      	; 0x10c8 <micros+0x24>
		m++;
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	a1 1d       	adc	r26, r1
    10c6:	b1 1d       	adc	r27, r1
>>>>>>> parent of c14ab71... 测出合适脉宽
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
<<<<<<< HEAD
    1034:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1036:	ba 2f       	mov	r27, r26
    1038:	a9 2f       	mov	r26, r25
    103a:	98 2f       	mov	r25, r24
    103c:	88 27       	eor	r24, r24
    103e:	82 0f       	add	r24, r18
    1040:	91 1d       	adc	r25, r1
    1042:	a1 1d       	adc	r26, r1
    1044:	b1 1d       	adc	r27, r1
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	42 e0       	ldi	r20, 0x02	; 2
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	4a 95       	dec	r20
    1056:	d1 f7       	brne	.-12     	; 0x104c <micros+0x3c>
}
    1058:	08 95       	ret

0000105a <delay>:

void delay(unsigned long ms)
{
    105a:	8f 92       	push	r8
    105c:	9f 92       	push	r9
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	6b 01       	movw	r12, r22
    106c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    106e:	0e 94 08 08 	call	0x1010	; 0x1010 <micros>
    1072:	4b 01       	movw	r8, r22
    1074:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1076:	c1 14       	cp	r12, r1
    1078:	d1 04       	cpc	r13, r1
    107a:	e1 04       	cpc	r14, r1
    107c:	f1 04       	cpc	r15, r1
    107e:	01 f1       	breq	.+64     	; 0x10c0 <delay+0x66>
		yield();
    1080:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1084:	0e 94 08 08 	call	0x1010	; 0x1010 <micros>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	88 19       	sub	r24, r8
    108e:	99 09       	sbc	r25, r9
    1090:	aa 09       	sbc	r26, r10
    1092:	bb 09       	sbc	r27, r11
    1094:	88 3e       	cpi	r24, 0xE8	; 232
    1096:	93 40       	sbci	r25, 0x03	; 3
    1098:	a1 05       	cpc	r26, r1
    109a:	b1 05       	cpc	r27, r1
    109c:	60 f3       	brcs	.-40     	; 0x1076 <delay+0x1c>
			ms--;
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	c2 1a       	sub	r12, r18
    10a2:	d1 08       	sbc	r13, r1
    10a4:	e1 08       	sbc	r14, r1
    10a6:	f1 08       	sbc	r15, r1
			start += 1000;
    10a8:	88 ee       	ldi	r24, 0xE8	; 232
    10aa:	88 0e       	add	r8, r24
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	98 1e       	adc	r9, r24
    10b0:	a1 1c       	adc	r10, r1
    10b2:	b1 1c       	adc	r11, r1
=======
    10c8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    10ca:	ba 2f       	mov	r27, r26
    10cc:	a9 2f       	mov	r26, r25
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 27       	eor	r24, r24
    10d2:	82 0f       	add	r24, r18
    10d4:	91 1d       	adc	r25, r1
    10d6:	a1 1d       	adc	r26, r1
    10d8:	b1 1d       	adc	r27, r1
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	42 e0       	ldi	r20, 0x02	; 2
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	4a 95       	dec	r20
    10ea:	d1 f7       	brne	.-12     	; 0x10e0 <micros+0x3c>
}
    10ec:	08 95       	ret

000010ee <delay>:

void delay(unsigned long ms)
{
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	6b 01       	movw	r12, r22
    1100:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1102:	0e 94 52 08 	call	0x10a4	; 0x10a4 <micros>
    1106:	4b 01       	movw	r8, r22
    1108:	5c 01       	movw	r10, r24

	while (ms > 0) {
    110a:	c1 14       	cp	r12, r1
    110c:	d1 04       	cpc	r13, r1
    110e:	e1 04       	cpc	r14, r1
    1110:	f1 04       	cpc	r15, r1
    1112:	01 f1       	breq	.+64     	; 0x1154 <delay+0x66>
		yield();
    1114:	0e 94 ab 09 	call	0x1356	; 0x1356 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1118:	0e 94 52 08 	call	0x10a4	; 0x10a4 <micros>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	88 19       	sub	r24, r8
    1122:	99 09       	sbc	r25, r9
    1124:	aa 09       	sbc	r26, r10
    1126:	bb 09       	sbc	r27, r11
    1128:	88 3e       	cpi	r24, 0xE8	; 232
    112a:	93 40       	sbci	r25, 0x03	; 3
    112c:	a1 05       	cpc	r26, r1
    112e:	b1 05       	cpc	r27, r1
    1130:	60 f3       	brcs	.-40     	; 0x110a <delay+0x1c>
			ms--;
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	c2 1a       	sub	r12, r18
    1136:	d1 08       	sbc	r13, r1
    1138:	e1 08       	sbc	r14, r1
    113a:	f1 08       	sbc	r15, r1
			start += 1000;
    113c:	88 ee       	ldi	r24, 0xE8	; 232
    113e:	88 0e       	add	r8, r24
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	98 1e       	adc	r9, r24
    1144:	a1 1c       	adc	r10, r1
    1146:	b1 1c       	adc	r11, r1
>>>>>>> parent of c14ab71... 测出合适脉宽
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
<<<<<<< HEAD
    10b4:	c1 14       	cp	r12, r1
    10b6:	d1 04       	cpc	r13, r1
    10b8:	e1 04       	cpc	r14, r1
    10ba:	f1 04       	cpc	r15, r1
    10bc:	19 f7       	brne	.-58     	; 0x1084 <delay+0x2a>
    10be:	db cf       	rjmp	.-74     	; 0x1076 <delay+0x1c>
=======
    1148:	c1 14       	cp	r12, r1
    114a:	d1 04       	cpc	r13, r1
    114c:	e1 04       	cpc	r14, r1
    114e:	f1 04       	cpc	r15, r1
    1150:	19 f7       	brne	.-58     	; 0x1118 <delay+0x2a>
    1152:	db cf       	rjmp	.-74     	; 0x110a <delay+0x1c>
>>>>>>> parent of c14ab71... 测出合适脉宽
			ms--;
			start += 1000;
		}
	}
}
<<<<<<< HEAD
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	bf 90       	pop	r11
    10ca:	af 90       	pop	r10
    10cc:	9f 90       	pop	r9
    10ce:	8f 90       	pop	r8
    10d0:	08 95       	ret

000010d2 <delayMicroseconds>:
=======
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	08 95       	ret

00001166 <delayMicroseconds>:
>>>>>>> parent of c14ab71... 测出合适脉宽
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
<<<<<<< HEAD
    10d2:	82 30       	cpi	r24, 0x02	; 2
    10d4:	91 05       	cpc	r25, r1
    10d6:	38 f0       	brcs	.+14     	; 0x10e6 <delayMicroseconds+0x14>
=======
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	91 05       	cpc	r25, r1
    116a:	38 f0       	brcs	.+14     	; 0x117a <delayMicroseconds+0x14>
>>>>>>> parent of c14ab71... 测出合适脉宽

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
<<<<<<< HEAD
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
=======
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
>>>>>>> parent of c14ab71... 测出合适脉宽

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
<<<<<<< HEAD
    10e0:	05 97       	sbiw	r24, 0x05	; 5
=======
    1174:	05 97       	sbiw	r24, 0x05	; 5
>>>>>>> parent of c14ab71... 测出合适脉宽
	

#endif

	// busy wait
	__asm__ __volatile__ (
<<<<<<< HEAD
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <delayMicroseconds+0x10>
    10e6:	08 95       	ret

000010e8 <init>:
=======
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <delayMicroseconds+0x10>
    117a:	08 95       	ret

0000117c <init>:
>>>>>>> parent of c14ab71... 测出合适脉宽

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
<<<<<<< HEAD
    10e8:	78 94       	sei
=======
    117c:	78 94       	sei
>>>>>>> parent of c14ab71... 测出合适脉宽
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
<<<<<<< HEAD
    10ea:	84 b5       	in	r24, 0x24	; 36
    10ec:	82 60       	ori	r24, 0x02	; 2
    10ee:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    10f0:	84 b5       	in	r24, 0x24	; 36
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	84 bd       	out	0x24, r24	; 36
=======
    117e:	84 b5       	in	r24, 0x24	; 36
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1184:	84 b5       	in	r24, 0x24	; 36
    1186:	81 60       	ori	r24, 0x01	; 1
    1188:	84 bd       	out	0x24, r24	; 36
>>>>>>> parent of c14ab71... 测出合适脉宽
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
<<<<<<< HEAD
    10f6:	85 b5       	in	r24, 0x25	; 37
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    10fc:	85 b5       	in	r24, 0x25	; 37
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	85 bd       	out	0x25, r24	; 37
=======
    118a:	85 b5       	in	r24, 0x25	; 37
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1190:	85 b5       	in	r24, 0x25	; 37
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	85 bd       	out	0x25, r24	; 37
>>>>>>> parent of c14ab71... 测出合适脉宽

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
<<<<<<< HEAD
    1102:	ee e6       	ldi	r30, 0x6E	; 110
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	81 60       	ori	r24, 0x01	; 1
    110a:	80 83       	st	Z, r24
=======
    1196:	ee e6       	ldi	r30, 0x6E	; 110
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
<<<<<<< HEAD
    110c:	e1 e8       	ldi	r30, 0x81	; 129
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1112:	80 81       	ld	r24, Z
    1114:	82 60       	ori	r24, 0x02	; 2
    1116:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1118:	80 81       	ld	r24, Z
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	80 83       	st	Z, r24
=======
    11a0:	e1 e8       	ldi	r30, 0x81	; 129
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11a6:	80 81       	ld	r24, Z
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11ac:	80 81       	ld	r24, Z
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
<<<<<<< HEAD
    111e:	e0 e8       	ldi	r30, 0x80	; 128
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	81 60       	ori	r24, 0x01	; 1
    1126:	80 83       	st	Z, r24
=======
    11b2:	e0 e8       	ldi	r30, 0x80	; 128
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
<<<<<<< HEAD
    1128:	e1 eb       	ldi	r30, 0xB1	; 177
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	84 60       	ori	r24, 0x04	; 4
    1130:	80 83       	st	Z, r24
=======
    11bc:	e1 eb       	ldi	r30, 0xB1	; 177
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	84 60       	ori	r24, 0x04	; 4
    11c4:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
<<<<<<< HEAD
    1132:	e0 eb       	ldi	r30, 0xB0	; 176
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	81 60       	ori	r24, 0x01	; 1
    113a:	80 83       	st	Z, r24
=======
    11c6:	e0 eb       	ldi	r30, 0xB0	; 176
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	81 60       	ori	r24, 0x01	; 1
    11ce:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
<<<<<<< HEAD
    113c:	ea e7       	ldi	r30, 0x7A	; 122
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	84 60       	ori	r24, 0x04	; 4
    1144:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1146:	80 81       	ld	r24, Z
    1148:	82 60       	ori	r24, 0x02	; 2
    114a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    114c:	80 81       	ld	r24, Z
    114e:	81 60       	ori	r24, 0x01	; 1
    1150:	80 83       	st	Z, r24
=======
    11d0:	ea e7       	ldi	r30, 0x7A	; 122
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	84 60       	ori	r24, 0x04	; 4
    11d8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    11da:	80 81       	ld	r24, Z
    11dc:	82 60       	ori	r24, 0x02	; 2
    11de:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    11e0:	80 81       	ld	r24, Z
    11e2:	81 60       	ori	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
<<<<<<< HEAD
    1152:	80 81       	ld	r24, Z
    1154:	80 68       	ori	r24, 0x80	; 128
    1156:	80 83       	st	Z, r24
=======
    11e6:	80 81       	ld	r24, Z
    11e8:	80 68       	ori	r24, 0x80	; 128
    11ea:	80 83       	st	Z, r24
>>>>>>> parent of c14ab71... 测出合适脉宽
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
<<<<<<< HEAD
    1158:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    115c:	08 95       	ret

0000115e <analogRead>:
=======
    11ec:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11f0:	08 95       	ret

000011f2 <analogRead>:
>>>>>>> parent of c14ab71... 测出合适脉宽
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
<<<<<<< HEAD
    115e:	8e 30       	cpi	r24, 0x0E	; 14
    1160:	08 f0       	brcs	.+2      	; 0x1164 <analogRead+0x6>
    1162:	8e 50       	subi	r24, 0x0E	; 14
=======
    11f2:	8e 30       	cpi	r24, 0x0E	; 14
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <analogRead+0x6>
    11f6:	8e 50       	subi	r24, 0x0E	; 14
>>>>>>> parent of c14ab71... 测出合适脉宽
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
<<<<<<< HEAD
    1164:	87 70       	andi	r24, 0x07	; 7
    1166:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <analog_reference>
    116a:	90 e4       	ldi	r25, 0x40	; 64
    116c:	29 9f       	mul	r18, r25
    116e:	90 01       	movw	r18, r0
    1170:	11 24       	eor	r1, r1
    1172:	82 2b       	or	r24, r18
    1174:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
=======
    11f8:	87 70       	andi	r24, 0x07	; 7
    11fa:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <analog_reference>
    11fe:	90 e4       	ldi	r25, 0x40	; 64
    1200:	29 9f       	mul	r18, r25
    1202:	90 01       	movw	r18, r0
    1204:	11 24       	eor	r1, r1
    1206:	82 2b       	or	r24, r18
    1208:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
>>>>>>> parent of c14ab71... 测出合适脉宽
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
<<<<<<< HEAD
    1178:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    117c:	80 64       	ori	r24, 0x40	; 64
    117e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1182:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1186:	86 fd       	sbrc	r24, 6
    1188:	fc cf       	rjmp	.-8      	; 0x1182 <analogRead+0x24>
=======
    120c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1216:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    121a:	86 fd       	sbrc	r24, 6
    121c:	fc cf       	rjmp	.-8      	; 0x1216 <analogRead+0x24>
>>>>>>> parent of c14ab71... 测出合适脉宽

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
<<<<<<< HEAD
    118a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    118e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
=======
    121e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1222:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
>>>>>>> parent of c14ab71... 测出合适脉宽
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
<<<<<<< HEAD
    1192:	90 e0       	ldi	r25, 0x00	; 0
}
    1194:	92 2b       	or	r25, r18
    1196:	08 95       	ret

00001198 <turnOffPWM>:
=======
    1226:	90 e0       	ldi	r25, 0x00	; 0
}
    1228:	92 2b       	or	r25, r18
    122a:	08 95       	ret

0000122c <turnOffPWM>:
>>>>>>> parent of c14ab71... 测出合适脉宽
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
<<<<<<< HEAD
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	81 f0       	breq	.+32     	; 0x11bc <turnOffPWM+0x24>
    119c:	28 f4       	brcc	.+10     	; 0x11a8 <turnOffPWM+0x10>
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	99 f0       	breq	.+38     	; 0x11c8 <turnOffPWM+0x30>
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	a1 f0       	breq	.+40     	; 0x11ce <turnOffPWM+0x36>
    11a6:	08 95       	ret
    11a8:	87 30       	cpi	r24, 0x07	; 7
    11aa:	a9 f0       	breq	.+42     	; 0x11d6 <turnOffPWM+0x3e>
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	b9 f0       	breq	.+46     	; 0x11de <turnOffPWM+0x46>
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	d1 f4       	brne	.+52     	; 0x11e8 <turnOffPWM+0x50>
=======
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	81 f0       	breq	.+32     	; 0x1250 <turnOffPWM+0x24>
    1230:	28 f4       	brcc	.+10     	; 0x123c <turnOffPWM+0x10>
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	99 f0       	breq	.+38     	; 0x125c <turnOffPWM+0x30>
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	a1 f0       	breq	.+40     	; 0x1262 <turnOffPWM+0x36>
    123a:	08 95       	ret
    123c:	87 30       	cpi	r24, 0x07	; 7
    123e:	a9 f0       	breq	.+42     	; 0x126a <turnOffPWM+0x3e>
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	b9 f0       	breq	.+46     	; 0x1272 <turnOffPWM+0x46>
    1244:	84 30       	cpi	r24, 0x04	; 4
    1246:	d1 f4       	brne	.+52     	; 0x127c <turnOffPWM+0x50>
>>>>>>> parent of c14ab71... 测出合适脉宽
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
<<<<<<< HEAD
    11b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11b8:	8f 7d       	andi	r24, 0xDF	; 223
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <turnOffPWM+0x2a>
=======
    1248:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    124c:	8f 7d       	andi	r24, 0xDF	; 223
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <turnOffPWM+0x2a>
>>>>>>> parent of c14ab71... 测出合适脉宽
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
<<<<<<< HEAD
    11bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11c0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11c6:	08 95       	ret
=======
    1250:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1254:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1256:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    125a:	08 95       	ret
>>>>>>> parent of c14ab71... 测出合适脉宽
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
<<<<<<< HEAD
    11c8:	84 b5       	in	r24, 0x24	; 36
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <turnOffPWM+0x3a>
=======
    125c:	84 b5       	in	r24, 0x24	; 36
    125e:	8f 77       	andi	r24, 0x7F	; 127
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <turnOffPWM+0x3a>
>>>>>>> parent of c14ab71... 测出合适脉宽
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
<<<<<<< HEAD
    11ce:	84 b5       	in	r24, 0x24	; 36
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	84 bd       	out	0x24, r24	; 36
    11d4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    11d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11da:	8f 77       	andi	r24, 0x7F	; 127
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    11de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11e2:	8f 7d       	andi	r24, 0xDF	; 223
    11e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11e8:	08 95       	ret

000011ea <pinMode>:
=======
    1262:	84 b5       	in	r24, 0x24	; 36
    1264:	8f 7d       	andi	r24, 0xDF	; 223
    1266:	84 bd       	out	0x24, r24	; 36
    1268:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    126a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    126e:	8f 77       	andi	r24, 0x7F	; 127
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1272:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1276:	8f 7d       	andi	r24, 0xDF	; 223
    1278:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    127c:	08 95       	ret

0000127e <pinMode>:
>>>>>>> parent of c14ab71... 测出合适脉宽
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
<<<<<<< HEAD
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	e4 58       	subi	r30, 0x84	; 132
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    11f8:	fc 01       	movw	r30, r24
    11fa:	e0 57       	subi	r30, 0x70	; 112
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1200:	88 23       	and	r24, r24
    1202:	61 f1       	breq	.+88     	; 0x125c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	fc 01       	movw	r30, r24
    120c:	e2 55       	subi	r30, 0x52	; 82
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	c5 91       	lpm	r28, Z+
    1212:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1214:	fc 01       	movw	r30, r24
    1216:	ec 55       	subi	r30, 0x5C	; 92
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	a5 91       	lpm	r26, Z+
    121c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    121e:	61 11       	cpse	r22, r1
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1222:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1224:	f8 94       	cli
		*reg &= ~bit;
    1226:	88 81       	ld	r24, Y
    1228:	20 95       	com	r18
    122a:	82 23       	and	r24, r18
    122c:	88 83       	st	Y, r24
		*out &= ~bit;
    122e:	ec 91       	ld	r30, X
    1230:	2e 23       	and	r18, r30
    1232:	0b c0       	rjmp	.+22     	; 0x124a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1234:	62 30       	cpi	r22, 0x02	; 2
    1236:	61 f4       	brne	.+24     	; 0x1250 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1238:	9f b7       	in	r25, 0x3f	; 63
                cli();
    123a:	f8 94       	cli
		*reg &= ~bit;
    123c:	38 81       	ld	r19, Y
    123e:	82 2f       	mov	r24, r18
    1240:	80 95       	com	r24
    1242:	83 23       	and	r24, r19
    1244:	88 83       	st	Y, r24
		*out |= bit;
    1246:	ec 91       	ld	r30, X
    1248:	2e 2b       	or	r18, r30
    124a:	2c 93       	st	X, r18
		SREG = oldSREG;
    124c:	9f bf       	out	0x3f, r25	; 63
    124e:	06 c0       	rjmp	.+12     	; 0x125c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1250:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1252:	f8 94       	cli
		*reg |= bit;
    1254:	e8 81       	ld	r30, Y
    1256:	2e 2b       	or	r18, r30
    1258:	28 83       	st	Y, r18
		SREG = oldSREG;
    125a:	8f bf       	out	0x3f, r24	; 63
	}
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <digitalWrite>:
=======
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	fc 01       	movw	r30, r24
    1286:	e4 58       	subi	r30, 0x84	; 132
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    128c:	fc 01       	movw	r30, r24
    128e:	e0 57       	subi	r30, 0x70	; 112
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1294:	88 23       	and	r24, r24
    1296:	61 f1       	breq	.+88     	; 0x12f0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	fc 01       	movw	r30, r24
    12a0:	e2 55       	subi	r30, 0x52	; 82
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	c5 91       	lpm	r28, Z+
    12a6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    12a8:	fc 01       	movw	r30, r24
    12aa:	ec 55       	subi	r30, 0x5C	; 92
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	a5 91       	lpm	r26, Z+
    12b0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    12b2:	61 11       	cpse	r22, r1
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    12b6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12b8:	f8 94       	cli
		*reg &= ~bit;
    12ba:	88 81       	ld	r24, Y
    12bc:	20 95       	com	r18
    12be:	82 23       	and	r24, r18
    12c0:	88 83       	st	Y, r24
		*out &= ~bit;
    12c2:	ec 91       	ld	r30, X
    12c4:	2e 23       	and	r18, r30
    12c6:	0b c0       	rjmp	.+22     	; 0x12de <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    12c8:	62 30       	cpi	r22, 0x02	; 2
    12ca:	61 f4       	brne	.+24     	; 0x12e4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    12cc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12ce:	f8 94       	cli
		*reg &= ~bit;
    12d0:	38 81       	ld	r19, Y
    12d2:	82 2f       	mov	r24, r18
    12d4:	80 95       	com	r24
    12d6:	83 23       	and	r24, r19
    12d8:	88 83       	st	Y, r24
		*out |= bit;
    12da:	ec 91       	ld	r30, X
    12dc:	2e 2b       	or	r18, r30
    12de:	2c 93       	st	X, r18
		SREG = oldSREG;
    12e0:	9f bf       	out	0x3f, r25	; 63
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    12e4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    12e6:	f8 94       	cli
		*reg |= bit;
    12e8:	e8 81       	ld	r30, Y
    12ea:	2e 2b       	or	r18, r30
    12ec:	28 83       	st	Y, r18
		SREG = oldSREG;
    12ee:	8f bf       	out	0x3f, r24	; 63
	}
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <digitalWrite>:
>>>>>>> parent of c14ab71... 测出合适脉宽
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
<<<<<<< HEAD
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	f9 01       	movw	r30, r18
    126e:	e8 59       	subi	r30, 0x98	; 152
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1274:	f9 01       	movw	r30, r18
    1276:	e4 58       	subi	r30, 0x84	; 132
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    127c:	f9 01       	movw	r30, r18
    127e:	e0 57       	subi	r30, 0x70	; 112
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1284:	cc 23       	and	r28, r28
    1286:	c9 f0       	breq	.+50     	; 0x12ba <digitalWrite+0x58>
    1288:	16 2f       	mov	r17, r22
=======
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	e8 59       	subi	r30, 0x98	; 152
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1308:	f9 01       	movw	r30, r18
    130a:	e4 58       	subi	r30, 0x84	; 132
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1310:	f9 01       	movw	r30, r18
    1312:	e0 57       	subi	r30, 0x70	; 112
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1318:	cc 23       	and	r28, r28
    131a:	c9 f0       	breq	.+50     	; 0x134e <digitalWrite+0x58>
    131c:	16 2f       	mov	r17, r22
>>>>>>> parent of c14ab71... 测出合适脉宽

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
<<<<<<< HEAD
    128a:	81 11       	cpse	r24, r1
    128c:	0e 94 cc 08 	call	0x1198	; 0x1198 <turnOffPWM>

	out = portOutputRegister(port);
    1290:	ec 2f       	mov	r30, r28
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	ec 55       	subi	r30, 0x5C	; 92
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	a5 91       	lpm	r26, Z+
    129e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    12a0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    12a2:	f8 94       	cli

	if (val == LOW) {
    12a4:	11 11       	cpse	r17, r1
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <digitalWrite+0x50>
		*out &= ~bit;
    12a8:	9c 91       	ld	r25, X
    12aa:	ed 2f       	mov	r30, r29
    12ac:	e0 95       	com	r30
    12ae:	e9 23       	and	r30, r25
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <digitalWrite+0x54>
	} else {
		*out |= bit;
    12b2:	ec 91       	ld	r30, X
    12b4:	ed 2b       	or	r30, r29
    12b6:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    12b8:	8f bf       	out	0x3f, r24	; 63
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	08 95       	ret

000012c2 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <free>

000012cc <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    12d2:	88 81       	ld	r24, Y
    12d4:	99 81       	ldd	r25, Y+1	; 0x01
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	11 f0       	breq	.+4      	; 0x12de <_ZN6String10invalidateEv+0x12>
    12da:	0e 94 a2 0a 	call	0x1544	; 0x1544 <free>
	buffer = NULL;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	18 82       	st	Y, r1
	capacity = len = 0;
    12e2:	1d 82       	std	Y+5, r1	; 0x05
    12e4:	1c 82       	std	Y+4, r1	; 0x04
    12e6:	1b 82       	std	Y+3, r1	; 0x03
    12e8:	1a 82       	std	Y+2, r1	; 0x02
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	ec 01       	movw	r28, r24
    12fa:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    12fc:	6f 5f       	subi	r22, 0xFF	; 255
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	88 81       	ld	r24, Y
    1302:	99 81       	ldd	r25, Y+1	; 0x01
    1304:	0e 94 3a 0b 	call	0x1674	; 0x1674 <realloc>
	if (newbuffer) {
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	31 f0       	breq	.+12     	; 0x1318 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    130c:	99 83       	std	Y+1, r25	; 0x01
    130e:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1310:	1b 83       	std	Y+3, r17	; 0x03
    1312:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	01 c0       	rjmp	.+2      	; 0x131a <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    1318:	80 e0       	ldi	r24, 0x00	; 0
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    132a:	88 81       	ld	r24, Y
    132c:	99 81       	ldd	r25, Y+1	; 0x01
    132e:	89 2b       	or	r24, r25
    1330:	29 f0       	breq	.+10     	; 0x133c <_ZN6String7reserveEj+0x18>
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	86 17       	cp	r24, r22
    1338:	97 07       	cpc	r25, r23
    133a:	60 f4       	brcc	.+24     	; 0x1354 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    133c:	ce 01       	movw	r24, r28
    133e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6String12changeBufferEj>
    1342:	88 23       	and	r24, r24
    1344:	41 f0       	breq	.+16     	; 0x1356 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	89 2b       	or	r24, r25
    134c:	19 f4       	brne	.+6      	; 0x1354 <_ZN6String7reserveEj+0x30>
    134e:	e8 81       	ld	r30, Y
    1350:	f9 81       	ldd	r31, Y+1	; 0x01
    1352:	10 82       	st	Z, r1
    1354:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	ec 01       	movw	r28, r24
    136a:	7b 01       	movw	r14, r22
    136c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    136e:	ba 01       	movw	r22, r20
    1370:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN6String7reserveEj>
    1374:	81 11       	cpse	r24, r1
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    1378:	ce 01       	movw	r24, r28
    137a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6String10invalidateEv>
		return *this;
    137e:	07 c0       	rjmp	.+14     	; 0x138e <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    1380:	1d 83       	std	Y+5, r17	; 0x05
    1382:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1384:	b7 01       	movw	r22, r14
    1386:	88 81       	ld	r24, Y
    1388:	99 81       	ldd	r25, Y+1	; 0x01
    138a:	0e 94 0d 0c 	call	0x181a	; 0x181a <strcpy>
	return *this;
}
    138e:	ce 01       	movw	r24, r28
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	08 95       	ret

0000139e <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    139e:	fc 01       	movw	r30, r24
    13a0:	11 82       	std	Z+1, r1	; 0x01
    13a2:	10 82       	st	Z, r1
	capacity = 0;
    13a4:	13 82       	std	Z+3, r1	; 0x03
    13a6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    13a8:	15 82       	std	Z+5, r1	; 0x05
    13aa:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    13ac:	61 15       	cp	r22, r1
    13ae:	71 05       	cpc	r23, r1
    13b0:	51 f0       	breq	.+20     	; 0x13c6 <_ZN6StringC1EPKc+0x28>
    13b2:	fb 01       	movw	r30, r22
    13b4:	01 90       	ld	r0, Z+
    13b6:	00 20       	and	r0, r0
    13b8:	e9 f7       	brne	.-6      	; 0x13b4 <_ZN6StringC1EPKc+0x16>
    13ba:	31 97       	sbiw	r30, 0x01	; 1
    13bc:	af 01       	movw	r20, r30
    13be:	46 1b       	sub	r20, r22
    13c0:	57 0b       	sbc	r21, r23
    13c2:	0c 94 ae 09 	jmp	0x135c	; 0x135c <_ZN6String4copyEPKcj>
    13c6:	08 95       	ret

000013c8 <yield>:
=======
    131e:	81 11       	cpse	r24, r1
    1320:	0e 94 16 09 	call	0x122c	; 0x122c <turnOffPWM>

	out = portOutputRegister(port);
    1324:	ec 2f       	mov	r30, r28
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	ec 55       	subi	r30, 0x5C	; 92
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	a5 91       	lpm	r26, Z+
    1332:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1334:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1336:	f8 94       	cli

	if (val == LOW) {
    1338:	11 11       	cpse	r17, r1
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <digitalWrite+0x50>
		*out &= ~bit;
    133c:	9c 91       	ld	r25, X
    133e:	ed 2f       	mov	r30, r29
    1340:	e0 95       	com	r30
    1342:	e9 23       	and	r30, r25
    1344:	02 c0       	rjmp	.+4      	; 0x134a <digitalWrite+0x54>
	} else {
		*out |= bit;
    1346:	ec 91       	ld	r30, X
    1348:	ed 2b       	or	r30, r29
    134a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    134c:	8f bf       	out	0x3f, r24	; 63
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	08 95       	ret

00001356 <yield>:
>>>>>>> parent of c14ab71... 测出合适脉宽
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
<<<<<<< HEAD
    13c8:	08 95       	ret

000013ca <__udivmodsi4>:
    13ca:	a1 e2       	ldi	r26, 0x21	; 33
    13cc:	1a 2e       	mov	r1, r26
    13ce:	aa 1b       	sub	r26, r26
    13d0:	bb 1b       	sub	r27, r27
    13d2:	fd 01       	movw	r30, r26
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <__udivmodsi4_ep>

000013d6 <__udivmodsi4_loop>:
    13d6:	aa 1f       	adc	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	ee 1f       	adc	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	a2 17       	cp	r26, r18
    13e0:	b3 07       	cpc	r27, r19
    13e2:	e4 07       	cpc	r30, r20
    13e4:	f5 07       	cpc	r31, r21
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <__udivmodsi4_ep>
    13e8:	a2 1b       	sub	r26, r18
    13ea:	b3 0b       	sbc	r27, r19
    13ec:	e4 0b       	sbc	r30, r20
    13ee:	f5 0b       	sbc	r31, r21

000013f0 <__udivmodsi4_ep>:
    13f0:	66 1f       	adc	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	1a 94       	dec	r1
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <__udivmodsi4_loop>
    13fc:	60 95       	com	r22
    13fe:	70 95       	com	r23
    1400:	80 95       	com	r24
    1402:	90 95       	com	r25
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	bd 01       	movw	r22, r26
    140a:	cf 01       	movw	r24, r30
    140c:	08 95       	ret

0000140e <__tablejump2__>:
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	05 90       	lpm	r0, Z+
    1414:	f4 91       	lpm	r31, Z
    1416:	e0 2d       	mov	r30, r0
    1418:	09 94       	ijmp

0000141a <malloc>:
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	91 05       	cpc	r25, r1
    1422:	10 f4       	brcc	.+4      	; 0x1428 <malloc+0xe>
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <__flp>
    142c:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <__flp+0x1>
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	c0 e0       	ldi	r28, 0x00	; 0
    1436:	d0 e0       	ldi	r29, 0x00	; 0
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	11 f1       	breq	.+68     	; 0x1480 <malloc+0x66>
    143c:	40 81       	ld	r20, Z
    143e:	51 81       	ldd	r21, Z+1	; 0x01
    1440:	48 17       	cp	r20, r24
    1442:	59 07       	cpc	r21, r25
    1444:	c0 f0       	brcs	.+48     	; 0x1476 <malloc+0x5c>
    1446:	48 17       	cp	r20, r24
    1448:	59 07       	cpc	r21, r25
    144a:	61 f4       	brne	.+24     	; 0x1464 <malloc+0x4a>
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	20 97       	sbiw	r28, 0x00	; 0
    1452:	19 f0       	breq	.+6      	; 0x145a <malloc+0x40>
    1454:	9b 83       	std	Y+3, r25	; 0x03
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	2b c0       	rjmp	.+86     	; 0x14b0 <malloc+0x96>
    145a:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <__flp+0x1>
    145e:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__flp>
    1462:	26 c0       	rjmp	.+76     	; 0x14b0 <malloc+0x96>
    1464:	21 15       	cp	r18, r1
    1466:	31 05       	cpc	r19, r1
    1468:	19 f0       	breq	.+6      	; 0x1470 <malloc+0x56>
    146a:	42 17       	cp	r20, r18
    146c:	53 07       	cpc	r21, r19
    146e:	18 f4       	brcc	.+6      	; 0x1476 <malloc+0x5c>
    1470:	9a 01       	movw	r18, r20
    1472:	be 01       	movw	r22, r28
    1474:	df 01       	movw	r26, r30
    1476:	ef 01       	movw	r28, r30
    1478:	02 80       	ldd	r0, Z+2	; 0x02
    147a:	f3 81       	ldd	r31, Z+3	; 0x03
    147c:	e0 2d       	mov	r30, r0
    147e:	dc cf       	rjmp	.-72     	; 0x1438 <malloc+0x1e>
    1480:	21 15       	cp	r18, r1
    1482:	31 05       	cpc	r19, r1
    1484:	09 f1       	breq	.+66     	; 0x14c8 <malloc+0xae>
    1486:	28 1b       	sub	r18, r24
    1488:	39 0b       	sbc	r19, r25
    148a:	24 30       	cpi	r18, 0x04	; 4
    148c:	31 05       	cpc	r19, r1
    148e:	90 f4       	brcc	.+36     	; 0x14b4 <malloc+0x9a>
    1490:	12 96       	adiw	r26, 0x02	; 2
    1492:	8d 91       	ld	r24, X+
    1494:	9c 91       	ld	r25, X
    1496:	13 97       	sbiw	r26, 0x03	; 3
    1498:	61 15       	cp	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	21 f0       	breq	.+8      	; 0x14a6 <malloc+0x8c>
    149e:	fb 01       	movw	r30, r22
    14a0:	93 83       	std	Z+3, r25	; 0x03
    14a2:	82 83       	std	Z+2, r24	; 0x02
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <malloc+0x94>
    14a6:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <__flp+0x1>
    14aa:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__flp>
    14ae:	fd 01       	movw	r30, r26
    14b0:	32 96       	adiw	r30, 0x02	; 2
    14b2:	44 c0       	rjmp	.+136    	; 0x153c <malloc+0x122>
    14b4:	fd 01       	movw	r30, r26
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	81 93       	st	Z+, r24
    14bc:	91 93       	st	Z+, r25
    14be:	22 50       	subi	r18, 0x02	; 2
    14c0:	31 09       	sbc	r19, r1
    14c2:	2d 93       	st	X+, r18
    14c4:	3c 93       	st	X, r19
    14c6:	3a c0       	rjmp	.+116    	; 0x153c <malloc+0x122>
    14c8:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__brkval>
    14cc:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__brkval+0x1>
    14d0:	23 2b       	or	r18, r19
    14d2:	41 f4       	brne	.+16     	; 0x14e4 <malloc+0xca>
    14d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    14d8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    14dc:	30 93 db 02 	sts	0x02DB, r19	; 0x8002db <__brkval+0x1>
    14e0:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <__brkval>
    14e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    14e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    14ec:	21 15       	cp	r18, r1
    14ee:	31 05       	cpc	r19, r1
    14f0:	41 f4       	brne	.+16     	; 0x1502 <malloc+0xe8>
    14f2:	2d b7       	in	r18, 0x3d	; 61
    14f4:	3e b7       	in	r19, 0x3e	; 62
    14f6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    14fa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    14fe:	24 1b       	sub	r18, r20
    1500:	35 0b       	sbc	r19, r21
    1502:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <__brkval>
    1506:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <__brkval+0x1>
    150a:	e2 17       	cp	r30, r18
    150c:	f3 07       	cpc	r31, r19
    150e:	a0 f4       	brcc	.+40     	; 0x1538 <malloc+0x11e>
    1510:	2e 1b       	sub	r18, r30
    1512:	3f 0b       	sbc	r19, r31
    1514:	28 17       	cp	r18, r24
    1516:	39 07       	cpc	r19, r25
    1518:	78 f0       	brcs	.+30     	; 0x1538 <malloc+0x11e>
    151a:	ac 01       	movw	r20, r24
    151c:	4e 5f       	subi	r20, 0xFE	; 254
    151e:	5f 4f       	sbci	r21, 0xFF	; 255
    1520:	24 17       	cp	r18, r20
    1522:	35 07       	cpc	r19, r21
    1524:	48 f0       	brcs	.+18     	; 0x1538 <malloc+0x11e>
    1526:	4e 0f       	add	r20, r30
    1528:	5f 1f       	adc	r21, r31
    152a:	50 93 db 02 	sts	0x02DB, r21	; 0x8002db <__brkval+0x1>
    152e:	40 93 da 02 	sts	0x02DA, r20	; 0x8002da <__brkval>
    1532:	81 93       	st	Z+, r24
    1534:	91 93       	st	Z+, r25
    1536:	02 c0       	rjmp	.+4      	; 0x153c <malloc+0x122>
    1538:	e0 e0       	ldi	r30, 0x00	; 0
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	cf 01       	movw	r24, r30
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <free>:
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	09 f4       	brne	.+2      	; 0x1552 <free+0xe>
    1550:	8c c0       	rjmp	.+280    	; 0x166a <free+0x126>
    1552:	fc 01       	movw	r30, r24
    1554:	32 97       	sbiw	r30, 0x02	; 2
    1556:	13 82       	std	Z+3, r1	; 0x03
    1558:	12 82       	std	Z+2, r1	; 0x02
    155a:	00 91 dc 02 	lds	r16, 0x02DC	; 0x8002dc <__flp>
    155e:	10 91 dd 02 	lds	r17, 0x02DD	; 0x8002dd <__flp+0x1>
    1562:	01 15       	cp	r16, r1
    1564:	11 05       	cpc	r17, r1
    1566:	81 f4       	brne	.+32     	; 0x1588 <free+0x44>
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	82 0f       	add	r24, r18
    156e:	93 1f       	adc	r25, r19
    1570:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__brkval>
    1574:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__brkval+0x1>
    1578:	28 17       	cp	r18, r24
    157a:	39 07       	cpc	r19, r25
    157c:	79 f5       	brne	.+94     	; 0x15dc <free+0x98>
    157e:	f0 93 db 02 	sts	0x02DB, r31	; 0x8002db <__brkval+0x1>
    1582:	e0 93 da 02 	sts	0x02DA, r30	; 0x8002da <__brkval>
    1586:	71 c0       	rjmp	.+226    	; 0x166a <free+0x126>
    1588:	d8 01       	movw	r26, r16
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	ae 17       	cp	r26, r30
    1590:	bf 07       	cpc	r27, r31
    1592:	50 f4       	brcc	.+20     	; 0x15a8 <free+0x64>
    1594:	12 96       	adiw	r26, 0x02	; 2
    1596:	2d 91       	ld	r18, X+
    1598:	3c 91       	ld	r19, X
    159a:	13 97       	sbiw	r26, 0x03	; 3
    159c:	ad 01       	movw	r20, r26
    159e:	21 15       	cp	r18, r1
    15a0:	31 05       	cpc	r19, r1
    15a2:	09 f1       	breq	.+66     	; 0x15e6 <free+0xa2>
    15a4:	d9 01       	movw	r26, r18
    15a6:	f3 cf       	rjmp	.-26     	; 0x158e <free+0x4a>
    15a8:	9d 01       	movw	r18, r26
    15aa:	da 01       	movw	r26, r20
    15ac:	33 83       	std	Z+3, r19	; 0x03
    15ae:	22 83       	std	Z+2, r18	; 0x02
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	86 0f       	add	r24, r22
    15b6:	97 1f       	adc	r25, r23
    15b8:	82 17       	cp	r24, r18
    15ba:	93 07       	cpc	r25, r19
    15bc:	69 f4       	brne	.+26     	; 0x15d8 <free+0x94>
    15be:	ec 01       	movw	r28, r24
    15c0:	28 81       	ld	r18, Y
    15c2:	39 81       	ldd	r19, Y+1	; 0x01
    15c4:	26 0f       	add	r18, r22
    15c6:	37 1f       	adc	r19, r23
    15c8:	2e 5f       	subi	r18, 0xFE	; 254
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	31 83       	std	Z+1, r19	; 0x01
    15ce:	20 83       	st	Z, r18
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	93 83       	std	Z+3, r25	; 0x03
    15d6:	82 83       	std	Z+2, r24	; 0x02
    15d8:	45 2b       	or	r20, r21
    15da:	29 f4       	brne	.+10     	; 0x15e6 <free+0xa2>
    15dc:	f0 93 dd 02 	sts	0x02DD, r31	; 0x8002dd <__flp+0x1>
    15e0:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <__flp>
    15e4:	42 c0       	rjmp	.+132    	; 0x166a <free+0x126>
    15e6:	13 96       	adiw	r26, 0x03	; 3
    15e8:	fc 93       	st	X, r31
    15ea:	ee 93       	st	-X, r30
    15ec:	12 97       	sbiw	r26, 0x02	; 2
    15ee:	ed 01       	movw	r28, r26
    15f0:	49 91       	ld	r20, Y+
    15f2:	59 91       	ld	r21, Y+
    15f4:	9e 01       	movw	r18, r28
    15f6:	24 0f       	add	r18, r20
    15f8:	35 1f       	adc	r19, r21
    15fa:	e2 17       	cp	r30, r18
    15fc:	f3 07       	cpc	r31, r19
    15fe:	71 f4       	brne	.+28     	; 0x161c <free+0xd8>
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	84 0f       	add	r24, r20
    1606:	95 1f       	adc	r25, r21
    1608:	02 96       	adiw	r24, 0x02	; 2
    160a:	11 96       	adiw	r26, 0x01	; 1
    160c:	9c 93       	st	X, r25
    160e:	8e 93       	st	-X, r24
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	13 96       	adiw	r26, 0x03	; 3
    1616:	9c 93       	st	X, r25
    1618:	8e 93       	st	-X, r24
    161a:	12 97       	sbiw	r26, 0x02	; 2
    161c:	e0 e0       	ldi	r30, 0x00	; 0
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	d8 01       	movw	r26, r16
    1622:	12 96       	adiw	r26, 0x02	; 2
    1624:	8d 91       	ld	r24, X+
    1626:	9c 91       	ld	r25, X
    1628:	13 97       	sbiw	r26, 0x03	; 3
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	19 f0       	breq	.+6      	; 0x1634 <free+0xf0>
    162e:	f8 01       	movw	r30, r16
    1630:	8c 01       	movw	r16, r24
    1632:	f6 cf       	rjmp	.-20     	; 0x1620 <free+0xdc>
    1634:	8d 91       	ld	r24, X+
    1636:	9c 91       	ld	r25, X
    1638:	98 01       	movw	r18, r16
    163a:	2e 5f       	subi	r18, 0xFE	; 254
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	82 0f       	add	r24, r18
    1640:	93 1f       	adc	r25, r19
    1642:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__brkval>
    1646:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__brkval+0x1>
    164a:	28 17       	cp	r18, r24
    164c:	39 07       	cpc	r19, r25
    164e:	69 f4       	brne	.+26     	; 0x166a <free+0x126>
    1650:	30 97       	sbiw	r30, 0x00	; 0
    1652:	29 f4       	brne	.+10     	; 0x165e <free+0x11a>
    1654:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <__flp+0x1>
    1658:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <__flp>
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <free+0x11e>
    165e:	13 82       	std	Z+3, r1	; 0x03
    1660:	12 82       	std	Z+2, r1	; 0x02
    1662:	10 93 db 02 	sts	0x02DB, r17	; 0x8002db <__brkval+0x1>
    1666:	00 93 da 02 	sts	0x02DA, r16	; 0x8002da <__brkval>
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	08 95       	ret

00001674 <realloc>:
    1674:	a0 e0       	ldi	r26, 0x00	; 0
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e0 e4       	ldi	r30, 0x40	; 64
    167a:	fb e0       	ldi	r31, 0x0B	; 11
    167c:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__prologue_saves__+0x8>
    1680:	ec 01       	movw	r28, r24
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	21 f4       	brne	.+8      	; 0x168e <realloc+0x1a>
    1686:	cb 01       	movw	r24, r22
    1688:	0e 94 0d 0a 	call	0x141a	; 0x141a <malloc>
    168c:	b8 c0       	rjmp	.+368    	; 0x17fe <realloc+0x18a>
    168e:	fc 01       	movw	r30, r24
    1690:	e6 0f       	add	r30, r22
    1692:	f7 1f       	adc	r31, r23
    1694:	9c 01       	movw	r18, r24
    1696:	22 50       	subi	r18, 0x02	; 2
    1698:	31 09       	sbc	r19, r1
    169a:	e2 17       	cp	r30, r18
    169c:	f3 07       	cpc	r31, r19
    169e:	08 f4       	brcc	.+2      	; 0x16a2 <realloc+0x2e>
    16a0:	ac c0       	rjmp	.+344    	; 0x17fa <realloc+0x186>
    16a2:	d9 01       	movw	r26, r18
    16a4:	0d 91       	ld	r16, X+
    16a6:	1c 91       	ld	r17, X
    16a8:	11 97       	sbiw	r26, 0x01	; 1
    16aa:	06 17       	cp	r16, r22
    16ac:	17 07       	cpc	r17, r23
    16ae:	b0 f0       	brcs	.+44     	; 0x16dc <realloc+0x68>
    16b0:	05 30       	cpi	r16, 0x05	; 5
    16b2:	11 05       	cpc	r17, r1
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <realloc+0x44>
    16b6:	9f c0       	rjmp	.+318    	; 0x17f6 <realloc+0x182>
    16b8:	c8 01       	movw	r24, r16
    16ba:	04 97       	sbiw	r24, 0x04	; 4
    16bc:	86 17       	cp	r24, r22
    16be:	97 07       	cpc	r25, r23
    16c0:	08 f4       	brcc	.+2      	; 0x16c4 <realloc+0x50>
    16c2:	99 c0       	rjmp	.+306    	; 0x17f6 <realloc+0x182>
    16c4:	02 50       	subi	r16, 0x02	; 2
    16c6:	11 09       	sbc	r17, r1
    16c8:	06 1b       	sub	r16, r22
    16ca:	17 0b       	sbc	r17, r23
    16cc:	01 93       	st	Z+, r16
    16ce:	11 93       	st	Z+, r17
    16d0:	6d 93       	st	X+, r22
    16d2:	7c 93       	st	X, r23
    16d4:	cf 01       	movw	r24, r30
    16d6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <free>
    16da:	8d c0       	rjmp	.+282    	; 0x17f6 <realloc+0x182>
    16dc:	5b 01       	movw	r10, r22
    16de:	a0 1a       	sub	r10, r16
    16e0:	b1 0a       	sbc	r11, r17
    16e2:	4c 01       	movw	r8, r24
    16e4:	80 0e       	add	r8, r16
    16e6:	91 1e       	adc	r9, r17
    16e8:	a0 91 dc 02 	lds	r26, 0x02DC	; 0x8002dc <__flp>
    16ec:	b0 91 dd 02 	lds	r27, 0x02DD	; 0x8002dd <__flp+0x1>
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	e1 2c       	mov	r14, r1
    16f6:	f1 2c       	mov	r15, r1
    16f8:	10 97       	sbiw	r26, 0x00	; 0
    16fa:	09 f4       	brne	.+2      	; 0x16fe <realloc+0x8a>
    16fc:	4a c0       	rjmp	.+148    	; 0x1792 <realloc+0x11e>
    16fe:	a8 15       	cp	r26, r8
    1700:	b9 05       	cpc	r27, r9
    1702:	d1 f5       	brne	.+116    	; 0x1778 <realloc+0x104>
    1704:	6d 90       	ld	r6, X+
    1706:	7c 90       	ld	r7, X
    1708:	11 97       	sbiw	r26, 0x01	; 1
    170a:	63 01       	movw	r12, r6
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	c8 0e       	add	r12, r24
    1710:	d1 1c       	adc	r13, r1
    1712:	ca 14       	cp	r12, r10
    1714:	db 04       	cpc	r13, r11
    1716:	80 f1       	brcs	.+96     	; 0x1778 <realloc+0x104>
    1718:	a3 01       	movw	r20, r6
    171a:	4a 19       	sub	r20, r10
    171c:	5b 09       	sbc	r21, r11
    171e:	6a 01       	movw	r12, r20
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	c8 0e       	add	r12, r24
    1724:	d1 1c       	adc	r13, r1
    1726:	12 96       	adiw	r26, 0x02	; 2
    1728:	bc 90       	ld	r11, X
    172a:	12 97       	sbiw	r26, 0x02	; 2
    172c:	13 96       	adiw	r26, 0x03	; 3
    172e:	ac 91       	ld	r26, X
    1730:	b5 e0       	ldi	r27, 0x05	; 5
    1732:	cb 16       	cp	r12, r27
    1734:	d1 04       	cpc	r13, r1
    1736:	40 f0       	brcs	.+16     	; 0x1748 <realloc+0xd4>
    1738:	b2 82       	std	Z+2, r11	; 0x02
    173a:	a3 83       	std	Z+3, r26	; 0x03
    173c:	51 83       	std	Z+1, r21	; 0x01
    173e:	40 83       	st	Z, r20
    1740:	d9 01       	movw	r26, r18
    1742:	6d 93       	st	X+, r22
    1744:	7c 93       	st	X, r23
    1746:	0a c0       	rjmp	.+20     	; 0x175c <realloc+0xe8>
    1748:	0e 5f       	subi	r16, 0xFE	; 254
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	c3 01       	movw	r24, r6
    174e:	80 0f       	add	r24, r16
    1750:	91 1f       	adc	r25, r17
    1752:	f9 01       	movw	r30, r18
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	eb 2d       	mov	r30, r11
    175a:	fa 2f       	mov	r31, r26
    175c:	e1 14       	cp	r14, r1
    175e:	f1 04       	cpc	r15, r1
    1760:	31 f0       	breq	.+12     	; 0x176e <realloc+0xfa>
    1762:	d7 01       	movw	r26, r14
    1764:	13 96       	adiw	r26, 0x03	; 3
    1766:	fc 93       	st	X, r31
    1768:	ee 93       	st	-X, r30
    176a:	12 97       	sbiw	r26, 0x02	; 2
    176c:	44 c0       	rjmp	.+136    	; 0x17f6 <realloc+0x182>
    176e:	f0 93 dd 02 	sts	0x02DD, r31	; 0x8002dd <__flp+0x1>
    1772:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <__flp>
    1776:	3f c0       	rjmp	.+126    	; 0x17f6 <realloc+0x182>
    1778:	8d 91       	ld	r24, X+
    177a:	9c 91       	ld	r25, X
    177c:	11 97       	sbiw	r26, 0x01	; 1
    177e:	48 17       	cp	r20, r24
    1780:	59 07       	cpc	r21, r25
    1782:	08 f4       	brcc	.+2      	; 0x1786 <realloc+0x112>
    1784:	ac 01       	movw	r20, r24
    1786:	7d 01       	movw	r14, r26
    1788:	12 96       	adiw	r26, 0x02	; 2
    178a:	0d 90       	ld	r0, X+
    178c:	bc 91       	ld	r27, X
    178e:	a0 2d       	mov	r26, r0
    1790:	b3 cf       	rjmp	.-154    	; 0x16f8 <realloc+0x84>
    1792:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <__brkval>
    1796:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <__brkval+0x1>
    179a:	88 15       	cp	r24, r8
    179c:	99 05       	cpc	r25, r9
    179e:	e1 f4       	brne	.+56     	; 0x17d8 <realloc+0x164>
    17a0:	46 17       	cp	r20, r22
    17a2:	57 07       	cpc	r21, r23
    17a4:	c8 f4       	brcc	.+50     	; 0x17d8 <realloc+0x164>
    17a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    17aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	41 f4       	brne	.+16     	; 0x17c2 <realloc+0x14e>
    17b2:	8d b7       	in	r24, 0x3d	; 61
    17b4:	9e b7       	in	r25, 0x3e	; 62
    17b6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    17ba:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    17be:	84 1b       	sub	r24, r20
    17c0:	95 0b       	sbc	r25, r21
    17c2:	e8 17       	cp	r30, r24
    17c4:	f9 07       	cpc	r31, r25
    17c6:	c8 f4       	brcc	.+50     	; 0x17fa <realloc+0x186>
    17c8:	f0 93 db 02 	sts	0x02DB, r31	; 0x8002db <__brkval+0x1>
    17cc:	e0 93 da 02 	sts	0x02DA, r30	; 0x8002da <__brkval>
    17d0:	f9 01       	movw	r30, r18
    17d2:	71 83       	std	Z+1, r23	; 0x01
    17d4:	60 83       	st	Z, r22
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <realloc+0x182>
    17d8:	cb 01       	movw	r24, r22
    17da:	0e 94 0d 0a 	call	0x141a	; 0x141a <malloc>
    17de:	7c 01       	movw	r14, r24
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	59 f0       	breq	.+22     	; 0x17fa <realloc+0x186>
    17e4:	a8 01       	movw	r20, r16
    17e6:	be 01       	movw	r22, r28
    17e8:	0e 94 04 0c 	call	0x1808	; 0x1808 <memcpy>
    17ec:	ce 01       	movw	r24, r28
    17ee:	0e 94 a2 0a 	call	0x1544	; 0x1544 <free>
    17f2:	c7 01       	movw	r24, r14
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <realloc+0x18a>
    17f6:	ce 01       	movw	r24, r28
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <realloc+0x18a>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	ee e0       	ldi	r30, 0x0E	; 14
    1804:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__epilogue_restores__+0x8>

00001808 <memcpy>:
    1808:	fb 01       	movw	r30, r22
    180a:	dc 01       	movw	r26, r24
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <memcpy+0xa>
    180e:	01 90       	ld	r0, Z+
    1810:	0d 92       	st	X+, r0
    1812:	41 50       	subi	r20, 0x01	; 1
    1814:	50 40       	sbci	r21, 0x00	; 0
    1816:	d8 f7       	brcc	.-10     	; 0x180e <memcpy+0x6>
    1818:	08 95       	ret

0000181a <strcpy>:
    181a:	fb 01       	movw	r30, r22
    181c:	dc 01       	movw	r26, r24
    181e:	01 90       	ld	r0, Z+
    1820:	0d 92       	st	X+, r0
    1822:	00 20       	and	r0, r0
    1824:	e1 f7       	brne	.-8      	; 0x181e <strcpy+0x4>
    1826:	08 95       	ret

00001828 <__prologue_saves__>:
    1828:	2f 92       	push	r2
    182a:	3f 92       	push	r3
    182c:	4f 92       	push	r4
    182e:	5f 92       	push	r5
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	ca 1b       	sub	r28, r26
    1852:	db 0b       	sbc	r29, r27
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	09 94       	ijmp

00001860 <__epilogue_restores__>:
    1860:	2a 88       	ldd	r2, Y+18	; 0x12
    1862:	39 88       	ldd	r3, Y+17	; 0x11
    1864:	48 88       	ldd	r4, Y+16	; 0x10
    1866:	5f 84       	ldd	r5, Y+15	; 0x0f
    1868:	6e 84       	ldd	r6, Y+14	; 0x0e
    186a:	7d 84       	ldd	r7, Y+13	; 0x0d
    186c:	8c 84       	ldd	r8, Y+12	; 0x0c
    186e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1870:	aa 84       	ldd	r10, Y+10	; 0x0a
    1872:	b9 84       	ldd	r11, Y+9	; 0x09
    1874:	c8 84       	ldd	r12, Y+8	; 0x08
    1876:	df 80       	ldd	r13, Y+7	; 0x07
    1878:	ee 80       	ldd	r14, Y+6	; 0x06
    187a:	fd 80       	ldd	r15, Y+5	; 0x05
    187c:	0c 81       	ldd	r16, Y+4	; 0x04
    187e:	1b 81       	ldd	r17, Y+3	; 0x03
    1880:	aa 81       	ldd	r26, Y+2	; 0x02
    1882:	b9 81       	ldd	r27, Y+1	; 0x01
    1884:	ce 0f       	add	r28, r30
    1886:	d1 1d       	adc	r29, r1
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	ed 01       	movw	r28, r26
    1894:	08 95       	ret

00001896 <__do_global_dtors>:
    1896:	10 e0       	ldi	r17, 0x00	; 0
    1898:	cf e5       	ldi	r28, 0x5F	; 95
    189a:	d0 e0       	ldi	r29, 0x00	; 0
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <__do_global_dtors+0x10>
    189e:	fe 01       	movw	r30, r28
    18a0:	0e 94 07 0a 	call	0x140e	; 0x140e <__tablejump2__>
    18a4:	21 96       	adiw	r28, 0x01	; 1
    18a6:	c0 36       	cpi	r28, 0x60	; 96
    18a8:	d1 07       	cpc	r29, r17
    18aa:	c9 f7       	brne	.-14     	; 0x189e <__do_global_dtors+0x8>
    18ac:	f8 94       	cli

000018ae <__stop_program>:
    18ae:	ff cf       	rjmp	.-2      	; 0x18ae <__stop_program>
=======
    1356:	08 95       	ret

00001358 <__udivmodsi4>:
    1358:	a1 e2       	ldi	r26, 0x21	; 33
    135a:	1a 2e       	mov	r1, r26
    135c:	aa 1b       	sub	r26, r26
    135e:	bb 1b       	sub	r27, r27
    1360:	fd 01       	movw	r30, r26
    1362:	0d c0       	rjmp	.+26     	; 0x137e <__udivmodsi4_ep>

00001364 <__udivmodsi4_loop>:
    1364:	aa 1f       	adc	r26, r26
    1366:	bb 1f       	adc	r27, r27
    1368:	ee 1f       	adc	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	a2 17       	cp	r26, r18
    136e:	b3 07       	cpc	r27, r19
    1370:	e4 07       	cpc	r30, r20
    1372:	f5 07       	cpc	r31, r21
    1374:	20 f0       	brcs	.+8      	; 0x137e <__udivmodsi4_ep>
    1376:	a2 1b       	sub	r26, r18
    1378:	b3 0b       	sbc	r27, r19
    137a:	e4 0b       	sbc	r30, r20
    137c:	f5 0b       	sbc	r31, r21

0000137e <__udivmodsi4_ep>:
    137e:	66 1f       	adc	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	1a 94       	dec	r1
    1388:	69 f7       	brne	.-38     	; 0x1364 <__udivmodsi4_loop>
    138a:	60 95       	com	r22
    138c:	70 95       	com	r23
    138e:	80 95       	com	r24
    1390:	90 95       	com	r25
    1392:	9b 01       	movw	r18, r22
    1394:	ac 01       	movw	r20, r24
    1396:	bd 01       	movw	r22, r26
    1398:	cf 01       	movw	r24, r30
    139a:	08 95       	ret

0000139c <__tablejump2__>:
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	05 90       	lpm	r0, Z+
    13a2:	f4 91       	lpm	r31, Z
    13a4:	e0 2d       	mov	r30, r0
    13a6:	09 94       	ijmp

000013a8 <_exit>:
    13a8:	f8 94       	cli

000013aa <__stop_program>:
    13aa:	ff cf       	rjmp	.-2      	; 0x13aa <__stop_program>
>>>>>>> parent of c14ab71... 测出合适脉宽
