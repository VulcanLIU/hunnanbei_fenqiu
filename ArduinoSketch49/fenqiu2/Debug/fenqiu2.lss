
fenqiu2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00001f58  00001fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  00800160  00800160  0000204c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a8  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011765  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027c0  00000000  00000000  00013fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b30  00000000  00000000  00016789  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000186c  00000000  00000000  0001a2bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000273c  00000000  00000000  0001bb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000886e  00000000  00000000  0001e264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  00026ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__vector_18>
      4c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	0a 02       	muls	r16, r26
      ba:	b1 04       	cpc	r11, r1
      bc:	5f 09       	sbc	r21, r15

000000be <__ctors_end>:
      be:	0e 02       	muls	r16, r30

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e8 e5       	ldi	r30, 0x58	; 88
      d4:	ff e1       	ldi	r31, 0x1F	; 31
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a0 36       	cpi	r26, 0x60	; 96
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	22 e0       	ldi	r18, 0x02	; 2
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a8 3e       	cpi	r26, 0xE8	; 232
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 8d 09 	call	0x131a	; 0x131a <main>
     10c:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_Z10step_motorv>:
int step_count = 0;

//定时器中断
void step_motor()
{
	if(step_count!=0){
     114:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     118:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
     11c:	00 97       	sbiw	r24, 0x00	; 0
     11e:	91 f0       	breq	.+36     	; 0x144 <_Z10step_motorv+0x30>
		if(step_count%2==0)
     120:	80 fd       	sbrc	r24, 0
     122:	02 c0       	rjmp	.+4      	; 0x128 <_Z10step_motorv+0x14>
		{digitalWrite(Step,HIGH);}
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <_Z10step_motorv+0x16>
		else
		{digitalWrite(Step,LOW);}
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Step>
     12e:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
		
		step_count--;
     132:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     136:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     140:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
     144:	08 95       	ret

00000146 <setup>:
	}
}

void setup()
{
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	00 d0       	rcall	.+0      	; 0x150 <setup+0xa>
     150:	00 d0       	rcall	.+0      	; 0x152 <setup+0xc>
     152:	00 d0       	rcall	.+0      	; 0x154 <setup+0xe>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	Wire.begin(5);
     158:	65 e0       	ldi	r22, 0x05	; 5
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	89 ee       	ldi	r24, 0xE9	; 233
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN7TwoWire5beginEi>
	Wire.onReceive(receiveEvent);
     164:	62 e1       	ldi	r22, 0x12	; 18
     166:	72 e0       	ldi	r23, 0x02	; 2
     168:	89 ee       	ldi	r24, 0xE9	; 233
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN7TwoWire9onReceiveEPFviE>
	Wire.onRequest(requestEvent);
     170:	63 e2       	ldi	r22, 0x23	; 35
     172:	72 e0       	ldi	r23, 0x02	; 2
     174:	89 ee       	ldi	r24, 0xE9	; 233
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN7TwoWire9onRequestEPFvvE>
	pinMode(Step, OUTPUT); // Step
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Step>
     182:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <pinMode>
	pinMode(dir, OUTPUT); // Dir
     186:	0a e0       	ldi	r16, 0x0A	; 10
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	f8 01       	movw	r30, r16
     18e:	80 81       	ld	r24, Z
     190:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <pinMode>
	digitalWrite(dir,HIGH);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	f8 01       	movw	r30, r16
     198:	80 81       	ld	r24, Z
     19a:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     19e:	26 e0       	ldi	r18, 0x06	; 6
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	52 ec       	ldi	r21, 0xC2	; 194
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	8e e3       	ldi	r24, 0x3E	; 62
     1aa:	92 e0       	ldi	r25, 0x02	; 2
     1ac:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(115200);
	delay(1000);
     1b0:	68 ee       	ldi	r22, 0xE8	; 232
     1b2:	73 e0       	ldi	r23, 0x03	; 3
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 14 0b 	call	0x1628	; 0x1628 <delay>
	
	//#定时器初始化
	tc1.setMode("CTC",0.5);
     1bc:	6f e1       	ldi	r22, 0x1F	; 31
     1be:	71 e0       	ldi	r23, 0x01	; 1
     1c0:	ce 01       	movw	r24, r28
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN6StringC1EPKc>
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	5f e3       	ldi	r21, 0x3F	; 63
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	8f e6       	ldi	r24, 0x6F	; 111
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN6Timer17setModeE6Stringf>
     1de:	ce 01       	movw	r24, r28
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN6StringD1Ev>
	tc1.attachInterrupt(step_motor);
     1e6:	6a e8       	ldi	r22, 0x8A	; 138
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	8f e6       	ldi	r24, 0x6F	; 111
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN6Timer115attachInterruptEPFvvE>
}
     1f2:	26 96       	adiw	r28, 0x06	; 6
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	08 95       	ret

00000208 <_Z9wihteGoldv>:
}

void wihteGold()
{
	//刚开始没球就一直转
	if (p > 500)
     208:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <p>
     20c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <p+0x1>
     210:	85 3f       	cpi	r24, 0xF5	; 245
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	92 07       	cpc	r25, r18
     216:	1c f0       	brlt	.+6      	; 0x21e <_Z9wihteGoldv+0x16>
	flag = true;
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <flag>
	
	if (flag == false)
     21e:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <flag>
     222:	21 11       	cpse	r18, r1
     224:	03 c0       	rjmp	.+6      	; 0x22c <_Z9wihteGoldv+0x24>
	{
		step_count = 2;
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	32 c0       	rjmp	.+100    	; 0x290 <_Z9wihteGoldv+0x88>
	}
	else
	{
		if (p > 500)
     22c:	85 3f       	cpi	r24, 0xF5	; 245
     22e:	91 40       	sbci	r25, 0x01	; 1
     230:	9c f1       	brlt	.+102    	; 0x298 <_Z9wihteGoldv+0x90>
		{
			delay(200);
     232:	68 ec       	ldi	r22, 0xC8	; 200
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 14 0b 	call	0x1628	; 0x1628 <delay>
			//收到白球
			if (q > 450)
     23e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <q>
     242:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <q+0x1>
     246:	83 3c       	cpi	r24, 0xC3	; 195
     248:	91 40       	sbci	r25, 0x01	; 1
     24a:	a4 f0       	brlt	.+40     	; 0x274 <_Z9wihteGoldv+0x6c>
			{
				digitalWrite(dir, LOW);
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     252:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
				step_count = 122;
     256:	8a e7       	ldi	r24, 0x7A	; 122
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     25e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
				w++;
     262:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <w>
     266:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <w+0x1>
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <w+0x1>
     270:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <w>
			}
			//收到黑球
			if (q < 450)
     274:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <q>
     278:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <q+0x1>
     27c:	82 3c       	cpi	r24, 0xC2	; 194
     27e:	91 40       	sbci	r25, 0x01	; 1
     280:	5c f4       	brge	.+22     	; 0x298 <_Z9wihteGoldv+0x90>
			{
				digitalWrite(dir, HIGH);
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     288:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
				step_count = 122;
     28c:	8a e7       	ldi	r24, 0x7A	; 122
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     294:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
			}
		}
	}
	
	//赋值得分球数量
	g = w;
     298:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <w>
     29c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <w+0x1>
     2a0:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <g+0x1>
     2a4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <g>
     2a8:	08 95       	ret

000002aa <_Z9blackGoldv>:
}
void blackGold()
{
	//刚上电没球就一直转
	if (p > 500)
     2aa:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <p>
     2ae:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <p+0x1>
     2b2:	85 3f       	cpi	r24, 0xF5	; 245
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	92 07       	cpc	r25, r18
     2b8:	1c f0       	brlt	.+6      	; 0x2c0 <_Z9blackGoldv+0x16>
	flag = true;
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <flag>

	if (flag == false)
     2c0:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <flag>
     2c4:	21 11       	cpse	r18, r1
     2c6:	03 c0       	rjmp	.+6      	; 0x2ce <_Z9blackGoldv+0x24>
	{
		step_count = 2;
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	2c c0       	rjmp	.+88     	; 0x326 <_Z9blackGoldv+0x7c>
	}
	else
	{
		if (p > 500)
     2ce:	85 3f       	cpi	r24, 0xF5	; 245
     2d0:	91 40       	sbci	r25, 0x01	; 1
     2d2:	6c f1       	brlt	.+90     	; 0x32e <_Z9blackGoldv+0x84>
		{
			if (q < 450)
     2d4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <q>
     2d8:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <q+0x1>
     2dc:	82 3c       	cpi	r24, 0xC2	; 194
     2de:	91 40       	sbci	r25, 0x01	; 1
     2e0:	a4 f4       	brge	.+40     	; 0x30a <_Z9blackGoldv+0x60>
			{
				digitalWrite(dir, LOW);
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     2e8:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
				step_count = 122;
     2ec:	8a e7       	ldi	r24, 0x7A	; 122
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     2f4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
				b++;
     2f8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <b>
     2fc:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <b+0x1>
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <b+0x1>
     306:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <b>
			}
			if (q > 450)
     30a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <q>
     30e:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <q+0x1>
     312:	83 3c       	cpi	r24, 0xC3	; 195
     314:	91 40       	sbci	r25, 0x01	; 1
     316:	5c f0       	brlt	.+22     	; 0x32e <_Z9blackGoldv+0x84>
			{
				digitalWrite(dir, HIGH);
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir>
     31e:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
				step_count = 122;
     322:	8a e7       	ldi	r24, 0x7A	; 122
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     32a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
			}
		}
	}
	g = b;
     32e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <b>
     332:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <b+0x1>
     336:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <g+0x1>
     33a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <g>
     33e:	08 95       	ret

00000340 <loop>:
	tc1.setMode("CTC",0.5);
	tc1.attachInterrupt(step_motor);
}

void loop()
{
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
	int p = analogRead(Read1);
     348:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Read1>
     34c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <analogRead>
     350:	ec 01       	movw	r28, r24
	int q = analogRead(Read2);
     352:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Read2>
     356:	0e 94 8b 0b 	call	0x1716	; 0x1716 <analogRead>
     35a:	8c 01       	movw	r16, r24

//step_count = 100;
	
	//#如果是收白球
	if (Q == 0)
     35c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Q>
     360:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <Q+0x1>
     364:	89 2b       	or	r24, r25
     366:	61 f4       	brne	.+24     	; 0x380 <loop+0x40>
	{
		digitalWrite(Wled, HIGH);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Wled>
     36e:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
		digitalWrite(Bled, LOW);
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Bled>
     378:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
		
		//步进电机运动
		wihteGold();
     37c:	0e 94 04 01 	call	0x208	; 0x208 <_Z9wihteGoldv>
	}
	
	//#如果是收黑球
	if (Q == 1)
     380:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Q>
     384:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <Q+0x1>
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	61 f4       	brne	.+24     	; 0x3a4 <loop+0x64>
	{
		digitalWrite(Bled, HIGH);
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Bled>
     392:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
		digitalWrite(Wled, LOW);
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Wled>
     39c:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
		
		//步进电机运动
		blackGold();
     3a0:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z9blackGoldv>
	}
	
	//串口调试
// 	Serial.print("q:");
	Serial.print(q);
     3a4:	4a e0       	ldi	r20, 0x0A	; 10
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	b8 01       	movw	r22, r16
     3aa:	8e e3       	ldi	r24, 0x3E	; 62
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	0e 94 87 0a 	call	0x150e	; 0x150e <_ZN5Print5printEii>
	Serial.print("p:");
     3b2:	63 e2       	ldi	r22, 0x23	; 35
     3b4:	71 e0       	ldi	r23, 0x01	; 1
     3b6:	8e e3       	ldi	r24, 0x3E	; 62
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN5Print5printEPKc>
	Serial.print(p);
     3be:	4a e0       	ldi	r20, 0x0A	; 10
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	be 01       	movw	r22, r28
     3c4:	8e e3       	ldi	r24, 0x3E	; 62
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	0e 94 87 0a 	call	0x150e	; 0x150e <_ZN5Print5printEii>
	Serial.print("Q:");
     3cc:	66 e2       	ldi	r22, 0x26	; 38
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	8e e3       	ldi	r24, 0x3E	; 62
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN5Print5printEPKc>
	Serial.print(Q);
     3d8:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <Q>
     3dc:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <Q+0x1>
     3e0:	4a e0       	ldi	r20, 0x0A	; 10
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	8e e3       	ldi	r24, 0x3E	; 62
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	0e 94 87 0a 	call	0x150e	; 0x150e <_ZN5Print5printEii>
	Serial.print("g:");
     3ec:	69 e2       	ldi	r22, 0x29	; 41
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	8e e3       	ldi	r24, 0x3E	; 62
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN5Print5printEPKc>
	Serial.println(g);
     3f8:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <g>
     3fc:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <g+0x1>
     400:	4a e0       	ldi	r20, 0x0A	; 10
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	8e e3       	ldi	r24, 0x3E	; 62
     406:	92 e0       	ldi	r25, 0x02	; 2
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
	Serial.print("p:");
	Serial.print(p);
	Serial.print("Q:");
	Serial.print(Q);
	Serial.print("g:");
	Serial.println(g);
     410:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <_ZN5Print7printlnEii>

00000414 <_GLOBAL__sub_I_tc1>:
#include "Timer1.h"
//Beginning of Auto generated function prototypes by Atmel Studio
void requestEvent();
//End of Auto generated function prototypes by Atmel Studio

Timer1 tc1;
     414:	8f e6       	ldi	r24, 0x6F	; 111
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0c 94 31 05 	jmp	0xa62	; 0xa62 <_ZN6Timer1C1Ev>

0000041c <_GLOBAL__sub_D_tc1>:
     41c:	8f e6       	ldi	r24, 0x6F	; 111
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <_ZN6Timer1D1Ev>

00000424 <_Z12receiveEventi>:
	Serial.print("g:");
	Serial.println(g);
}
void receiveEvent(int howMany)
{
	while (0 < Wire.available())
     424:	89 ee       	ldi	r24, 0xE9	; 233
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN7TwoWire9availableEv>
     42c:	18 16       	cp	r1, r24
     42e:	19 06       	cpc	r1, r25
     430:	4c f4       	brge	.+18     	; 0x444 <_Z12receiveEventi+0x20>
	{
		Q = Wire.read();
     432:	89 ee       	ldi	r24, 0xE9	; 233
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN7TwoWire4readEv>
     43a:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <Q+0x1>
     43e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <Q>
     442:	f0 cf       	rjmp	.-32     	; 0x424 <_Z12receiveEventi>
	}
}
     444:	08 95       	ret

00000446 <_Z12requestEventv>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     446:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <g>
     44a:	89 ee       	ldi	r24, 0xE9	; 233
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0c 94 49 04 	jmp	0x892	; 0x892 <_ZN7TwoWire5writeEh>

00000452 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     452:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <twi_state>
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <twi_sendStop>
     45c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <twi_inRepStart>
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	82 e1       	ldi	r24, 0x12	; 18
     464:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	83 e1       	ldi	r24, 0x13	; 19
     46c:	0e 94 0d 0c 	call	0x181a	; 0x181a <digitalWrite>
     470:	e9 eb       	ldi	r30, 0xB9	; 185
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	8e 7f       	andi	r24, 0xFE	; 254
     478:	80 83       	st	Z, r24
     47a:	80 81       	ld	r24, Z
     47c:	8d 7f       	andi	r24, 0xFD	; 253
     47e:	80 83       	st	Z, r24
     480:	88 e4       	ldi	r24, 0x48	; 72
     482:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     486:	85 e4       	ldi	r24, 0x45	; 69
     488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     48c:	08 95       	ret

0000048e <twi_setAddress>:
     48e:	88 0f       	add	r24, r24
     490:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     494:	08 95       	ret

00000496 <twi_transmit>:
     496:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <twi_txBufferLength>
     49a:	26 2f       	mov	r18, r22
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	24 0f       	add	r18, r20
     4a0:	31 1d       	adc	r19, r1
     4a2:	21 32       	cpi	r18, 0x21	; 33
     4a4:	31 05       	cpc	r19, r1
     4a6:	dc f4       	brge	.+54     	; 0x4de <twi_transmit+0x48>
     4a8:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <twi_state>
     4ac:	24 30       	cpi	r18, 0x04	; 4
     4ae:	c9 f4       	brne	.+50     	; 0x4e2 <twi_transmit+0x4c>
     4b0:	fc 01       	movw	r30, r24
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	86 17       	cp	r24, r22
     4b8:	58 f4       	brcc	.+22     	; 0x4d0 <twi_transmit+0x3a>
     4ba:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <twi_txBufferLength>
     4be:	21 91       	ld	r18, Z+
     4c0:	dc 01       	movw	r26, r24
     4c2:	a1 56       	subi	r26, 0x61	; 97
     4c4:	be 4f       	sbci	r27, 0xFE	; 254
     4c6:	a3 0f       	add	r26, r19
     4c8:	b1 1d       	adc	r27, r1
     4ca:	2c 93       	st	X, r18
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	f3 cf       	rjmp	.-26     	; 0x4b6 <twi_transmit+0x20>
     4d0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <twi_txBufferLength>
     4d4:	68 0f       	add	r22, r24
     4d6:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <twi_txBufferLength>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	08 95       	ret
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	08 95       	ret

000004e6 <twi_attachSlaveRxEvent>:
     4e6:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <twi_onSlaveReceive+0x1>
     4ea:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <twi_onSlaveReceive>
     4ee:	08 95       	ret

000004f0 <twi_attachSlaveTxEvent>:
     4f0:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <twi_onSlaveTransmit+0x1>
     4f4:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <twi_onSlaveTransmit>
     4f8:	08 95       	ret

000004fa <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     4fa:	85 ed       	ldi	r24, 0xD5	; 213
     4fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     500:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     504:	84 fd       	sbrc	r24, 4
     506:	fc cf       	rjmp	.-8      	; 0x500 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     508:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <twi_state>
     50c:	08 95       	ret

0000050e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     50e:	85 ec       	ldi	r24, 0xC5	; 197
     510:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     514:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <twi_state>
     518:	08 95       	ret

0000051a <__vector_24>:
}

ISR(TWI_vect)
{
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
  switch(TW_STATUS){
     53c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     540:	88 7f       	andi	r24, 0xF8	; 248
     542:	80 36       	cpi	r24, 0x60	; 96
     544:	09 f4       	brne	.+2      	; 0x548 <__vector_24+0x2e>
     546:	9e c0       	rjmp	.+316    	; 0x684 <__vector_24+0x16a>
     548:	78 f5       	brcc	.+94     	; 0x5a8 <__vector_24+0x8e>
     54a:	88 32       	cpi	r24, 0x28	; 40
     54c:	09 f4       	brne	.+2      	; 0x550 <__vector_24+0x36>
     54e:	5d c0       	rjmp	.+186    	; 0x60a <__vector_24+0xf0>
     550:	90 f4       	brcc	.+36     	; 0x576 <__vector_24+0x5c>
     552:	80 31       	cpi	r24, 0x10	; 16
     554:	09 f4       	brne	.+2      	; 0x558 <__vector_24+0x3e>
     556:	56 c0       	rjmp	.+172    	; 0x604 <__vector_24+0xea>
     558:	38 f4       	brcc	.+14     	; 0x568 <__vector_24+0x4e>
     55a:	88 23       	and	r24, r24
     55c:	09 f4       	brne	.+2      	; 0x560 <__vector_24+0x46>
     55e:	f5 c0       	rjmp	.+490    	; 0x74a <__vector_24+0x230>
     560:	88 30       	cpi	r24, 0x08	; 8
     562:	09 f4       	brne	.+2      	; 0x566 <__vector_24+0x4c>
     564:	4f c0       	rjmp	.+158    	; 0x604 <__vector_24+0xea>
     566:	f5 c0       	rjmp	.+490    	; 0x752 <__vector_24+0x238>
     568:	88 31       	cpi	r24, 0x18	; 24
     56a:	09 f4       	brne	.+2      	; 0x56e <__vector_24+0x54>
     56c:	4e c0       	rjmp	.+156    	; 0x60a <__vector_24+0xf0>
     56e:	80 32       	cpi	r24, 0x20	; 32
     570:	09 f4       	brne	.+2      	; 0x574 <__vector_24+0x5a>
     572:	5f c0       	rjmp	.+190    	; 0x632 <__vector_24+0x118>
     574:	ee c0       	rjmp	.+476    	; 0x752 <__vector_24+0x238>
     576:	80 34       	cpi	r24, 0x40	; 64
     578:	09 f4       	brne	.+2      	; 0x57c <__vector_24+0x62>
     57a:	6a c0       	rjmp	.+212    	; 0x650 <__vector_24+0x136>
     57c:	58 f4       	brcc	.+22     	; 0x594 <__vector_24+0x7a>
     57e:	80 33       	cpi	r24, 0x30	; 48
     580:	09 f4       	brne	.+2      	; 0x584 <__vector_24+0x6a>
     582:	57 c0       	rjmp	.+174    	; 0x632 <__vector_24+0x118>
     584:	88 33       	cpi	r24, 0x38	; 56
     586:	09 f0       	breq	.+2      	; 0x58a <__vector_24+0x70>
     588:	e4 c0       	rjmp	.+456    	; 0x752 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     58a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_error>
      twi_releaseBus();
     58e:	0e 94 87 02 	call	0x50e	; 0x50e <twi_releaseBus>
      break;
     592:	df c0       	rjmp	.+446    	; 0x752 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     594:	80 35       	cpi	r24, 0x50	; 80
     596:	09 f4       	brne	.+2      	; 0x59a <__vector_24+0x80>
     598:	4f c0       	rjmp	.+158    	; 0x638 <__vector_24+0x11e>
     59a:	88 35       	cpi	r24, 0x58	; 88
     59c:	09 f4       	brne	.+2      	; 0x5a0 <__vector_24+0x86>
     59e:	5d c0       	rjmp	.+186    	; 0x65a <__vector_24+0x140>
     5a0:	88 34       	cpi	r24, 0x48	; 72
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <__vector_24+0x8c>
     5a4:	d6 c0       	rjmp	.+428    	; 0x752 <__vector_24+0x238>
     5a6:	d3 c0       	rjmp	.+422    	; 0x74e <__vector_24+0x234>
     5a8:	88 39       	cpi	r24, 0x98	; 152
     5aa:	09 f4       	brne	.+2      	; 0x5ae <__vector_24+0x94>
     5ac:	c4 c0       	rjmp	.+392    	; 0x736 <__vector_24+0x21c>
     5ae:	a8 f4       	brcc	.+42     	; 0x5da <__vector_24+0xc0>
     5b0:	88 37       	cpi	r24, 0x78	; 120
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <__vector_24+0x9c>
     5b4:	67 c0       	rjmp	.+206    	; 0x684 <__vector_24+0x16a>
     5b6:	38 f4       	brcc	.+14     	; 0x5c6 <__vector_24+0xac>
     5b8:	88 36       	cpi	r24, 0x68	; 104
     5ba:	09 f4       	brne	.+2      	; 0x5be <__vector_24+0xa4>
     5bc:	63 c0       	rjmp	.+198    	; 0x684 <__vector_24+0x16a>
     5be:	80 37       	cpi	r24, 0x70	; 112
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <__vector_24+0xaa>
     5c2:	60 c0       	rjmp	.+192    	; 0x684 <__vector_24+0x16a>
     5c4:	c6 c0       	rjmp	.+396    	; 0x752 <__vector_24+0x238>
     5c6:	88 38       	cpi	r24, 0x88	; 136
     5c8:	09 f4       	brne	.+2      	; 0x5cc <__vector_24+0xb2>
     5ca:	b5 c0       	rjmp	.+362    	; 0x736 <__vector_24+0x21c>
     5cc:	80 39       	cpi	r24, 0x90	; 144
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <__vector_24+0xb8>
     5d0:	5f c0       	rjmp	.+190    	; 0x690 <__vector_24+0x176>
     5d2:	80 38       	cpi	r24, 0x80	; 128
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <__vector_24+0xbe>
     5d6:	bd c0       	rjmp	.+378    	; 0x752 <__vector_24+0x238>
     5d8:	5b c0       	rjmp	.+182    	; 0x690 <__vector_24+0x176>
     5da:	80 3b       	cpi	r24, 0xB0	; 176
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__vector_24+0xc6>
     5de:	83 c0       	rjmp	.+262    	; 0x6e6 <__vector_24+0x1cc>
     5e0:	38 f4       	brcc	.+14     	; 0x5f0 <__vector_24+0xd6>
     5e2:	80 3a       	cpi	r24, 0xA0	; 160
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <__vector_24+0xce>
     5e6:	66 c0       	rjmp	.+204    	; 0x6b4 <__vector_24+0x19a>
     5e8:	88 3a       	cpi	r24, 0xA8	; 168
     5ea:	09 f4       	brne	.+2      	; 0x5ee <__vector_24+0xd4>
     5ec:	7c c0       	rjmp	.+248    	; 0x6e6 <__vector_24+0x1cc>
     5ee:	b1 c0       	rjmp	.+354    	; 0x752 <__vector_24+0x238>
     5f0:	80 3c       	cpi	r24, 0xC0	; 192
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <__vector_24+0xdc>
     5f4:	a4 c0       	rjmp	.+328    	; 0x73e <__vector_24+0x224>
     5f6:	88 3c       	cpi	r24, 0xC8	; 200
     5f8:	09 f4       	brne	.+2      	; 0x5fc <__vector_24+0xe2>
     5fa:	a1 c0       	rjmp	.+322    	; 0x73e <__vector_24+0x224>
     5fc:	88 3b       	cpi	r24, 0xB8	; 184
     5fe:	09 f4       	brne	.+2      	; 0x602 <__vector_24+0xe8>
     600:	87 c0       	rjmp	.+270    	; 0x710 <__vector_24+0x1f6>
     602:	a7 c0       	rjmp	.+334    	; 0x752 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     604:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <twi_slarw>
     608:	10 c0       	rjmp	.+32     	; 0x62a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     60a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <twi_masterBufferIndex>
     60e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <twi_masterBufferLength>
     612:	98 17       	cp	r25, r24
     614:	70 f5       	brcc	.+92     	; 0x672 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     616:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <twi_masterBufferIndex>
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	8e 0f       	add	r24, r30
     61e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <twi_masterBufferIndex>
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ef 53       	subi	r30, 0x3F	; 63
     626:	fe 4f       	sbci	r31, 0xFE	; 254
     628:	80 81       	ld	r24, Z
     62a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     62e:	85 ec       	ldi	r24, 0xC5	; 197
     630:	83 c0       	rjmp	.+262    	; 0x738 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     632:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_error>
     636:	8b c0       	rjmp	.+278    	; 0x74e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     638:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <twi_masterBufferIndex>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	8e 0f       	add	r24, r30
     640:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <twi_masterBufferIndex>
     644:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ef 53       	subi	r30, 0x3F	; 63
     64c:	fe 4f       	sbci	r31, 0xFE	; 254
     64e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     650:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <twi_masterBufferIndex>
     654:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <twi_masterBufferLength>
     658:	6b c0       	rjmp	.+214    	; 0x730 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     65a:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <twi_masterBufferIndex>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	8e 0f       	add	r24, r30
     662:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <twi_masterBufferIndex>
     666:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ef 53       	subi	r30, 0x3F	; 63
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	80 83       	st	Z, r24
	if (twi_sendStop)
     672:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <twi_sendStop>
     676:	81 11       	cpse	r24, r1
     678:	6a c0       	rjmp	.+212    	; 0x74e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     680:	84 ea       	ldi	r24, 0xA4	; 164
     682:	5e c0       	rjmp	.+188    	; 0x740 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     68a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <twi_rxBufferIndex>
     68e:	cf cf       	rjmp	.-98     	; 0x62e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     690:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <twi_rxBufferIndex>
     694:	80 32       	cpi	r24, 0x20	; 32
     696:	08 f0       	brcs	.+2      	; 0x69a <__vector_24+0x180>
     698:	4e c0       	rjmp	.+156    	; 0x736 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     69a:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <twi_rxBufferIndex>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	8e 0f       	add	r24, r30
     6a2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <twi_rxBufferIndex>
     6a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	e3 58       	subi	r30, 0x83	; 131
     6ae:	fe 4f       	sbci	r31, 0xFE	; 254
     6b0:	80 83       	st	Z, r24
     6b2:	bd cf       	rjmp	.-134    	; 0x62e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     6b4:	0e 94 87 02 	call	0x50e	; 0x50e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6b8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <twi_rxBufferIndex>
     6bc:	80 32       	cpi	r24, 0x20	; 32
     6be:	30 f4       	brcc	.+12     	; 0x6cc <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     6c0:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <twi_rxBufferIndex>
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	e3 58       	subi	r30, 0x83	; 131
     6c8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ca:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     6cc:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <twi_rxBufferIndex>
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <twi_onSlaveReceive>
     6d6:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <twi_onSlaveReceive+0x1>
     6da:	8d e7       	ldi	r24, 0x7D	; 125
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     6e0:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <twi_rxBufferIndex>
      break;
     6e4:	36 c0       	rjmp	.+108    	; 0x752 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     6ec:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     6f0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     6f4:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <twi_onSlaveTransmit>
     6f8:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <twi_onSlaveTransmit+0x1>
     6fc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     6fe:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <twi_txBufferLength>
     702:	81 11       	cpse	r24, r1
     704:	05 c0       	rjmp	.+10     	; 0x710 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     70c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     710:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <twi_txBufferIndex>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	8e 0f       	add	r24, r30
     718:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <twi_txBufferIndex>
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	e1 56       	subi	r30, 0x61	; 97
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	80 81       	ld	r24, Z
     724:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     728:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <twi_txBufferIndex>
     72c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <twi_txBufferLength>
     730:	98 17       	cp	r25, r24
     732:	08 f4       	brcc	.+2      	; 0x736 <__vector_24+0x21c>
     734:	7c cf       	rjmp	.-264    	; 0x62e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     736:	85 e8       	ldi	r24, 0x85	; 133
     738:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     73c:	0a c0       	rjmp	.+20     	; 0x752 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     73e:	85 ec       	ldi	r24, 0xC5	; 197
     740:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     744:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <twi_state>
      break;
     748:	04 c0       	rjmp	.+8      	; 0x752 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     74a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_error>
      twi_stop();
     74e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_stop>
      break;
  }
}
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <_ZN5Print17availableForWriteEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	08 95       	ret

0000077a <_ZN7TwoWire9availableEv>:
     77a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_ZN7TwoWire14rxBufferLengthE>
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <_ZN7TwoWire13rxBufferIndexE>
     784:	82 1b       	sub	r24, r18
     786:	91 09       	sbc	r25, r1
     788:	08 95       	ret

0000078a <_ZN7TwoWire4readEv>:
     78a:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_ZN7TwoWire13rxBufferIndexE>
     78e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_ZN7TwoWire14rxBufferLengthE>
     792:	98 17       	cp	r25, r24
     794:	50 f4       	brcc	.+20     	; 0x7aa <_ZN7TwoWire4readEv+0x20>
     796:	e9 2f       	mov	r30, r25
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	e2 5e       	subi	r30, 0xE2	; 226
     79c:	fd 4f       	sbci	r31, 0xFD	; 253
     79e:	20 81       	ld	r18, Z
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	9f 5f       	subi	r25, 0xFF	; 255
     7a4:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_ZN7TwoWire13rxBufferIndexE>
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_ZN7TwoWire4readEv+0x24>
     7aa:	2f ef       	ldi	r18, 0xFF	; 255
     7ac:	3f ef       	ldi	r19, 0xFF	; 255
     7ae:	c9 01       	movw	r24, r18
     7b0:	08 95       	ret

000007b2 <_ZN7TwoWire4peekEv>:
     7b2:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <_ZN7TwoWire13rxBufferIndexE>
     7b6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_ZN7TwoWire14rxBufferLengthE>
     7ba:	e8 17       	cp	r30, r24
     7bc:	30 f4       	brcc	.+12     	; 0x7ca <_ZN7TwoWire4peekEv+0x18>
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	e2 5e       	subi	r30, 0xE2	; 226
     7c2:	fd 4f       	sbci	r31, 0xFD	; 253
     7c4:	80 81       	ld	r24, Z
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	08 95       	ret
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	08 95       	ret

000007d0 <_ZN7TwoWire5flushEv>:
     7d0:	08 95       	ret

000007d2 <_ZN7TwoWire16onReceiveServiceEPhi>:
     7d2:	ac 01       	movw	r20, r24
     7d4:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <_ZN7TwoWire14user_onReceiveE>
     7d8:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <_ZN7TwoWire14user_onReceiveE+0x1>
     7dc:	30 97       	sbiw	r30, 0x00	; 0
     7de:	e1 f0       	breq	.+56     	; 0x818 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
     7e0:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_ZN7TwoWire13rxBufferIndexE>
     7e4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_ZN7TwoWire14rxBufferLengthE>
     7e8:	98 17       	cp	r25, r24
     7ea:	b0 f0       	brcs	.+44     	; 0x818 <_ZN7TwoWire16onReceiveServiceEPhi+0x46>
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	29 2f       	mov	r18, r25
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	26 17       	cp	r18, r22
     7f4:	37 07       	cpc	r19, r23
     7f6:	54 f4       	brge	.+20     	; 0x80c <_ZN7TwoWire16onReceiveServiceEPhi+0x3a>
     7f8:	da 01       	movw	r26, r20
     7fa:	a2 0f       	add	r26, r18
     7fc:	b3 1f       	adc	r27, r19
     7fe:	8c 91       	ld	r24, X
     800:	d9 01       	movw	r26, r18
     802:	a2 5e       	subi	r26, 0xE2	; 226
     804:	bd 4f       	sbci	r27, 0xFD	; 253
     806:	8c 93       	st	X, r24
     808:	9f 5f       	subi	r25, 0xFF	; 255
     80a:	f1 cf       	rjmp	.-30     	; 0x7ee <_ZN7TwoWire16onReceiveServiceEPhi+0x1c>
     80c:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_ZN7TwoWire13rxBufferIndexE>
     810:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <_ZN7TwoWire14rxBufferLengthE>
     814:	cb 01       	movw	r24, r22
     816:	09 94       	ijmp
     818:	08 95       	ret

0000081a <_ZN7TwoWire16onRequestServiceEv>:
     81a:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <_ZN7TwoWire14user_onRequestE>
     81e:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <_ZN7TwoWire14user_onRequestE+0x1>
     822:	30 97       	sbiw	r30, 0x00	; 0
     824:	29 f0       	breq	.+10     	; 0x830 <_ZN7TwoWire16onRequestServiceEv+0x16>
     826:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <_ZN7TwoWire13txBufferIndexE>
     82a:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <_ZN7TwoWire14txBufferLengthE>
     82e:	09 94       	ijmp
     830:	08 95       	ret

00000832 <_ZN7TwoWire5writeEPKhj>:
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	7c 01       	movw	r14, r24
     844:	26 2f       	mov	r18, r22
     846:	97 2f       	mov	r25, r23
     848:	8a 01       	movw	r16, r20
     84a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZN7TwoWire12transmittingE>
     84e:	88 23       	and	r24, r24
     850:	91 f0       	breq	.+36     	; 0x876 <_ZN7TwoWire5writeEPKhj+0x44>
     852:	c6 2f       	mov	r28, r22
     854:	d7 2f       	mov	r29, r23
     856:	6e 01       	movw	r12, r28
     858:	c4 0e       	add	r12, r20
     85a:	d5 1e       	adc	r13, r21
     85c:	cc 15       	cp	r28, r12
     85e:	dd 05       	cpc	r29, r13
     860:	71 f0       	breq	.+28     	; 0x87e <_ZN7TwoWire5writeEPKhj+0x4c>
     862:	69 91       	ld	r22, Y+
     864:	d7 01       	movw	r26, r14
     866:	ed 91       	ld	r30, X+
     868:	fc 91       	ld	r31, X
     86a:	01 90       	ld	r0, Z+
     86c:	f0 81       	ld	r31, Z
     86e:	e0 2d       	mov	r30, r0
     870:	c7 01       	movw	r24, r14
     872:	09 95       	icall
     874:	f3 cf       	rjmp	.-26     	; 0x85c <_ZN7TwoWire5writeEPKhj+0x2a>
     876:	64 2f       	mov	r22, r20
     878:	82 2f       	mov	r24, r18
     87a:	0e 94 4b 02 	call	0x496	; 0x496 <twi_transmit>
     87e:	c8 01       	movw	r24, r16
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	08 95       	ret

00000892 <_ZN7TwoWire5writeEh>:
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	1f 92       	push	r1
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	69 83       	std	Y+1, r22	; 0x01
     89e:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <_ZN7TwoWire12transmittingE>
     8a2:	22 23       	and	r18, r18
     8a4:	d1 f0       	breq	.+52     	; 0x8da <_ZN7TwoWire5writeEh+0x48>
     8a6:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <_ZN7TwoWire14txBufferLengthE>
     8aa:	20 32       	cpi	r18, 0x20	; 32
     8ac:	40 f0       	brcs	.+16     	; 0x8be <_ZN7TwoWire5writeEh+0x2c>
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	33 83       	std	Z+3, r19	; 0x03
     8b6:	22 83       	std	Z+2, r18	; 0x02
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	15 c0       	rjmp	.+42     	; 0x8e8 <_ZN7TwoWire5writeEh+0x56>
     8be:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <_ZN7TwoWire13txBufferIndexE>
     8c2:	e8 2f       	mov	r30, r24
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	e4 50       	subi	r30, 0x04	; 4
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	99 81       	ldd	r25, Y+1	; 0x01
     8cc:	90 83       	st	Z, r25
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <_ZN7TwoWire13txBufferIndexE>
     8d4:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <_ZN7TwoWire14txBufferLengthE>
     8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <_ZN7TwoWire5writeEh+0x52>
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 4b 02 	call	0x496	; 0x496 <twi_transmit>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0f 90       	pop	r0
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <_ZN7TwoWireC1Ev>:
     8f0:	fc 01       	movw	r30, r24
     8f2:	13 82       	std	Z+3, r1	; 0x03
     8f4:	12 82       	std	Z+2, r1	; 0x02
     8f6:	88 ee       	ldi	r24, 0xE8	; 232
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	84 83       	std	Z+4, r24	; 0x04
     900:	95 83       	std	Z+5, r25	; 0x05
     902:	a6 83       	std	Z+6, r26	; 0x06
     904:	b7 83       	std	Z+7, r27	; 0x07
     906:	80 e3       	ldi	r24, 0x30	; 48
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	80 83       	st	Z, r24
     90e:	08 95       	ret

00000910 <_ZN7TwoWire5beginEv>:
     910:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_ZN7TwoWire13rxBufferIndexE>
     914:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <_ZN7TwoWire14rxBufferLengthE>
     918:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <_ZN7TwoWire13txBufferIndexE>
     91c:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <_ZN7TwoWire14txBufferLengthE>
     920:	0c 94 29 02 	jmp	0x452	; 0x452 <twi_init>

00000924 <_ZN7TwoWire5beginEh>:
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
     92a:	86 2f       	mov	r24, r22
     92c:	0e 94 47 02 	call	0x48e	; 0x48e <twi_setAddress>
     930:	8d e0       	ldi	r24, 0x0D	; 13
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	0e 94 78 02 	call	0x4f0	; 0x4f0 <twi_attachSlaveTxEvent>
     938:	89 ee       	ldi	r24, 0xE9	; 233
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <twi_attachSlaveRxEvent>
     940:	ce 01       	movw	r24, r28
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	0c 94 88 04 	jmp	0x910	; 0x910 <_ZN7TwoWire5beginEv>

0000094a <_ZN7TwoWire5beginEi>:
     94a:	0c 94 92 04 	jmp	0x924	; 0x924 <_ZN7TwoWire5beginEh>

0000094e <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
     94e:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <_ZN7TwoWire14user_onReceiveE+0x1>
     952:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <_ZN7TwoWire14user_onReceiveE>
     956:	08 95       	ret

00000958 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     958:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <_ZN7TwoWire14user_onRequestE+0x1>
     95c:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <_ZN7TwoWire14user_onRequestE>
     960:	08 95       	ret

00000962 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     962:	89 ee       	ldi	r24, 0xE9	; 233
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_ZN7TwoWireC1Ev>

0000096a <_ZL7nothingv>:
{
	
	setMode(_mode,_time);
	Timer1();
	# warning "Mode set completely!"
} //Timer1
     96a:	08 95       	ret

0000096c <_ZN6Timer116select_prescalerEf>:
     96c:	2f 92       	push	r2
     96e:	3f 92       	push	r3
     970:	4f 92       	push	r4
     972:	5f 92       	push	r5
     974:	6f 92       	push	r6
     976:	7f 92       	push	r7
     978:	8f 92       	push	r8
     97a:	9f 92       	push	r9
     97c:	af 92       	push	r10
     97e:	bf 92       	push	r11
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	2c 97       	sbiw	r28, 0x0c	; 12
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	1c 01       	movw	r2, r24
     9a2:	4a 01       	movw	r8, r20
     9a4:	5b 01       	movw	r10, r22
     9a6:	8a e0       	ldi	r24, 0x0A	; 10
     9a8:	e5 e1       	ldi	r30, 0x15	; 21
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
     9ac:	de 01       	movw	r26, r28
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	01 90       	ld	r0, Z+
     9b2:	0d 92       	st	X+, r0
     9b4:	8a 95       	dec	r24
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <_ZN6Timer116select_prescalerEf+0x44>
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	9c 87       	std	Y+12, r25	; 0x0c
     9be:	8b 87       	std	Y+11, r24	; 0x0b
     9c0:	00 e0       	ldi	r16, 0x00	; 0
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	30 e8       	ldi	r19, 0x80	; 128
     9c6:	43 2e       	mov	r4, r19
     9c8:	3e e3       	ldi	r19, 0x3E	; 62
     9ca:	53 2e       	mov	r5, r19
     9cc:	61 2c       	mov	r6, r1
     9ce:	71 2c       	mov	r7, r1
     9d0:	eb 85       	ldd	r30, Y+11	; 0x0b
     9d2:	fc 85       	ldd	r31, Y+12	; 0x0c
     9d4:	61 91       	ld	r22, Z+
     9d6:	71 91       	ld	r23, Z+
     9d8:	fc 87       	std	Y+12, r31	; 0x0c
     9da:	eb 87       	std	Y+11, r30	; 0x0b
     9dc:	cb 01       	movw	r24, r22
     9de:	77 0f       	add	r23, r23
     9e0:	aa 0b       	sbc	r26, r26
     9e2:	bb 0b       	sbc	r27, r27
     9e4:	77 27       	eor	r23, r23
     9e6:	66 27       	eor	r22, r22
     9e8:	a3 01       	movw	r20, r6
     9ea:	92 01       	movw	r18, r4
     9ec:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__divmodsi4>
     9f0:	69 01       	movw	r12, r18
     9f2:	7a 01       	movw	r14, r20
     9f4:	b9 01       	movw	r22, r18
     9f6:	33 0f       	add	r19, r19
     9f8:	88 0b       	sbc	r24, r24
     9fa:	99 0b       	sbc	r25, r25
     9fc:	0e 94 a1 06 	call	0xd42	; 0xd42 <__floatsisf>
     a00:	a5 01       	movw	r20, r10
     a02:	94 01       	movw	r18, r8
     a04:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__gesf2>
     a08:	18 16       	cp	r1, r24
     a0a:	2c f0       	brlt	.+10     	; 0xa16 <_ZN6Timer116select_prescalerEf+0xaa>
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	05 30       	cpi	r16, 0x05	; 5
     a12:	11 05       	cpc	r17, r1
     a14:	e9 f6       	brne	.-70     	; 0x9d0 <_ZN6Timer116select_prescalerEf+0x64>
     a16:	f1 01       	movw	r30, r2
     a18:	d1 86       	std	Z+9, r13	; 0x09
     a1a:	c0 86       	std	Z+8, r12	; 0x08
     a1c:	00 0f       	add	r16, r16
     a1e:	11 1f       	adc	r17, r17
     a20:	e1 e0       	ldi	r30, 0x01	; 1
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	ec 0f       	add	r30, r28
     a26:	fd 1f       	adc	r31, r29
     a28:	e0 0f       	add	r30, r16
     a2a:	f1 1f       	adc	r31, r17
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	2c 96       	adiw	r28, 0x0c	; 12
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
     a52:	8f 90       	pop	r8
     a54:	7f 90       	pop	r7
     a56:	6f 90       	pop	r6
     a58:	5f 90       	pop	r5
     a5a:	4f 90       	pop	r4
     a5c:	3f 90       	pop	r3
     a5e:	2f 90       	pop	r2
     a60:	08 95       	ret

00000a62 <_ZN6Timer1C1Ev>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	62 e5       	ldi	r22, 0x52	; 82
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN6StringC1EPKc>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	9f 83       	std	Y+7, r25	; 0x07
     a76:	8e 83       	std	Y+6, r24	; 0x06
     a78:	19 86       	std	Y+9, r1	; 0x09
     a7a:	18 86       	std	Y+8, r1	; 0x08
     a7c:	1b 86       	std	Y+11, r1	; 0x0b
     a7e:	1a 86       	std	Y+10, r1	; 0x0a
     a80:	8f b7       	in	r24, 0x3f	; 63
     a82:	80 68       	ori	r24, 0x80	; 128
     a84:	8f bf       	out	0x3f, r24	; 63
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <_ZN6Timer17setModeE6Stringf>:
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	8b 01       	movw	r16, r22
     aa0:	69 01       	movw	r12, r18
     aa2:	7a 01       	movw	r14, r20
     aa4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN6StringaSERKS_>
     aa8:	b7 01       	movw	r22, r14
     aaa:	a6 01       	movw	r20, r12
     aac:	ce 01       	movw	r24, r28
     aae:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN6Timer116select_prescalerEf>
     ab2:	9f 83       	std	Y+7, r25	; 0x07
     ab4:	8e 83       	std	Y+6, r24	; 0x06
     ab6:	c8 01       	movw	r24, r16
     ab8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN6String11toUpperCaseEv>
     abc:	6f e1       	ldi	r22, 0x1F	; 31
     abe:	71 e0       	ldi	r23, 0x01	; 1
     ac0:	c8 01       	movw	r24, r16
     ac2:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZNK6String6equalsEPKc>
     ac6:	88 23       	and	r24, r24
     ac8:	09 f4       	brne	.+2      	; 0xacc <_ZN6Timer17setModeE6Stringf+0x40>
     aca:	5a c0       	rjmp	.+180    	; 0xb80 <_ZN6Timer17setModeE6Stringf+0xf4>
     acc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ad0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ad4:	88 e0       	ldi	r24, 0x08	; 8
     ad6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	9f 81       	ldd	r25, Y+7	; 0x07
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	29 f4       	brne	.+10     	; 0xaec <_ZN6Timer17setModeE6Stringf+0x60>
     ae2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     aec:	8e 81       	ldd	r24, Y+6	; 0x06
     aee:	9f 81       	ldd	r25, Y+7	; 0x07
     af0:	08 97       	sbiw	r24, 0x08	; 8
     af2:	29 f4       	brne	.+10     	; 0xafe <_ZN6Timer17setModeE6Stringf+0x72>
     af4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     af8:	82 60       	ori	r24, 0x02	; 2
     afa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     afe:	8e 81       	ldd	r24, Y+6	; 0x06
     b00:	9f 81       	ldd	r25, Y+7	; 0x07
     b02:	80 34       	cpi	r24, 0x40	; 64
     b04:	91 05       	cpc	r25, r1
     b06:	29 f4       	brne	.+10     	; 0xb12 <_ZN6Timer17setModeE6Stringf+0x86>
     b08:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b0c:	83 60       	ori	r24, 0x03	; 3
     b0e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b12:	8e 81       	ldd	r24, Y+6	; 0x06
     b14:	9f 81       	ldd	r25, Y+7	; 0x07
     b16:	81 15       	cp	r24, r1
     b18:	91 40       	sbci	r25, 0x01	; 1
     b1a:	29 f4       	brne	.+10     	; 0xb26 <_ZN6Timer17setModeE6Stringf+0x9a>
     b1c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b20:	84 60       	ori	r24, 0x04	; 4
     b22:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b26:	8e 81       	ldd	r24, Y+6	; 0x06
     b28:	9f 81       	ldd	r25, Y+7	; 0x07
     b2a:	81 15       	cp	r24, r1
     b2c:	94 40       	sbci	r25, 0x04	; 4
     b2e:	29 f4       	brne	.+10     	; 0xb3a <_ZN6Timer17setModeE6Stringf+0xae>
     b30:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b34:	85 60       	ori	r24, 0x05	; 5
     b36:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	4a e7       	ldi	r20, 0x7A	; 122
     b40:	56 e4       	ldi	r21, 0x46	; 70
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	0e 94 32 07 	call	0xe64	; 0xe64 <__mulsf3>
     b4a:	6b 01       	movw	r12, r22
     b4c:	7c 01       	movw	r14, r24
     b4e:	8e 81       	ldd	r24, Y+6	; 0x06
     b50:	9f 81       	ldd	r25, Y+7	; 0x07
     b52:	bc 01       	movw	r22, r24
     b54:	99 0f       	add	r25, r25
     b56:	88 0b       	sbc	r24, r24
     b58:	99 0b       	sbc	r25, r25
     b5a:	0e 94 a1 06 	call	0xd42	; 0xd42 <__floatsisf>
     b5e:	9b 01       	movw	r18, r22
     b60:	ac 01       	movw	r20, r24
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	0e 94 f7 05 	call	0xbee	; 0xbee <__divsf3>
     b6a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fixsfsi>
     b6e:	7b 87       	std	Y+11, r23	; 0x0b
     b70:	6a 87       	std	Y+10, r22	; 0x0a
     b72:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b76:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	08 95       	ret

00000b92 <_ZN6Timer115attachInterruptEPFvvE>:
	}
}

void Timer1::attachInterrupt(void (*userFunc)(void))
{
	_intFunc = userFunc;
     b92:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <_ZL8_intFunc+0x1>
     b96:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <_ZL8_intFunc>
     b9a:	08 95       	ret

00000b9c <_ZN6Timer1D1Ev>:
}

// default destructor
Timer1::~Timer1()
     b9c:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <_ZN6StringD1Ev>

00000ba0 <__vector_11>:
{
} //~Timer1

ISR (TIMER1_COMPA_vect)
{
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
	_intFunc();
     bc2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <_ZL8_intFunc>
     bc6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <_ZL8_intFunc+0x1>
     bca:	09 95       	icall
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <__divsf3>:
     bee:	0e 94 0b 06 	call	0xc16	; 0xc16 <__divsf3x>
     bf2:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_round>
     bf6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_pscB>
     bfa:	58 f0       	brcs	.+22     	; 0xc12 <__divsf3+0x24>
     bfc:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscA>
     c00:	40 f0       	brcs	.+16     	; 0xc12 <__divsf3+0x24>
     c02:	29 f4       	brne	.+10     	; 0xc0e <__divsf3+0x20>
     c04:	5f 3f       	cpi	r21, 0xFF	; 255
     c06:	29 f0       	breq	.+10     	; 0xc12 <__divsf3+0x24>
     c08:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
     c0c:	51 11       	cpse	r21, r1
     c0e:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     c12:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_nan>

00000c16 <__divsf3x>:
     c16:	0e 94 04 07 	call	0xe08	; 0xe08 <__fp_split3>
     c1a:	68 f3       	brcs	.-38     	; 0xbf6 <__divsf3+0x8>

00000c1c <__divsf3_pse>:
     c1c:	99 23       	and	r25, r25
     c1e:	b1 f3       	breq	.-20     	; 0xc0c <__divsf3+0x1e>
     c20:	55 23       	and	r21, r21
     c22:	91 f3       	breq	.-28     	; 0xc08 <__divsf3+0x1a>
     c24:	95 1b       	sub	r25, r21
     c26:	55 0b       	sbc	r21, r21
     c28:	bb 27       	eor	r27, r27
     c2a:	aa 27       	eor	r26, r26
     c2c:	62 17       	cp	r22, r18
     c2e:	73 07       	cpc	r23, r19
     c30:	84 07       	cpc	r24, r20
     c32:	38 f0       	brcs	.+14     	; 0xc42 <__divsf3_pse+0x26>
     c34:	9f 5f       	subi	r25, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	44 1f       	adc	r20, r20
     c3e:	aa 1f       	adc	r26, r26
     c40:	a9 f3       	breq	.-22     	; 0xc2c <__divsf3_pse+0x10>
     c42:	35 d0       	rcall	.+106    	; 0xcae <__divsf3_pse+0x92>
     c44:	0e 2e       	mov	r0, r30
     c46:	3a f0       	brmi	.+14     	; 0xc56 <__divsf3_pse+0x3a>
     c48:	e0 e8       	ldi	r30, 0x80	; 128
     c4a:	32 d0       	rcall	.+100    	; 0xcb0 <__divsf3_pse+0x94>
     c4c:	91 50       	subi	r25, 0x01	; 1
     c4e:	50 40       	sbci	r21, 0x00	; 0
     c50:	e6 95       	lsr	r30
     c52:	00 1c       	adc	r0, r0
     c54:	ca f7       	brpl	.-14     	; 0xc48 <__divsf3_pse+0x2c>
     c56:	2b d0       	rcall	.+86     	; 0xcae <__divsf3_pse+0x92>
     c58:	fe 2f       	mov	r31, r30
     c5a:	29 d0       	rcall	.+82     	; 0xcae <__divsf3_pse+0x92>
     c5c:	66 0f       	add	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	bb 1f       	adc	r27, r27
     c64:	26 17       	cp	r18, r22
     c66:	37 07       	cpc	r19, r23
     c68:	48 07       	cpc	r20, r24
     c6a:	ab 07       	cpc	r26, r27
     c6c:	b0 e8       	ldi	r27, 0x80	; 128
     c6e:	09 f0       	breq	.+2      	; 0xc72 <__divsf3_pse+0x56>
     c70:	bb 0b       	sbc	r27, r27
     c72:	80 2d       	mov	r24, r0
     c74:	bf 01       	movw	r22, r30
     c76:	ff 27       	eor	r31, r31
     c78:	93 58       	subi	r25, 0x83	; 131
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
     c7c:	3a f0       	brmi	.+14     	; 0xc8c <__divsf3_pse+0x70>
     c7e:	9e 3f       	cpi	r25, 0xFE	; 254
     c80:	51 05       	cpc	r21, r1
     c82:	78 f0       	brcs	.+30     	; 0xca2 <__divsf3_pse+0x86>
     c84:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
     c88:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     c8c:	5f 3f       	cpi	r21, 0xFF	; 255
     c8e:	e4 f3       	brlt	.-8      	; 0xc88 <__divsf3_pse+0x6c>
     c90:	98 3e       	cpi	r25, 0xE8	; 232
     c92:	d4 f3       	brlt	.-12     	; 0xc88 <__divsf3_pse+0x6c>
     c94:	86 95       	lsr	r24
     c96:	77 95       	ror	r23
     c98:	67 95       	ror	r22
     c9a:	b7 95       	ror	r27
     c9c:	f7 95       	ror	r31
     c9e:	9f 5f       	subi	r25, 0xFF	; 255
     ca0:	c9 f7       	brne	.-14     	; 0xc94 <__divsf3_pse+0x78>
     ca2:	88 0f       	add	r24, r24
     ca4:	91 1d       	adc	r25, r1
     ca6:	96 95       	lsr	r25
     ca8:	87 95       	ror	r24
     caa:	97 f9       	bld	r25, 7
     cac:	08 95       	ret
     cae:	e1 e0       	ldi	r30, 0x01	; 1
     cb0:	66 0f       	add	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	bb 1f       	adc	r27, r27
     cb8:	62 17       	cp	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	ba 07       	cpc	r27, r26
     cc0:	20 f0       	brcs	.+8      	; 0xcca <__divsf3_pse+0xae>
     cc2:	62 1b       	sub	r22, r18
     cc4:	73 0b       	sbc	r23, r19
     cc6:	84 0b       	sbc	r24, r20
     cc8:	ba 0b       	sbc	r27, r26
     cca:	ee 1f       	adc	r30, r30
     ccc:	88 f7       	brcc	.-30     	; 0xcb0 <__divsf3_pse+0x94>
     cce:	e0 95       	com	r30
     cd0:	08 95       	ret

00000cd2 <__fixsfsi>:
     cd2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
     cd6:	68 94       	set
     cd8:	b1 11       	cpse	r27, r1
     cda:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     cde:	08 95       	ret

00000ce0 <__fixunssfsi>:
     ce0:	0e 94 0c 07 	call	0xe18	; 0xe18 <__fp_splitA>
     ce4:	88 f0       	brcs	.+34     	; 0xd08 <__fixunssfsi+0x28>
     ce6:	9f 57       	subi	r25, 0x7F	; 127
     ce8:	98 f0       	brcs	.+38     	; 0xd10 <__fixunssfsi+0x30>
     cea:	b9 2f       	mov	r27, r25
     cec:	99 27       	eor	r25, r25
     cee:	b7 51       	subi	r27, 0x17	; 23
     cf0:	b0 f0       	brcs	.+44     	; 0xd1e <__fixunssfsi+0x3e>
     cf2:	e1 f0       	breq	.+56     	; 0xd2c <__fixunssfsi+0x4c>
     cf4:	66 0f       	add	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	88 1f       	adc	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	1a f0       	brmi	.+6      	; 0xd04 <__fixunssfsi+0x24>
     cfe:	ba 95       	dec	r27
     d00:	c9 f7       	brne	.-14     	; 0xcf4 <__fixunssfsi+0x14>
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <__fixunssfsi+0x4c>
     d04:	b1 30       	cpi	r27, 0x01	; 1
     d06:	91 f0       	breq	.+36     	; 0xd2c <__fixunssfsi+0x4c>
     d08:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_zero>
     d0c:	b1 e0       	ldi	r27, 0x01	; 1
     d0e:	08 95       	ret
     d10:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_zero>
     d14:	67 2f       	mov	r22, r23
     d16:	78 2f       	mov	r23, r24
     d18:	88 27       	eor	r24, r24
     d1a:	b8 5f       	subi	r27, 0xF8	; 248
     d1c:	39 f0       	breq	.+14     	; 0xd2c <__fixunssfsi+0x4c>
     d1e:	b9 3f       	cpi	r27, 0xF9	; 249
     d20:	cc f3       	brlt	.-14     	; 0xd14 <__fixunssfsi+0x34>
     d22:	86 95       	lsr	r24
     d24:	77 95       	ror	r23
     d26:	67 95       	ror	r22
     d28:	b3 95       	inc	r27
     d2a:	d9 f7       	brne	.-10     	; 0xd22 <__fixunssfsi+0x42>
     d2c:	3e f4       	brtc	.+14     	; 0xd3c <__fixunssfsi+0x5c>
     d2e:	90 95       	com	r25
     d30:	80 95       	com	r24
     d32:	70 95       	com	r23
     d34:	61 95       	neg	r22
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	8f 4f       	sbci	r24, 0xFF	; 255
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	08 95       	ret

00000d3e <__floatunsisf>:
     d3e:	e8 94       	clt
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__floatsisf+0x12>

00000d42 <__floatsisf>:
     d42:	97 fb       	bst	r25, 7
     d44:	3e f4       	brtc	.+14     	; 0xd54 <__floatsisf+0x12>
     d46:	90 95       	com	r25
     d48:	80 95       	com	r24
     d4a:	70 95       	com	r23
     d4c:	61 95       	neg	r22
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	8f 4f       	sbci	r24, 0xFF	; 255
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	99 23       	and	r25, r25
     d56:	a9 f0       	breq	.+42     	; 0xd82 <__floatsisf+0x40>
     d58:	f9 2f       	mov	r31, r25
     d5a:	96 e9       	ldi	r25, 0x96	; 150
     d5c:	bb 27       	eor	r27, r27
     d5e:	93 95       	inc	r25
     d60:	f6 95       	lsr	r31
     d62:	87 95       	ror	r24
     d64:	77 95       	ror	r23
     d66:	67 95       	ror	r22
     d68:	b7 95       	ror	r27
     d6a:	f1 11       	cpse	r31, r1
     d6c:	f8 cf       	rjmp	.-16     	; 0xd5e <__floatsisf+0x1c>
     d6e:	fa f4       	brpl	.+62     	; 0xdae <__floatsisf+0x6c>
     d70:	bb 0f       	add	r27, r27
     d72:	11 f4       	brne	.+4      	; 0xd78 <__floatsisf+0x36>
     d74:	60 ff       	sbrs	r22, 0
     d76:	1b c0       	rjmp	.+54     	; 0xdae <__floatsisf+0x6c>
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	8f 4f       	sbci	r24, 0xFF	; 255
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	16 c0       	rjmp	.+44     	; 0xdae <__floatsisf+0x6c>
     d82:	88 23       	and	r24, r24
     d84:	11 f0       	breq	.+4      	; 0xd8a <__floatsisf+0x48>
     d86:	96 e9       	ldi	r25, 0x96	; 150
     d88:	11 c0       	rjmp	.+34     	; 0xdac <__floatsisf+0x6a>
     d8a:	77 23       	and	r23, r23
     d8c:	21 f0       	breq	.+8      	; 0xd96 <__floatsisf+0x54>
     d8e:	9e e8       	ldi	r25, 0x8E	; 142
     d90:	87 2f       	mov	r24, r23
     d92:	76 2f       	mov	r23, r22
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <__floatsisf+0x5e>
     d96:	66 23       	and	r22, r22
     d98:	71 f0       	breq	.+28     	; 0xdb6 <__floatsisf+0x74>
     d9a:	96 e8       	ldi	r25, 0x86	; 134
     d9c:	86 2f       	mov	r24, r22
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	2a f0       	brmi	.+10     	; 0xdae <__floatsisf+0x6c>
     da4:	9a 95       	dec	r25
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	da f7       	brpl	.-10     	; 0xda4 <__floatsisf+0x62>
     dae:	88 0f       	add	r24, r24
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	97 f9       	bld	r25, 7
     db6:	08 95       	ret

00000db8 <__fp_inf>:
     db8:	97 f9       	bld	r25, 7
     dba:	9f 67       	ori	r25, 0x7F	; 127
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	08 95       	ret

00000dc4 <__fp_nan>:
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	80 ec       	ldi	r24, 0xC0	; 192
     dc8:	08 95       	ret

00000dca <__fp_pscA>:
     dca:	00 24       	eor	r0, r0
     dcc:	0a 94       	dec	r0
     dce:	16 16       	cp	r1, r22
     dd0:	17 06       	cpc	r1, r23
     dd2:	18 06       	cpc	r1, r24
     dd4:	09 06       	cpc	r0, r25
     dd6:	08 95       	ret

00000dd8 <__fp_pscB>:
     dd8:	00 24       	eor	r0, r0
     dda:	0a 94       	dec	r0
     ddc:	12 16       	cp	r1, r18
     dde:	13 06       	cpc	r1, r19
     de0:	14 06       	cpc	r1, r20
     de2:	05 06       	cpc	r0, r21
     de4:	08 95       	ret

00000de6 <__fp_round>:
     de6:	09 2e       	mov	r0, r25
     de8:	03 94       	inc	r0
     dea:	00 0c       	add	r0, r0
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__fp_round+0xc>
     dee:	88 23       	and	r24, r24
     df0:	52 f0       	brmi	.+20     	; 0xe06 <__fp_round+0x20>
     df2:	bb 0f       	add	r27, r27
     df4:	40 f4       	brcc	.+16     	; 0xe06 <__fp_round+0x20>
     df6:	bf 2b       	or	r27, r31
     df8:	11 f4       	brne	.+4      	; 0xdfe <__fp_round+0x18>
     dfa:	60 ff       	sbrs	r22, 0
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <__fp_round+0x20>
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	08 95       	ret

00000e08 <__fp_split3>:
     e08:	57 fd       	sbrc	r21, 7
     e0a:	90 58       	subi	r25, 0x80	; 128
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	59 f0       	breq	.+22     	; 0xe28 <__fp_splitA+0x10>
     e12:	5f 3f       	cpi	r21, 0xFF	; 255
     e14:	71 f0       	breq	.+28     	; 0xe32 <__fp_splitA+0x1a>
     e16:	47 95       	ror	r20

00000e18 <__fp_splitA>:
     e18:	88 0f       	add	r24, r24
     e1a:	97 fb       	bst	r25, 7
     e1c:	99 1f       	adc	r25, r25
     e1e:	61 f0       	breq	.+24     	; 0xe38 <__fp_splitA+0x20>
     e20:	9f 3f       	cpi	r25, 0xFF	; 255
     e22:	79 f0       	breq	.+30     	; 0xe42 <__fp_splitA+0x2a>
     e24:	87 95       	ror	r24
     e26:	08 95       	ret
     e28:	12 16       	cp	r1, r18
     e2a:	13 06       	cpc	r1, r19
     e2c:	14 06       	cpc	r1, r20
     e2e:	55 1f       	adc	r21, r21
     e30:	f2 cf       	rjmp	.-28     	; 0xe16 <__fp_split3+0xe>
     e32:	46 95       	lsr	r20
     e34:	f1 df       	rcall	.-30     	; 0xe18 <__fp_splitA>
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <__fp_splitA+0x30>
     e38:	16 16       	cp	r1, r22
     e3a:	17 06       	cpc	r1, r23
     e3c:	18 06       	cpc	r1, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	f1 cf       	rjmp	.-30     	; 0xe24 <__fp_splitA+0xc>
     e42:	86 95       	lsr	r24
     e44:	71 05       	cpc	r23, r1
     e46:	61 05       	cpc	r22, r1
     e48:	08 94       	sec
     e4a:	08 95       	ret

00000e4c <__fp_zero>:
     e4c:	e8 94       	clt

00000e4e <__fp_szero>:
     e4e:	bb 27       	eor	r27, r27
     e50:	66 27       	eor	r22, r22
     e52:	77 27       	eor	r23, r23
     e54:	cb 01       	movw	r24, r22
     e56:	97 f9       	bld	r25, 7
     e58:	08 95       	ret

00000e5a <__gesf2>:
     e5a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fp_cmp>
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <__gesf2+0x8>
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	08 95       	ret

00000e64 <__mulsf3>:
     e64:	0e 94 45 07 	call	0xe8a	; 0xe8a <__mulsf3x>
     e68:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_round>
     e6c:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscA>
     e70:	38 f0       	brcs	.+14     	; 0xe80 <__mulsf3+0x1c>
     e72:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_pscB>
     e76:	20 f0       	brcs	.+8      	; 0xe80 <__mulsf3+0x1c>
     e78:	95 23       	and	r25, r21
     e7a:	11 f0       	breq	.+4      	; 0xe80 <__mulsf3+0x1c>
     e7c:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
     e80:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_nan>
     e84:	11 24       	eor	r1, r1
     e86:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>

00000e8a <__mulsf3x>:
     e8a:	0e 94 04 07 	call	0xe08	; 0xe08 <__fp_split3>
     e8e:	70 f3       	brcs	.-36     	; 0xe6c <__mulsf3+0x8>

00000e90 <__mulsf3_pse>:
     e90:	95 9f       	mul	r25, r21
     e92:	c1 f3       	breq	.-16     	; 0xe84 <__mulsf3+0x20>
     e94:	95 0f       	add	r25, r21
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	55 1f       	adc	r21, r21
     e9a:	62 9f       	mul	r22, r18
     e9c:	f0 01       	movw	r30, r0
     e9e:	72 9f       	mul	r23, r18
     ea0:	bb 27       	eor	r27, r27
     ea2:	f0 0d       	add	r31, r0
     ea4:	b1 1d       	adc	r27, r1
     ea6:	63 9f       	mul	r22, r19
     ea8:	aa 27       	eor	r26, r26
     eaa:	f0 0d       	add	r31, r0
     eac:	b1 1d       	adc	r27, r1
     eae:	aa 1f       	adc	r26, r26
     eb0:	64 9f       	mul	r22, r20
     eb2:	66 27       	eor	r22, r22
     eb4:	b0 0d       	add	r27, r0
     eb6:	a1 1d       	adc	r26, r1
     eb8:	66 1f       	adc	r22, r22
     eba:	82 9f       	mul	r24, r18
     ebc:	22 27       	eor	r18, r18
     ebe:	b0 0d       	add	r27, r0
     ec0:	a1 1d       	adc	r26, r1
     ec2:	62 1f       	adc	r22, r18
     ec4:	73 9f       	mul	r23, r19
     ec6:	b0 0d       	add	r27, r0
     ec8:	a1 1d       	adc	r26, r1
     eca:	62 1f       	adc	r22, r18
     ecc:	83 9f       	mul	r24, r19
     ece:	a0 0d       	add	r26, r0
     ed0:	61 1d       	adc	r22, r1
     ed2:	22 1f       	adc	r18, r18
     ed4:	74 9f       	mul	r23, r20
     ed6:	33 27       	eor	r19, r19
     ed8:	a0 0d       	add	r26, r0
     eda:	61 1d       	adc	r22, r1
     edc:	23 1f       	adc	r18, r19
     ede:	84 9f       	mul	r24, r20
     ee0:	60 0d       	add	r22, r0
     ee2:	21 1d       	adc	r18, r1
     ee4:	82 2f       	mov	r24, r18
     ee6:	76 2f       	mov	r23, r22
     ee8:	6a 2f       	mov	r22, r26
     eea:	11 24       	eor	r1, r1
     eec:	9f 57       	subi	r25, 0x7F	; 127
     eee:	50 40       	sbci	r21, 0x00	; 0
     ef0:	9a f0       	brmi	.+38     	; 0xf18 <__mulsf3_pse+0x88>
     ef2:	f1 f0       	breq	.+60     	; 0xf30 <__mulsf3_pse+0xa0>
     ef4:	88 23       	and	r24, r24
     ef6:	4a f0       	brmi	.+18     	; 0xf0a <__mulsf3_pse+0x7a>
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	bb 1f       	adc	r27, r27
     efe:	66 1f       	adc	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	91 50       	subi	r25, 0x01	; 1
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	a9 f7       	brne	.-22     	; 0xef4 <__mulsf3_pse+0x64>
     f0a:	9e 3f       	cpi	r25, 0xFE	; 254
     f0c:	51 05       	cpc	r21, r1
     f0e:	80 f0       	brcs	.+32     	; 0xf30 <__mulsf3_pse+0xa0>
     f10:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
     f14:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
     f18:	5f 3f       	cpi	r21, 0xFF	; 255
     f1a:	e4 f3       	brlt	.-8      	; 0xf14 <__mulsf3_pse+0x84>
     f1c:	98 3e       	cpi	r25, 0xE8	; 232
     f1e:	d4 f3       	brlt	.-12     	; 0xf14 <__mulsf3_pse+0x84>
     f20:	86 95       	lsr	r24
     f22:	77 95       	ror	r23
     f24:	67 95       	ror	r22
     f26:	b7 95       	ror	r27
     f28:	f7 95       	ror	r31
     f2a:	e7 95       	ror	r30
     f2c:	9f 5f       	subi	r25, 0xFF	; 255
     f2e:	c1 f7       	brne	.-16     	; 0xf20 <__mulsf3_pse+0x90>
     f30:	fe 2b       	or	r31, r30
     f32:	88 0f       	add	r24, r24
     f34:	91 1d       	adc	r25, r1
     f36:	96 95       	lsr	r25
     f38:	87 95       	ror	r24
     f3a:	97 f9       	bld	r25, 7
     f3c:	08 95       	ret

00000f3e <__fp_cmp>:
     f3e:	99 0f       	add	r25, r25
     f40:	00 08       	sbc	r0, r0
     f42:	55 0f       	add	r21, r21
     f44:	aa 0b       	sbc	r26, r26
     f46:	e0 e8       	ldi	r30, 0x80	; 128
     f48:	fe ef       	ldi	r31, 0xFE	; 254
     f4a:	16 16       	cp	r1, r22
     f4c:	17 06       	cpc	r1, r23
     f4e:	e8 07       	cpc	r30, r24
     f50:	f9 07       	cpc	r31, r25
     f52:	c0 f0       	brcs	.+48     	; 0xf84 <__fp_cmp+0x46>
     f54:	12 16       	cp	r1, r18
     f56:	13 06       	cpc	r1, r19
     f58:	e4 07       	cpc	r30, r20
     f5a:	f5 07       	cpc	r31, r21
     f5c:	98 f0       	brcs	.+38     	; 0xf84 <__fp_cmp+0x46>
     f5e:	62 1b       	sub	r22, r18
     f60:	73 0b       	sbc	r23, r19
     f62:	84 0b       	sbc	r24, r20
     f64:	95 0b       	sbc	r25, r21
     f66:	39 f4       	brne	.+14     	; 0xf76 <__fp_cmp+0x38>
     f68:	0a 26       	eor	r0, r26
     f6a:	61 f0       	breq	.+24     	; 0xf84 <__fp_cmp+0x46>
     f6c:	23 2b       	or	r18, r19
     f6e:	24 2b       	or	r18, r20
     f70:	25 2b       	or	r18, r21
     f72:	21 f4       	brne	.+8      	; 0xf7c <__fp_cmp+0x3e>
     f74:	08 95       	ret
     f76:	0a 26       	eor	r0, r26
     f78:	09 f4       	brne	.+2      	; 0xf7c <__fp_cmp+0x3e>
     f7a:	a1 40       	sbci	r26, 0x01	; 1
     f7c:	a6 95       	lsr	r26
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	81 1d       	adc	r24, r1
     f82:	81 1d       	adc	r24, r1
     f84:	08 95       	ret

00000f86 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     f86:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     f88:	91 8d       	ldd	r25, Z+25	; 0x19
     f8a:	22 8d       	ldd	r18, Z+26	; 0x1a
     f8c:	89 2f       	mov	r24, r25
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	80 5c       	subi	r24, 0xC0	; 192
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	82 1b       	sub	r24, r18
     f96:	91 09       	sbc	r25, r1
}
     f98:	8f 73       	andi	r24, 0x3F	; 63
     f9a:	99 27       	eor	r25, r25
     f9c:	08 95       	ret

00000f9e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     f9e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     fa0:	91 8d       	ldd	r25, Z+25	; 0x19
     fa2:	82 8d       	ldd	r24, Z+26	; 0x1a
     fa4:	98 17       	cp	r25, r24
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     fa8:	82 8d       	ldd	r24, Z+26	; 0x1a
     faa:	e8 0f       	add	r30, r24
     fac:	f1 1d       	adc	r31, r1
     fae:	85 8d       	ldd	r24, Z+29	; 0x1d
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     fb8:	08 95       	ret

00000fba <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     fba:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     fbc:	91 8d       	ldd	r25, Z+25	; 0x19
     fbe:	82 8d       	ldd	r24, Z+26	; 0x1a
     fc0:	98 17       	cp	r25, r24
     fc2:	61 f0       	breq	.+24     	; 0xfdc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     fc4:	82 8d       	ldd	r24, Z+26	; 0x1a
     fc6:	df 01       	movw	r26, r30
     fc8:	a8 0f       	add	r26, r24
     fca:	b1 1d       	adc	r27, r1
     fcc:	5d 96       	adiw	r26, 0x1d	; 29
     fce:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     fd0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	9f 73       	andi	r25, 0x3F	; 63
     fd6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     fe0:	08 95       	ret

00000fe2 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     fe2:	fc 01       	movw	r30, r24
     fe4:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     fe6:	44 8d       	ldd	r20, Z+28	; 0x1c
     fe8:	25 2f       	mov	r18, r21
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	84 2f       	mov	r24, r20
     fee:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     ff0:	82 1b       	sub	r24, r18
     ff2:	93 0b       	sbc	r25, r19
     ff4:	54 17       	cp	r21, r20
     ff6:	10 f0       	brcs	.+4      	; 0xffc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     ff8:	cf 96       	adiw	r24, 0x3f	; 63
     ffa:	08 95       	ret
  return tail - head - 1;
     ffc:	01 97       	sbiw	r24, 0x01	; 1
}
     ffe:	08 95       	ret

00001000 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1000:	85 e5       	ldi	r24, 0x55	; 85
    1002:	99 e0       	ldi	r25, 0x09	; 9
    1004:	89 2b       	or	r24, r25
    1006:	49 f0       	breq	.+18     	; 0x101a <_Z14serialEventRunv+0x1a>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	89 2b       	or	r24, r25
    100e:	29 f0       	breq	.+10     	; 0x101a <_Z14serialEventRunv+0x1a>
    1010:	0e 94 55 09 	call	0x12aa	; 0x12aa <_Z17Serial0_availablev>
    1014:	81 11       	cpse	r24, r1
    1016:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    101a:	08 95       	ret

0000101c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    101c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    101e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1020:	df 01       	movw	r26, r30
    1022:	a8 0f       	add	r26, r24
    1024:	b1 1d       	adc	r27, r1
    1026:	a3 5a       	subi	r26, 0xA3	; 163
    1028:	bf 4f       	sbci	r27, 0xFF	; 255
    102a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    102c:	84 8d       	ldd	r24, Z+28	; 0x1c
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	8f 73       	andi	r24, 0x3F	; 63
    1034:	99 27       	eor	r25, r25
    1036:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1038:	a6 89       	ldd	r26, Z+22	; 0x16
    103a:	b7 89       	ldd	r27, Z+23	; 0x17
    103c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    103e:	a0 89       	ldd	r26, Z+16	; 0x10
    1040:	b1 89       	ldd	r27, Z+17	; 0x11
    1042:	8c 91       	ld	r24, X
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1048:	93 8d       	ldd	r25, Z+27	; 0x1b
    104a:	84 8d       	ldd	r24, Z+28	; 0x1c
    104c:	98 13       	cpse	r25, r24
    104e:	06 c0       	rjmp	.+12     	; 0x105c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1050:	02 88       	ldd	r0, Z+18	; 0x12
    1052:	f3 89       	ldd	r31, Z+19	; 0x13
    1054:	e0 2d       	mov	r30, r0
    1056:	80 81       	ld	r24, Z
    1058:	8f 7d       	andi	r24, 0xDF	; 223
    105a:	80 83       	st	Z, r24
    105c:	08 95       	ret

0000105e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1064:	88 8d       	ldd	r24, Y+24	; 0x18
    1066:	88 23       	and	r24, r24
    1068:	c9 f0       	breq	.+50     	; 0x109c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    106a:	ea 89       	ldd	r30, Y+18	; 0x12
    106c:	fb 89       	ldd	r31, Y+19	; 0x13
    106e:	80 81       	ld	r24, Z
    1070:	85 fd       	sbrc	r24, 5
    1072:	05 c0       	rjmp	.+10     	; 0x107e <_ZN14HardwareSerial5flushEv+0x20>
    1074:	a8 89       	ldd	r26, Y+16	; 0x10
    1076:	b9 89       	ldd	r27, Y+17	; 0x11
    1078:	8c 91       	ld	r24, X
    107a:	86 fd       	sbrc	r24, 6
    107c:	0f c0       	rjmp	.+30     	; 0x109c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	07 fc       	sbrc	r0, 7
    1082:	f5 cf       	rjmp	.-22     	; 0x106e <_ZN14HardwareSerial5flushEv+0x10>
    1084:	80 81       	ld	r24, Z
    1086:	85 ff       	sbrs	r24, 5
    1088:	f2 cf       	rjmp	.-28     	; 0x106e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    108a:	a8 89       	ldd	r26, Y+16	; 0x10
    108c:	b9 89       	ldd	r27, Y+17	; 0x11
    108e:	8c 91       	ld	r24, X
    1090:	85 ff       	sbrs	r24, 5
    1092:	ed cf       	rjmp	.-38     	; 0x106e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1094:	ce 01       	movw	r24, r28
    1096:	0e 94 0e 08 	call	0x101c	; 0x101c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    109a:	e7 cf       	rjmp	.-50     	; 0x106a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	ec 01       	movw	r28, r24
  _written = true;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    10b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10b8:	98 13       	cpse	r25, r24
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <_ZN14HardwareSerial5writeEh+0x24>
    10bc:	e8 89       	ldd	r30, Y+16	; 0x10
    10be:	f9 89       	ldd	r31, Y+17	; 0x11
    10c0:	80 81       	ld	r24, Z
    10c2:	85 fd       	sbrc	r24, 5
    10c4:	24 c0       	rjmp	.+72     	; 0x110e <_ZN14HardwareSerial5writeEh+0x6c>
    10c6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    10c8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	0f 5f       	subi	r16, 0xFF	; 255
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	0f 73       	andi	r16, 0x3F	; 63
    10d2:	11 27       	eor	r17, r17
    10d4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    10d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10d8:	e8 12       	cpse	r14, r24
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	07 fc       	sbrc	r0, 7
    10e0:	fa cf       	rjmp	.-12     	; 0x10d6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    10e2:	e8 89       	ldd	r30, Y+16	; 0x10
    10e4:	f9 89       	ldd	r31, Y+17	; 0x11
    10e6:	80 81       	ld	r24, Z
    10e8:	85 ff       	sbrs	r24, 5
    10ea:	f5 cf       	rjmp	.-22     	; 0x10d6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    10ec:	ce 01       	movw	r24, r28
    10ee:	0e 94 0e 08 	call	0x101c	; 0x101c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10f2:	f1 cf       	rjmp	.-30     	; 0x10d6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    10f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f6:	fe 01       	movw	r30, r28
    10f8:	e8 0f       	add	r30, r24
    10fa:	f1 1d       	adc	r31, r1
    10fc:	e3 5a       	subi	r30, 0xA3	; 163
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1102:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1104:	ea 89       	ldd	r30, Y+18	; 0x12
    1106:	fb 89       	ldd	r31, Y+19	; 0x13
    1108:	80 81       	ld	r24, Z
    110a:	80 62       	ori	r24, 0x20	; 32
    110c:	07 c0       	rjmp	.+14     	; 0x111c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    110e:	ee 89       	ldd	r30, Y+22	; 0x16
    1110:	ff 89       	ldd	r31, Y+23	; 0x17
    1112:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1114:	e8 89       	ldd	r30, Y+16	; 0x10
    1116:	f9 89       	ldd	r31, Y+17	; 0x11
    1118:	80 81       	ld	r24, Z
    111a:	80 64       	ori	r24, 0x40	; 64
    111c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	08 95       	ret

00001130 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
    1140:	6a 01       	movw	r12, r20
    1142:	7b 01       	movw	r14, r22
    1144:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1146:	e8 89       	ldd	r30, Y+16	; 0x10
    1148:	f9 89       	ldd	r31, Y+17	; 0x11
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    114e:	41 15       	cp	r20, r1
    1150:	51 4e       	sbci	r21, 0xE1	; 225
    1152:	61 05       	cpc	r22, r1
    1154:	71 05       	cpc	r23, r1
    1156:	b1 f0       	breq	.+44     	; 0x1184 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	79 e0       	ldi	r23, 0x09	; 9
    115c:	8d e3       	ldi	r24, 0x3D	; 61
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a7 01       	movw	r20, r14
    1162:	96 01       	movw	r18, r12
    1164:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__udivmodsi4>
    1168:	da 01       	movw	r26, r20
    116a:	c9 01       	movw	r24, r18
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	a1 09       	sbc	r26, r1
    1170:	b1 09       	sbc	r27, r1
    1172:	b6 95       	lsr	r27
    1174:	a7 95       	ror	r26
    1176:	97 95       	ror	r25
    1178:	87 95       	ror	r24
    117a:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    117c:	41 15       	cp	r20, r1
    117e:	80 e1       	ldi	r24, 0x10	; 16
    1180:	58 07       	cpc	r21, r24
    1182:	a8 f0       	brcs	.+42     	; 0x11ae <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1184:	e8 89       	ldd	r30, Y+16	; 0x10
    1186:	f9 89       	ldd	r31, Y+17	; 0x11
    1188:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    118a:	60 e8       	ldi	r22, 0x80	; 128
    118c:	74 e8       	ldi	r23, 0x84	; 132
    118e:	8e e1       	ldi	r24, 0x1E	; 30
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a7 01       	movw	r20, r14
    1194:	96 01       	movw	r18, r12
    1196:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__udivmodsi4>
    119a:	ba 01       	movw	r22, r20
    119c:	a9 01       	movw	r20, r18
    119e:	41 50       	subi	r20, 0x01	; 1
    11a0:	51 09       	sbc	r21, r1
    11a2:	61 09       	sbc	r22, r1
    11a4:	71 09       	sbc	r23, r1
    11a6:	76 95       	lsr	r23
    11a8:	67 95       	ror	r22
    11aa:	57 95       	ror	r21
    11ac:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    11ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    11b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    11b2:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    11b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    11b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    11b8:	40 83       	st	Z, r20

  _written = false;
    11ba:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    11bc:	ec 89       	ldd	r30, Y+20	; 0x14
    11be:	fd 89       	ldd	r31, Y+21	; 0x15
    11c0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    11c2:	ea 89       	ldd	r30, Y+18	; 0x12
    11c4:	fb 89       	ldd	r31, Y+19	; 0x13
    11c6:	80 81       	ld	r24, Z
    11c8:	80 61       	ori	r24, 0x10	; 16
    11ca:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    11cc:	ea 89       	ldd	r30, Y+18	; 0x12
    11ce:	fb 89       	ldd	r31, Y+19	; 0x13
    11d0:	80 81       	ld	r24, Z
    11d2:	88 60       	ori	r24, 0x08	; 8
    11d4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    11d6:	ea 89       	ldd	r30, Y+18	; 0x12
    11d8:	fb 89       	ldd	r31, Y+19	; 0x13
    11da:	80 81       	ld	r24, Z
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    11e0:	ea 89       	ldd	r30, Y+18	; 0x12
    11e2:	fb 89       	ldd	r31, Y+19	; 0x13
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 7d       	andi	r24, 0xDF	; 223
    11e8:	80 83       	st	Z, r24
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	08 95       	ret

000011fa <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    11fa:	1f 92       	push	r1
    11fc:	0f 92       	push	r0
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	0f 92       	push	r0
    1202:	11 24       	eor	r1, r1
    1204:	2f 93       	push	r18
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    120e:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <Serial+0x10>
    1212:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <Serial+0x11>
    1216:	80 81       	ld	r24, Z
    1218:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <Serial+0x16>
    121c:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <Serial+0x17>
    1220:	82 fd       	sbrc	r24, 2
    1222:	12 c0       	rjmp	.+36     	; 0x1248 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1224:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1226:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <Serial+0x19>
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    122e:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <Serial+0x1a>
    1232:	82 17       	cp	r24, r18
    1234:	51 f0       	breq	.+20     	; 0x124a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1236:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <Serial+0x19>
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	e2 5c       	subi	r30, 0xC2	; 194
    123e:	fd 4f       	sbci	r31, 0xFD	; 253
    1240:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1242:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <Serial+0x19>
    1246:	01 c0       	rjmp	.+2      	; 0x124a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1248:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	9f 91       	pop	r25
    1250:	8f 91       	pop	r24
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1280:	8e e3       	ldi	r24, 0x3E	; 62
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 0e 08 	call	0x101c	; 0x101c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    12aa:	8e e3       	ldi	r24, 0x3E	; 62
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN14HardwareSerial9availableEv>
    12b2:	21 e0       	ldi	r18, 0x01	; 1
    12b4:	89 2b       	or	r24, r25
    12b6:	09 f4       	brne	.+2      	; 0x12ba <_Z17Serial0_availablev+0x10>
    12b8:	20 e0       	ldi	r18, 0x00	; 0
}
    12ba:	82 2f       	mov	r24, r18
    12bc:	08 95       	ret

000012be <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    12be:	ee e3       	ldi	r30, 0x3E	; 62
    12c0:	f2 e0       	ldi	r31, 0x02	; 2
    12c2:	13 82       	std	Z+3, r1	; 0x03
    12c4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    12c6:	88 ee       	ldi	r24, 0xE8	; 232
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	84 83       	std	Z+4, r24	; 0x04
    12d0:	95 83       	std	Z+5, r25	; 0x05
    12d2:	a6 83       	std	Z+6, r26	; 0x06
    12d4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    12d6:	82 e4       	ldi	r24, 0x42	; 66
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	80 83       	st	Z, r24
    12de:	85 ec       	ldi	r24, 0xC5	; 197
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	95 87       	std	Z+13, r25	; 0x0d
    12e4:	84 87       	std	Z+12, r24	; 0x0c
    12e6:	84 ec       	ldi	r24, 0xC4	; 196
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	97 87       	std	Z+15, r25	; 0x0f
    12ec:	86 87       	std	Z+14, r24	; 0x0e
    12ee:	80 ec       	ldi	r24, 0xC0	; 192
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	91 8b       	std	Z+17, r25	; 0x11
    12f4:	80 8b       	std	Z+16, r24	; 0x10
    12f6:	81 ec       	ldi	r24, 0xC1	; 193
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	93 8b       	std	Z+19, r25	; 0x13
    12fc:	82 8b       	std	Z+18, r24	; 0x12
    12fe:	82 ec       	ldi	r24, 0xC2	; 194
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	95 8b       	std	Z+21, r25	; 0x15
    1304:	84 8b       	std	Z+20, r24	; 0x14
    1306:	86 ec       	ldi	r24, 0xC6	; 198
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	97 8b       	std	Z+23, r25	; 0x17
    130c:	86 8b       	std	Z+22, r24	; 0x16
    130e:	11 8e       	std	Z+25, r1	; 0x19
    1310:	12 8e       	std	Z+26, r1	; 0x1a
    1312:	13 8e       	std	Z+27, r1	; 0x1b
    1314:	14 8e       	std	Z+28, r1	; 0x1c
    1316:	08 95       	ret

00001318 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    1318:	08 95       	ret

0000131a <main>:

int main(void)
{
	init();
    131a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <init>

	initVariant();
    131e:	0e 94 8c 09 	call	0x1318	; 0x1318 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1322:	0e 94 a3 00 	call	0x146	; 0x146 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1326:	c0 e0       	ldi	r28, 0x00	; 0
    1328:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    132a:	0e 94 a0 01 	call	0x340	; 0x340 <loop>
		if (serialEventRun) serialEventRun();
    132e:	20 97       	sbiw	r28, 0x00	; 0
    1330:	e1 f3       	breq	.-8      	; 0x132a <main+0x10>
    1332:	0e 94 00 08 	call	0x1000	; 0x1000 <_Z14serialEventRunv>
    1336:	f9 cf       	rjmp	.-14     	; 0x132a <main+0x10>

00001338 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	6c 01       	movw	r12, r24
    134a:	7a 01       	movw	r14, r20
    134c:	8b 01       	movw	r16, r22
    134e:	c0 e0       	ldi	r28, 0x00	; 0
    1350:	d0 e0       	ldi	r29, 0x00	; 0
    1352:	ce 15       	cp	r28, r14
    1354:	df 05       	cpc	r29, r15
    1356:	89 f0       	breq	.+34     	; 0x137a <_ZN5Print5writeEPKhj+0x42>
    1358:	d8 01       	movw	r26, r16
    135a:	6d 91       	ld	r22, X+
    135c:	8d 01       	movw	r16, r26
    135e:	d6 01       	movw	r26, r12
    1360:	ed 91       	ld	r30, X+
    1362:	fc 91       	ld	r31, X
    1364:	01 90       	ld	r0, Z+
    1366:	f0 81       	ld	r31, Z
    1368:	e0 2d       	mov	r30, r0
    136a:	c6 01       	movw	r24, r12
    136c:	09 95       	icall
    136e:	89 2b       	or	r24, r25
    1370:	11 f4       	brne	.+4      	; 0x1376 <_ZN5Print5writeEPKhj+0x3e>
    1372:	7e 01       	movw	r14, r28
    1374:	02 c0       	rjmp	.+4      	; 0x137a <_ZN5Print5writeEPKhj+0x42>
    1376:	21 96       	adiw	r28, 0x01	; 1
    1378:	ec cf       	rjmp	.-40     	; 0x1352 <_ZN5Print5writeEPKhj+0x1a>
    137a:	c7 01       	movw	r24, r14
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	08 95       	ret

0000138e <_ZN5Print5writeEPKc>:
    138e:	61 15       	cp	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	79 f0       	breq	.+30     	; 0x13b2 <_ZN5Print5writeEPKc+0x24>
    1394:	fb 01       	movw	r30, r22
    1396:	01 90       	ld	r0, Z+
    1398:	00 20       	and	r0, r0
    139a:	e9 f7       	brne	.-6      	; 0x1396 <_ZN5Print5writeEPKc+0x8>
    139c:	31 97       	sbiw	r30, 0x01	; 1
    139e:	af 01       	movw	r20, r30
    13a0:	46 1b       	sub	r20, r22
    13a2:	57 0b       	sbc	r21, r23
    13a4:	dc 01       	movw	r26, r24
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
    13aa:	02 80       	ldd	r0, Z+2	; 0x02
    13ac:	f3 81       	ldd	r31, Z+3	; 0x03
    13ae:	e0 2d       	mov	r30, r0
    13b0:	09 94       	ijmp
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	08 95       	ret

000013b8 <_ZN5Print5printEPKc>:
    13b8:	0c 94 c7 09 	jmp	0x138e	; 0x138e <_ZN5Print5writeEPKc>

000013bc <_ZN5Print5printEc>:
    13bc:	dc 01       	movw	r26, r24
    13be:	ed 91       	ld	r30, X+
    13c0:	fc 91       	ld	r31, X
    13c2:	01 90       	ld	r0, Z+
    13c4:	f0 81       	ld	r31, Z
    13c6:	e0 2d       	mov	r30, r0
    13c8:	09 94       	ijmp

000013ca <_ZN5Print7printlnEv>:
    13ca:	60 e5       	ldi	r22, 0x50	; 80
    13cc:	71 e0       	ldi	r23, 0x01	; 1
    13ce:	0c 94 c7 09 	jmp	0x138e	; 0x138e <_ZN5Print5writeEPKc>

000013d2 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	a1 97       	sbiw	r28, 0x21	; 33
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	7c 01       	movw	r14, r24
    13fc:	d4 2e       	mov	r13, r20
    13fe:	c5 2e       	mov	r12, r21
    1400:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1402:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	08 f4       	brcc	.+2      	; 0x140a <_ZN5Print11printNumberEmh+0x38>
    1408:	2a e0       	ldi	r18, 0x0A	; 10
    140a:	8e 01       	movw	r16, r28
    140c:	0f 5d       	subi	r16, 0xDF	; 223
    140e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    1410:	82 2e       	mov	r8, r18
    1412:	91 2c       	mov	r9, r1
    1414:	a1 2c       	mov	r10, r1
    1416:	b1 2c       	mov	r11, r1
    1418:	6d 2d       	mov	r22, r13
    141a:	7c 2d       	mov	r23, r12
    141c:	cd 01       	movw	r24, r26
    141e:	a5 01       	movw	r20, r10
    1420:	94 01       	movw	r18, r8
    1422:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__udivmodsi4>
    n /= base;
    1426:	d2 2e       	mov	r13, r18
    1428:	c3 2e       	mov	r12, r19
    142a:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    142c:	01 50       	subi	r16, 0x01	; 1
    142e:	11 09       	sbc	r17, r1
    1430:	6a 30       	cpi	r22, 0x0A	; 10
    1432:	71 05       	cpc	r23, r1
    1434:	81 05       	cpc	r24, r1
    1436:	91 05       	cpc	r25, r1
    1438:	10 f4       	brcc	.+4      	; 0x143e <_ZN5Print11printNumberEmh+0x6c>
    143a:	60 5d       	subi	r22, 0xD0	; 208
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <_ZN5Print11printNumberEmh+0x6e>
    143e:	69 5c       	subi	r22, 0xC9	; 201
    1440:	f8 01       	movw	r30, r16
    1442:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1444:	23 2b       	or	r18, r19
    1446:	24 2b       	or	r18, r20
    1448:	25 2b       	or	r18, r21
    144a:	31 f7       	brne	.-52     	; 0x1418 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    144c:	b8 01       	movw	r22, r16
    144e:	c7 01       	movw	r24, r14
    1450:	0e 94 c7 09 	call	0x138e	; 0x138e <_ZN5Print5writeEPKc>
}
    1454:	a1 96       	adiw	r28, 0x21	; 33
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	8f 90       	pop	r8
    1478:	08 95       	ret

0000147a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
    148c:	6a 01       	movw	r12, r20
    148e:	7b 01       	movw	r14, r22
  if (base == 0) {
    1490:	21 15       	cp	r18, r1
    1492:	31 05       	cpc	r19, r1
    1494:	79 f4       	brne	.+30     	; 0x14b4 <_ZN5Print5printEli+0x3a>
    return write(n);
    1496:	e8 81       	ld	r30, Y
    1498:	f9 81       	ldd	r31, Y+1	; 0x01
    149a:	01 90       	ld	r0, Z+
    149c:	f0 81       	ld	r31, Z
    149e:	e0 2d       	mov	r30, r0
    14a0:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    14b2:	09 94       	ijmp
  } else if (base == 10) {
    14b4:	2a 30       	cpi	r18, 0x0A	; 10
    14b6:	31 05       	cpc	r19, r1
    14b8:	e9 f4       	brne	.+58     	; 0x14f4 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
    14ba:	77 ff       	sbrs	r23, 7
    14bc:	1a c0       	rjmp	.+52     	; 0x14f2 <_ZN5Print5printEli+0x78>
      int t = print('-');
    14be:	6d e2       	ldi	r22, 0x2D	; 45
    14c0:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN5Print5printEc>
    14c4:	8c 01       	movw	r16, r24
      n = -n;
    14c6:	44 27       	eor	r20, r20
    14c8:	55 27       	eor	r21, r21
    14ca:	ba 01       	movw	r22, r20
    14cc:	4c 19       	sub	r20, r12
    14ce:	5d 09       	sbc	r21, r13
    14d0:	6e 09       	sbc	r22, r14
    14d2:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    14d4:	2a e0       	ldi	r18, 0x0A	; 10
    14d6:	ce 01       	movw	r24, r28
    14d8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN5Print11printNumberEmh>
    14dc:	80 0f       	add	r24, r16
    14de:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
    14ee:	cf 90       	pop	r12
    14f0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    14f2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    14f4:	b7 01       	movw	r22, r14
    14f6:	a6 01       	movw	r20, r12
    14f8:	ce 01       	movw	r24, r28
  }
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    150a:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <_ZN5Print11printNumberEmh>

0000150e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    150e:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1510:	ab 01       	movw	r20, r22
    1512:	77 0f       	add	r23, r23
    1514:	66 0b       	sbc	r22, r22
    1516:	77 0b       	sbc	r23, r23
    1518:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <_ZN5Print5printEli>

0000151c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	ec 01       	movw	r28, r24
    1526:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1528:	ab 01       	movw	r20, r22
    152a:	77 0f       	add	r23, r23
    152c:	66 0b       	sbc	r22, r22
    152e:	77 0b       	sbc	r23, r23
    1530:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN5Print5printEli>
    1534:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1536:	ce 01       	movw	r24, r28
    1538:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_ZN5Print7printlnEv>
  return n;
}
    153c:	80 0f       	add	r24, r16
    153e:	91 1f       	adc	r25, r17
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    154a:	1f 92       	push	r1
    154c:	0f 92       	push	r0
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <timer0_millis>
    1564:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <timer0_millis+0x1>
    1568:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <timer0_millis+0x2>
    156c:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <timer0_millis+0x3>
    1570:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <timer0_fract>
    1574:	23 e0       	ldi	r18, 0x03	; 3
    1576:	23 0f       	add	r18, r19
    1578:	2d 37       	cpi	r18, 0x7D	; 125
    157a:	20 f4       	brcc	.+8      	; 0x1584 <__vector_16+0x3a>
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	a1 1d       	adc	r26, r1
    1580:	b1 1d       	adc	r27, r1
    1582:	05 c0       	rjmp	.+10     	; 0x158e <__vector_16+0x44>
    1584:	26 e8       	ldi	r18, 0x86	; 134
    1586:	23 0f       	add	r18, r19
    1588:	02 96       	adiw	r24, 0x02	; 2
    158a:	a1 1d       	adc	r26, r1
    158c:	b1 1d       	adc	r27, r1
    158e:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <timer0_fract>
    1592:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <timer0_millis>
    1596:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <timer0_millis+0x1>
    159a:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <timer0_millis+0x2>
    159e:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <timer0_millis+0x3>
    15a2:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <timer0_overflow_count>
    15a6:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <timer0_overflow_count+0x1>
    15aa:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <timer0_overflow_count+0x2>
    15ae:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <timer0_overflow_count+0x3>
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	a1 1d       	adc	r26, r1
    15b6:	b1 1d       	adc	r27, r1
    15b8:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <timer0_overflow_count>
    15bc:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <timer0_overflow_count+0x1>
    15c0:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <timer0_overflow_count+0x2>
    15c4:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <timer0_overflow_count+0x3>
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	3f 91       	pop	r19
    15d2:	2f 91       	pop	r18
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	0f 90       	pop	r0
    15da:	1f 90       	pop	r1
    15dc:	18 95       	reti

000015de <micros>:
    15de:	3f b7       	in	r19, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <timer0_overflow_count>
    15e6:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <timer0_overflow_count+0x1>
    15ea:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <timer0_overflow_count+0x2>
    15ee:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <timer0_overflow_count+0x3>
    15f2:	26 b5       	in	r18, 0x26	; 38
    15f4:	a8 9b       	sbis	0x15, 0	; 21
    15f6:	05 c0       	rjmp	.+10     	; 0x1602 <micros+0x24>
    15f8:	2f 3f       	cpi	r18, 0xFF	; 255
    15fa:	19 f0       	breq	.+6      	; 0x1602 <micros+0x24>
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	a1 1d       	adc	r26, r1
    1600:	b1 1d       	adc	r27, r1
    1602:	3f bf       	out	0x3f, r19	; 63
    1604:	ba 2f       	mov	r27, r26
    1606:	a9 2f       	mov	r26, r25
    1608:	98 2f       	mov	r25, r24
    160a:	88 27       	eor	r24, r24
    160c:	82 0f       	add	r24, r18
    160e:	91 1d       	adc	r25, r1
    1610:	a1 1d       	adc	r26, r1
    1612:	b1 1d       	adc	r27, r1
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	42 e0       	ldi	r20, 0x02	; 2
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	4a 95       	dec	r20
    1624:	d1 f7       	brne	.-12     	; 0x161a <micros+0x3c>
    1626:	08 95       	ret

00001628 <delay>:
    1628:	8f 92       	push	r8
    162a:	9f 92       	push	r9
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	6b 01       	movw	r12, r22
    163a:	7c 01       	movw	r14, r24
    163c:	0e 94 ef 0a 	call	0x15de	; 0x15de <micros>
    1640:	4b 01       	movw	r8, r22
    1642:	5c 01       	movw	r10, r24
    1644:	c1 14       	cp	r12, r1
    1646:	d1 04       	cpc	r13, r1
    1648:	e1 04       	cpc	r14, r1
    164a:	f1 04       	cpc	r15, r1
    164c:	01 f1       	breq	.+64     	; 0x168e <delay+0x66>
    164e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <yield>
    1652:	0e 94 ef 0a 	call	0x15de	; 0x15de <micros>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	88 19       	sub	r24, r8
    165c:	99 09       	sbc	r25, r9
    165e:	aa 09       	sbc	r26, r10
    1660:	bb 09       	sbc	r27, r11
    1662:	88 3e       	cpi	r24, 0xE8	; 232
    1664:	93 40       	sbci	r25, 0x03	; 3
    1666:	a1 05       	cpc	r26, r1
    1668:	b1 05       	cpc	r27, r1
    166a:	60 f3       	brcs	.-40     	; 0x1644 <delay+0x1c>
    166c:	21 e0       	ldi	r18, 0x01	; 1
    166e:	c2 1a       	sub	r12, r18
    1670:	d1 08       	sbc	r13, r1
    1672:	e1 08       	sbc	r14, r1
    1674:	f1 08       	sbc	r15, r1
    1676:	88 ee       	ldi	r24, 0xE8	; 232
    1678:	88 0e       	add	r8, r24
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	98 1e       	adc	r9, r24
    167e:	a1 1c       	adc	r10, r1
    1680:	b1 1c       	adc	r11, r1
    1682:	c1 14       	cp	r12, r1
    1684:	d1 04       	cpc	r13, r1
    1686:	e1 04       	cpc	r14, r1
    1688:	f1 04       	cpc	r15, r1
    168a:	19 f7       	brne	.-58     	; 0x1652 <delay+0x2a>
    168c:	db cf       	rjmp	.-74     	; 0x1644 <delay+0x1c>
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	df 90       	pop	r13
    1694:	cf 90       	pop	r12
    1696:	bf 90       	pop	r11
    1698:	af 90       	pop	r10
    169a:	9f 90       	pop	r9
    169c:	8f 90       	pop	r8
    169e:	08 95       	ret

000016a0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    16a0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    16a2:	84 b5       	in	r24, 0x24	; 36
    16a4:	82 60       	ori	r24, 0x02	; 2
    16a6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    16a8:	84 b5       	in	r24, 0x24	; 36
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    16ae:	85 b5       	in	r24, 0x25	; 37
    16b0:	82 60       	ori	r24, 0x02	; 2
    16b2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    16b4:	85 b5       	in	r24, 0x25	; 37
    16b6:	81 60       	ori	r24, 0x01	; 1
    16b8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    16ba:	ee e6       	ldi	r30, 0x6E	; 110
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    16c4:	e1 e8       	ldi	r30, 0x81	; 129
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    16ca:	80 81       	ld	r24, Z
    16cc:	82 60       	ori	r24, 0x02	; 2
    16ce:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    16d0:	80 81       	ld	r24, Z
    16d2:	81 60       	ori	r24, 0x01	; 1
    16d4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    16d6:	e0 e8       	ldi	r30, 0x80	; 128
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    16e0:	e1 eb       	ldi	r30, 0xB1	; 177
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	84 60       	ori	r24, 0x04	; 4
    16e8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    16ea:	e0 eb       	ldi	r30, 0xB0	; 176
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	81 60       	ori	r24, 0x01	; 1
    16f2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    16f4:	ea e7       	ldi	r30, 0x7A	; 122
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	84 60       	ori	r24, 0x04	; 4
    16fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    16fe:	80 81       	ld	r24, Z
    1700:	82 60       	ori	r24, 0x02	; 2
    1702:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1704:	80 81       	ld	r24, Z
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    170a:	80 81       	ld	r24, Z
    170c:	80 68       	ori	r24, 0x80	; 128
    170e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1710:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1714:	08 95       	ret

00001716 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1716:	8e 30       	cpi	r24, 0x0E	; 14
    1718:	08 f0       	brcs	.+2      	; 0x171c <analogRead+0x6>
    171a:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    171c:	87 70       	andi	r24, 0x07	; 7
    171e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <analog_reference>
    1722:	90 e4       	ldi	r25, 0x40	; 64
    1724:	29 9f       	mul	r18, r25
    1726:	90 01       	movw	r18, r0
    1728:	11 24       	eor	r1, r1
    172a:	82 2b       	or	r24, r18
    172c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1730:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    173a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    173e:	86 fd       	sbrc	r24, 6
    1740:	fc cf       	rjmp	.-8      	; 0x173a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1742:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1746:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    174a:	90 e0       	ldi	r25, 0x00	; 0
}
    174c:	92 2b       	or	r25, r18
    174e:	08 95       	ret

00001750 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1750:	83 30       	cpi	r24, 0x03	; 3
    1752:	81 f0       	breq	.+32     	; 0x1774 <turnOffPWM+0x24>
    1754:	28 f4       	brcc	.+10     	; 0x1760 <turnOffPWM+0x10>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	99 f0       	breq	.+38     	; 0x1780 <turnOffPWM+0x30>
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	a1 f0       	breq	.+40     	; 0x1786 <turnOffPWM+0x36>
    175e:	08 95       	ret
    1760:	87 30       	cpi	r24, 0x07	; 7
    1762:	a9 f0       	breq	.+42     	; 0x178e <turnOffPWM+0x3e>
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	b9 f0       	breq	.+46     	; 0x1796 <turnOffPWM+0x46>
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	d1 f4       	brne	.+52     	; 0x17a0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    176c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1770:	8f 7d       	andi	r24, 0xDF	; 223
    1772:	03 c0       	rjmp	.+6      	; 0x177a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1774:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1778:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    177a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    177e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1780:	84 b5       	in	r24, 0x24	; 36
    1782:	8f 77       	andi	r24, 0x7F	; 127
    1784:	02 c0       	rjmp	.+4      	; 0x178a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1786:	84 b5       	in	r24, 0x24	; 36
    1788:	8f 7d       	andi	r24, 0xDF	; 223
    178a:	84 bd       	out	0x24, r24	; 36
    178c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    178e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1792:	8f 77       	andi	r24, 0x7F	; 127
    1794:	03 c0       	rjmp	.+6      	; 0x179c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1796:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    179a:	8f 7d       	andi	r24, 0xDF	; 223
    179c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    17a0:	08 95       	ret

000017a2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	fc 01       	movw	r30, r24
    17aa:	e4 58       	subi	r30, 0x84	; 132
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    17b0:	fc 01       	movw	r30, r24
    17b2:	e0 57       	subi	r30, 0x70	; 112
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    17b8:	88 23       	and	r24, r24
    17ba:	61 f1       	breq	.+88     	; 0x1814 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	fc 01       	movw	r30, r24
    17c4:	e2 55       	subi	r30, 0x52	; 82
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	c5 91       	lpm	r28, Z+
    17ca:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    17cc:	fc 01       	movw	r30, r24
    17ce:	ec 55       	subi	r30, 0x5C	; 92
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	a5 91       	lpm	r26, Z+
    17d4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    17d6:	61 11       	cpse	r22, r1
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17da:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17dc:	f8 94       	cli
		*reg &= ~bit;
    17de:	88 81       	ld	r24, Y
    17e0:	20 95       	com	r18
    17e2:	82 23       	and	r24, r18
    17e4:	88 83       	st	Y, r24
		*out &= ~bit;
    17e6:	ec 91       	ld	r30, X
    17e8:	2e 23       	and	r18, r30
    17ea:	0b c0       	rjmp	.+22     	; 0x1802 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17ec:	62 30       	cpi	r22, 0x02	; 2
    17ee:	61 f4       	brne	.+24     	; 0x1808 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    17f0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17f2:	f8 94       	cli
		*reg &= ~bit;
    17f4:	38 81       	ld	r19, Y
    17f6:	82 2f       	mov	r24, r18
    17f8:	80 95       	com	r24
    17fa:	83 23       	and	r24, r19
    17fc:	88 83       	st	Y, r24
		*out |= bit;
    17fe:	ec 91       	ld	r30, X
    1800:	2e 2b       	or	r18, r30
    1802:	2c 93       	st	X, r18
		SREG = oldSREG;
    1804:	9f bf       	out	0x3f, r25	; 63
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1808:	8f b7       	in	r24, 0x3f	; 63
                cli();
    180a:	f8 94       	cli
		*reg |= bit;
    180c:	e8 81       	ld	r30, Y
    180e:	2e 2b       	or	r18, r30
    1810:	28 83       	st	Y, r18
		SREG = oldSREG;
    1812:	8f bf       	out	0x3f, r24	; 63
	}
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	f9 01       	movw	r30, r18
    1826:	e8 59       	subi	r30, 0x98	; 152
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    182c:	f9 01       	movw	r30, r18
    182e:	e4 58       	subi	r30, 0x84	; 132
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1834:	f9 01       	movw	r30, r18
    1836:	e0 57       	subi	r30, 0x70	; 112
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    183c:	cc 23       	and	r28, r28
    183e:	c9 f0       	breq	.+50     	; 0x1872 <digitalWrite+0x58>
    1840:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1842:	81 11       	cpse	r24, r1
    1844:	0e 94 a8 0b 	call	0x1750	; 0x1750 <turnOffPWM>

	out = portOutputRegister(port);
    1848:	ec 2f       	mov	r30, r28
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	ec 55       	subi	r30, 0x5C	; 92
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	a5 91       	lpm	r26, Z+
    1856:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1858:	8f b7       	in	r24, 0x3f	; 63
	cli();
    185a:	f8 94       	cli

	if (val == LOW) {
    185c:	11 11       	cpse	r17, r1
    185e:	05 c0       	rjmp	.+10     	; 0x186a <digitalWrite+0x50>
		*out &= ~bit;
    1860:	9c 91       	ld	r25, X
    1862:	ed 2f       	mov	r30, r29
    1864:	e0 95       	com	r30
    1866:	e9 23       	and	r30, r25
    1868:	02 c0       	rjmp	.+4      	; 0x186e <digitalWrite+0x54>
	} else {
		*out |= bit;
    186a:	ec 91       	ld	r30, X
    186c:	ed 2b       	or	r30, r29
    186e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1870:	8f bf       	out	0x3f, r24	; 63
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	08 95       	ret

0000187a <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    187a:	fc 01       	movw	r30, r24
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <free>

00001884 <_ZN6String10invalidateEv>:
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	ec 01       	movw	r28, r24
    188a:	88 81       	ld	r24, Y
    188c:	99 81       	ldd	r25, Y+1	; 0x01
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	11 f0       	breq	.+4      	; 0x1896 <_ZN6String10invalidateEv+0x12>
    1892:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <free>
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	18 82       	st	Y, r1
    189a:	1d 82       	std	Y+5, r1	; 0x05
    189c:	1c 82       	std	Y+4, r1	; 0x04
    189e:	1b 82       	std	Y+3, r1	; 0x03
    18a0:	1a 82       	std	Y+2, r1	; 0x02
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <_ZN6String12changeBufferEj>:
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
    18b2:	8b 01       	movw	r16, r22
    18b4:	6f 5f       	subi	r22, 0xFF	; 255
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	88 81       	ld	r24, Y
    18ba:	99 81       	ldd	r25, Y+1	; 0x01
    18bc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <realloc>
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	31 f0       	breq	.+12     	; 0x18d0 <_ZN6String12changeBufferEj+0x28>
    18c4:	99 83       	std	Y+1, r25	; 0x01
    18c6:	88 83       	st	Y, r24
    18c8:	1b 83       	std	Y+3, r17	; 0x03
    18ca:	0a 83       	std	Y+2, r16	; 0x02
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <_ZN6String12changeBufferEj+0x2a>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <_ZN6String7reserveEj>:
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24
    18e2:	88 81       	ld	r24, Y
    18e4:	99 81       	ldd	r25, Y+1	; 0x01
    18e6:	89 2b       	or	r24, r25
    18e8:	29 f0       	breq	.+10     	; 0x18f4 <_ZN6String7reserveEj+0x18>
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	9b 81       	ldd	r25, Y+3	; 0x03
    18ee:	86 17       	cp	r24, r22
    18f0:	97 07       	cpc	r25, r23
    18f2:	60 f4       	brcc	.+24     	; 0x190c <_ZN6String7reserveEj+0x30>
    18f4:	ce 01       	movw	r24, r28
    18f6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN6String12changeBufferEj>
    18fa:	88 23       	and	r24, r24
    18fc:	41 f0       	breq	.+16     	; 0x190e <_ZN6String7reserveEj+0x32>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	89 2b       	or	r24, r25
    1904:	19 f4       	brne	.+6      	; 0x190c <_ZN6String7reserveEj+0x30>
    1906:	e8 81       	ld	r30, Y
    1908:	f9 81       	ldd	r31, Y+1	; 0x01
    190a:	10 82       	st	Z, r1
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	08 95       	ret

00001914 <_ZN6String4copyEPKcj>:
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ec 01       	movw	r28, r24
    1922:	7b 01       	movw	r14, r22
    1924:	8a 01       	movw	r16, r20
    1926:	ba 01       	movw	r22, r20
    1928:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <_ZN6String7reserveEj>
    192c:	81 11       	cpse	r24, r1
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <_ZN6String4copyEPKcj+0x24>
    1930:	ce 01       	movw	r24, r28
    1932:	0e 94 42 0c 	call	0x1884	; 0x1884 <_ZN6String10invalidateEv>
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <_ZN6String4copyEPKcj+0x32>
    1938:	1d 83       	std	Y+5, r17	; 0x05
    193a:	0c 83       	std	Y+4, r16	; 0x04
    193c:	b7 01       	movw	r22, r14
    193e:	88 81       	ld	r24, Y
    1940:	99 81       	ldd	r25, Y+1	; 0x01
    1942:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <strcpy>
    1946:	ce 01       	movw	r24, r28
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	08 95       	ret

00001956 <_ZN6StringC1EPKc>:
    1956:	fc 01       	movw	r30, r24
    1958:	11 82       	std	Z+1, r1	; 0x01
    195a:	10 82       	st	Z, r1
    195c:	13 82       	std	Z+3, r1	; 0x03
    195e:	12 82       	std	Z+2, r1	; 0x02
    1960:	15 82       	std	Z+5, r1	; 0x05
    1962:	14 82       	std	Z+4, r1	; 0x04
    1964:	61 15       	cp	r22, r1
    1966:	71 05       	cpc	r23, r1
    1968:	51 f0       	breq	.+20     	; 0x197e <_ZN6StringC1EPKc+0x28>
    196a:	fb 01       	movw	r30, r22
    196c:	01 90       	ld	r0, Z+
    196e:	00 20       	and	r0, r0
    1970:	e9 f7       	brne	.-6      	; 0x196c <_ZN6StringC1EPKc+0x16>
    1972:	31 97       	sbiw	r30, 0x01	; 1
    1974:	af 01       	movw	r20, r30
    1976:	46 1b       	sub	r20, r22
    1978:	57 0b       	sbc	r21, r23
    197a:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <_ZN6String4copyEPKcj>
    197e:	08 95       	ret

00001980 <_ZN6StringaSERKS_>:
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	ec 01       	movw	r28, r24
    1986:	fb 01       	movw	r30, r22
    1988:	86 17       	cp	r24, r22
    198a:	97 07       	cpc	r25, r23
    198c:	61 f0       	breq	.+24     	; 0x19a6 <_ZN6StringaSERKS_+0x26>
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	61 15       	cp	r22, r1
    1994:	71 05       	cpc	r23, r1
    1996:	29 f0       	breq	.+10     	; 0x19a2 <_ZN6StringaSERKS_+0x22>
    1998:	44 81       	ldd	r20, Z+4	; 0x04
    199a:	55 81       	ldd	r21, Z+5	; 0x05
    199c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN6String4copyEPKcj>
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <_ZN6StringaSERKS_+0x26>
    19a2:	0e 94 42 0c 	call	0x1884	; 0x1884 <_ZN6String10invalidateEv>
    19a6:	ce 01       	movw	r24, r28
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <_ZNK6String6equalsEPKc>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	24 81       	ldd	r18, Z+4	; 0x04
    19b2:	35 81       	ldd	r19, Z+5	; 0x05
    19b4:	23 2b       	or	r18, r19
    19b6:	31 f4       	brne	.+12     	; 0x19c4 <_ZNK6String6equalsEPKc+0x16>
    19b8:	21 e0       	ldi	r18, 0x01	; 1
    19ba:	61 15       	cp	r22, r1
    19bc:	71 05       	cpc	r23, r1
    19be:	a1 f0       	breq	.+40     	; 0x19e8 <_ZNK6String6equalsEPKc+0x3a>
    19c0:	fb 01       	movw	r30, r22
    19c2:	08 c0       	rjmp	.+16     	; 0x19d4 <_ZNK6String6equalsEPKc+0x26>
    19c4:	fc 01       	movw	r30, r24
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	61 15       	cp	r22, r1
    19cc:	71 05       	cpc	r23, r1
    19ce:	31 f4       	brne	.+12     	; 0x19dc <_ZNK6String6equalsEPKc+0x2e>
    19d0:	21 e0       	ldi	r18, 0x01	; 1
    19d2:	fc 01       	movw	r30, r24
    19d4:	80 81       	ld	r24, Z
    19d6:	88 23       	and	r24, r24
    19d8:	39 f0       	breq	.+14     	; 0x19e8 <_ZNK6String6equalsEPKc+0x3a>
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <_ZNK6String6equalsEPKc+0x38>
    19dc:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <strcmp>
    19e0:	21 e0       	ldi	r18, 0x01	; 1
    19e2:	89 2b       	or	r24, r25
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <_ZNK6String6equalsEPKc+0x3a>
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	82 2f       	mov	r24, r18
    19ea:	08 95       	ret

000019ec <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
	if (!buffer) return;
    19f0:	fc 01       	movw	r30, r24
    19f2:	c0 81       	ld	r28, Z
    19f4:	d1 81       	ldd	r29, Z+1	; 0x01
    19f6:	20 97       	sbiw	r28, 0x00	; 0
    19f8:	41 f0       	breq	.+16     	; 0x1a0a <_ZN6String11toUpperCaseEv+0x1e>
	for (char *p = buffer; *p; p++) {
    19fa:	88 81       	ld	r24, Y
    19fc:	88 23       	and	r24, r24
    19fe:	29 f0       	breq	.+10     	; 0x1a0a <_ZN6String11toUpperCaseEv+0x1e>
		*p = toupper(*p);
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <toupper>
    1a06:	89 93       	st	Y+, r24
    1a08:	f8 cf       	rjmp	.-16     	; 0x19fa <_ZN6String11toUpperCaseEv+0xe>
	}
}
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1a10:	08 95       	ret

00001a12 <__udivmodsi4>:
    1a12:	a1 e2       	ldi	r26, 0x21	; 33
    1a14:	1a 2e       	mov	r1, r26
    1a16:	aa 1b       	sub	r26, r26
    1a18:	bb 1b       	sub	r27, r27
    1a1a:	fd 01       	movw	r30, r26
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <__udivmodsi4_ep>

00001a1e <__udivmodsi4_loop>:
    1a1e:	aa 1f       	adc	r26, r26
    1a20:	bb 1f       	adc	r27, r27
    1a22:	ee 1f       	adc	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	a2 17       	cp	r26, r18
    1a28:	b3 07       	cpc	r27, r19
    1a2a:	e4 07       	cpc	r30, r20
    1a2c:	f5 07       	cpc	r31, r21
    1a2e:	20 f0       	brcs	.+8      	; 0x1a38 <__udivmodsi4_ep>
    1a30:	a2 1b       	sub	r26, r18
    1a32:	b3 0b       	sbc	r27, r19
    1a34:	e4 0b       	sbc	r30, r20
    1a36:	f5 0b       	sbc	r31, r21

00001a38 <__udivmodsi4_ep>:
    1a38:	66 1f       	adc	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	1a 94       	dec	r1
    1a42:	69 f7       	brne	.-38     	; 0x1a1e <__udivmodsi4_loop>
    1a44:	60 95       	com	r22
    1a46:	70 95       	com	r23
    1a48:	80 95       	com	r24
    1a4a:	90 95       	com	r25
    1a4c:	9b 01       	movw	r18, r22
    1a4e:	ac 01       	movw	r20, r24
    1a50:	bd 01       	movw	r22, r26
    1a52:	cf 01       	movw	r24, r30
    1a54:	08 95       	ret

00001a56 <__divmodsi4>:
    1a56:	05 2e       	mov	r0, r21
    1a58:	97 fb       	bst	r25, 7
    1a5a:	1e f4       	brtc	.+6      	; 0x1a62 <__divmodsi4+0xc>
    1a5c:	00 94       	com	r0
    1a5e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__negsi2>
    1a62:	57 fd       	sbrc	r21, 7
    1a64:	07 d0       	rcall	.+14     	; 0x1a74 <__divmodsi4_neg2>
    1a66:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__udivmodsi4>
    1a6a:	07 fc       	sbrc	r0, 7
    1a6c:	03 d0       	rcall	.+6      	; 0x1a74 <__divmodsi4_neg2>
    1a6e:	4e f4       	brtc	.+18     	; 0x1a82 <__divmodsi4_exit>
    1a70:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__negsi2>

00001a74 <__divmodsi4_neg2>:
    1a74:	50 95       	com	r21
    1a76:	40 95       	com	r20
    1a78:	30 95       	com	r19
    1a7a:	21 95       	neg	r18
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a80:	5f 4f       	sbci	r21, 0xFF	; 255

00001a82 <__divmodsi4_exit>:
    1a82:	08 95       	ret

00001a84 <__negsi2>:
    1a84:	90 95       	com	r25
    1a86:	80 95       	com	r24
    1a88:	70 95       	com	r23
    1a8a:	61 95       	neg	r22
    1a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a90:	9f 4f       	sbci	r25, 0xFF	; 255
    1a92:	08 95       	ret

00001a94 <__tablejump2__>:
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	05 90       	lpm	r0, Z+
    1a9a:	f4 91       	lpm	r31, Z
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	09 94       	ijmp

00001aa0 <malloc>:
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	10 f4       	brcc	.+4      	; 0x1aae <malloc+0xe>
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <__flp>
    1ab2:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <__flp+0x1>
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	c0 e0       	ldi	r28, 0x00	; 0
    1abc:	d0 e0       	ldi	r29, 0x00	; 0
    1abe:	30 97       	sbiw	r30, 0x00	; 0
    1ac0:	11 f1       	breq	.+68     	; 0x1b06 <malloc+0x66>
    1ac2:	40 81       	ld	r20, Z
    1ac4:	51 81       	ldd	r21, Z+1	; 0x01
    1ac6:	48 17       	cp	r20, r24
    1ac8:	59 07       	cpc	r21, r25
    1aca:	c0 f0       	brcs	.+48     	; 0x1afc <malloc+0x5c>
    1acc:	48 17       	cp	r20, r24
    1ace:	59 07       	cpc	r21, r25
    1ad0:	61 f4       	brne	.+24     	; 0x1aea <malloc+0x4a>
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	20 97       	sbiw	r28, 0x00	; 0
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <malloc+0x40>
    1ada:	9b 83       	std	Y+3, r25	; 0x03
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	2b c0       	rjmp	.+86     	; 0x1b36 <malloc+0x96>
    1ae0:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <__flp+0x1>
    1ae4:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <__flp>
    1ae8:	26 c0       	rjmp	.+76     	; 0x1b36 <malloc+0x96>
    1aea:	21 15       	cp	r18, r1
    1aec:	31 05       	cpc	r19, r1
    1aee:	19 f0       	breq	.+6      	; 0x1af6 <malloc+0x56>
    1af0:	42 17       	cp	r20, r18
    1af2:	53 07       	cpc	r21, r19
    1af4:	18 f4       	brcc	.+6      	; 0x1afc <malloc+0x5c>
    1af6:	9a 01       	movw	r18, r20
    1af8:	be 01       	movw	r22, r28
    1afa:	df 01       	movw	r26, r30
    1afc:	ef 01       	movw	r28, r30
    1afe:	02 80       	ldd	r0, Z+2	; 0x02
    1b00:	f3 81       	ldd	r31, Z+3	; 0x03
    1b02:	e0 2d       	mov	r30, r0
    1b04:	dc cf       	rjmp	.-72     	; 0x1abe <malloc+0x1e>
    1b06:	21 15       	cp	r18, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	09 f1       	breq	.+66     	; 0x1b4e <malloc+0xae>
    1b0c:	28 1b       	sub	r18, r24
    1b0e:	39 0b       	sbc	r19, r25
    1b10:	24 30       	cpi	r18, 0x04	; 4
    1b12:	31 05       	cpc	r19, r1
    1b14:	90 f4       	brcc	.+36     	; 0x1b3a <malloc+0x9a>
    1b16:	12 96       	adiw	r26, 0x02	; 2
    1b18:	8d 91       	ld	r24, X+
    1b1a:	9c 91       	ld	r25, X
    1b1c:	13 97       	sbiw	r26, 0x03	; 3
    1b1e:	61 15       	cp	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	21 f0       	breq	.+8      	; 0x1b2c <malloc+0x8c>
    1b24:	fb 01       	movw	r30, r22
    1b26:	93 83       	std	Z+3, r25	; 0x03
    1b28:	82 83       	std	Z+2, r24	; 0x02
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <malloc+0x94>
    1b2c:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <__flp+0x1>
    1b30:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <__flp>
    1b34:	fd 01       	movw	r30, r26
    1b36:	32 96       	adiw	r30, 0x02	; 2
    1b38:	44 c0       	rjmp	.+136    	; 0x1bc2 <malloc+0x122>
    1b3a:	fd 01       	movw	r30, r26
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f3 1f       	adc	r31, r19
    1b40:	81 93       	st	Z+, r24
    1b42:	91 93       	st	Z+, r25
    1b44:	22 50       	subi	r18, 0x02	; 2
    1b46:	31 09       	sbc	r19, r1
    1b48:	2d 93       	st	X+, r18
    1b4a:	3c 93       	st	X, r19
    1b4c:	3a c0       	rjmp	.+116    	; 0x1bc2 <malloc+0x122>
    1b4e:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <__brkval>
    1b52:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1b56:	23 2b       	or	r18, r19
    1b58:	41 f4       	brne	.+16     	; 0x1b6a <malloc+0xca>
    1b5a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1b5e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1b62:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <__brkval+0x1>
    1b66:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <__brkval>
    1b6a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1b6e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1b72:	21 15       	cp	r18, r1
    1b74:	31 05       	cpc	r19, r1
    1b76:	41 f4       	brne	.+16     	; 0x1b88 <malloc+0xe8>
    1b78:	2d b7       	in	r18, 0x3d	; 61
    1b7a:	3e b7       	in	r19, 0x3e	; 62
    1b7c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1b80:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1b84:	24 1b       	sub	r18, r20
    1b86:	35 0b       	sbc	r19, r21
    1b88:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <__brkval>
    1b8c:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1b90:	e2 17       	cp	r30, r18
    1b92:	f3 07       	cpc	r31, r19
    1b94:	a0 f4       	brcc	.+40     	; 0x1bbe <malloc+0x11e>
    1b96:	2e 1b       	sub	r18, r30
    1b98:	3f 0b       	sbc	r19, r31
    1b9a:	28 17       	cp	r18, r24
    1b9c:	39 07       	cpc	r19, r25
    1b9e:	78 f0       	brcs	.+30     	; 0x1bbe <malloc+0x11e>
    1ba0:	ac 01       	movw	r20, r24
    1ba2:	4e 5f       	subi	r20, 0xFE	; 254
    1ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba6:	24 17       	cp	r18, r20
    1ba8:	35 07       	cpc	r19, r21
    1baa:	48 f0       	brcs	.+18     	; 0x1bbe <malloc+0x11e>
    1bac:	4e 0f       	add	r20, r30
    1bae:	5f 1f       	adc	r21, r31
    1bb0:	50 93 e5 02 	sts	0x02E5, r21	; 0x8002e5 <__brkval+0x1>
    1bb4:	40 93 e4 02 	sts	0x02E4, r20	; 0x8002e4 <__brkval>
    1bb8:	81 93       	st	Z+, r24
    1bba:	91 93       	st	Z+, r25
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <malloc+0x122>
    1bbe:	e0 e0       	ldi	r30, 0x00	; 0
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	cf 01       	movw	r24, r30
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <free>:
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <free+0xe>
    1bd6:	8c c0       	rjmp	.+280    	; 0x1cf0 <free+0x126>
    1bd8:	fc 01       	movw	r30, r24
    1bda:	32 97       	sbiw	r30, 0x02	; 2
    1bdc:	13 82       	std	Z+3, r1	; 0x03
    1bde:	12 82       	std	Z+2, r1	; 0x02
    1be0:	00 91 e6 02 	lds	r16, 0x02E6	; 0x8002e6 <__flp>
    1be4:	10 91 e7 02 	lds	r17, 0x02E7	; 0x8002e7 <__flp+0x1>
    1be8:	01 15       	cp	r16, r1
    1bea:	11 05       	cpc	r17, r1
    1bec:	81 f4       	brne	.+32     	; 0x1c0e <free+0x44>
    1bee:	20 81       	ld	r18, Z
    1bf0:	31 81       	ldd	r19, Z+1	; 0x01
    1bf2:	82 0f       	add	r24, r18
    1bf4:	93 1f       	adc	r25, r19
    1bf6:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <__brkval>
    1bfa:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1bfe:	28 17       	cp	r18, r24
    1c00:	39 07       	cpc	r19, r25
    1c02:	79 f5       	brne	.+94     	; 0x1c62 <free+0x98>
    1c04:	f0 93 e5 02 	sts	0x02E5, r31	; 0x8002e5 <__brkval+0x1>
    1c08:	e0 93 e4 02 	sts	0x02E4, r30	; 0x8002e4 <__brkval>
    1c0c:	71 c0       	rjmp	.+226    	; 0x1cf0 <free+0x126>
    1c0e:	d8 01       	movw	r26, r16
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	50 e0       	ldi	r21, 0x00	; 0
    1c14:	ae 17       	cp	r26, r30
    1c16:	bf 07       	cpc	r27, r31
    1c18:	50 f4       	brcc	.+20     	; 0x1c2e <free+0x64>
    1c1a:	12 96       	adiw	r26, 0x02	; 2
    1c1c:	2d 91       	ld	r18, X+
    1c1e:	3c 91       	ld	r19, X
    1c20:	13 97       	sbiw	r26, 0x03	; 3
    1c22:	ad 01       	movw	r20, r26
    1c24:	21 15       	cp	r18, r1
    1c26:	31 05       	cpc	r19, r1
    1c28:	09 f1       	breq	.+66     	; 0x1c6c <free+0xa2>
    1c2a:	d9 01       	movw	r26, r18
    1c2c:	f3 cf       	rjmp	.-26     	; 0x1c14 <free+0x4a>
    1c2e:	9d 01       	movw	r18, r26
    1c30:	da 01       	movw	r26, r20
    1c32:	33 83       	std	Z+3, r19	; 0x03
    1c34:	22 83       	std	Z+2, r18	; 0x02
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	86 0f       	add	r24, r22
    1c3c:	97 1f       	adc	r25, r23
    1c3e:	82 17       	cp	r24, r18
    1c40:	93 07       	cpc	r25, r19
    1c42:	69 f4       	brne	.+26     	; 0x1c5e <free+0x94>
    1c44:	ec 01       	movw	r28, r24
    1c46:	28 81       	ld	r18, Y
    1c48:	39 81       	ldd	r19, Y+1	; 0x01
    1c4a:	26 0f       	add	r18, r22
    1c4c:	37 1f       	adc	r19, r23
    1c4e:	2e 5f       	subi	r18, 0xFE	; 254
    1c50:	3f 4f       	sbci	r19, 0xFF	; 255
    1c52:	31 83       	std	Z+1, r19	; 0x01
    1c54:	20 83       	st	Z, r18
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	93 83       	std	Z+3, r25	; 0x03
    1c5c:	82 83       	std	Z+2, r24	; 0x02
    1c5e:	45 2b       	or	r20, r21
    1c60:	29 f4       	brne	.+10     	; 0x1c6c <free+0xa2>
    1c62:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__flp+0x1>
    1c66:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__flp>
    1c6a:	42 c0       	rjmp	.+132    	; 0x1cf0 <free+0x126>
    1c6c:	13 96       	adiw	r26, 0x03	; 3
    1c6e:	fc 93       	st	X, r31
    1c70:	ee 93       	st	-X, r30
    1c72:	12 97       	sbiw	r26, 0x02	; 2
    1c74:	ed 01       	movw	r28, r26
    1c76:	49 91       	ld	r20, Y+
    1c78:	59 91       	ld	r21, Y+
    1c7a:	9e 01       	movw	r18, r28
    1c7c:	24 0f       	add	r18, r20
    1c7e:	35 1f       	adc	r19, r21
    1c80:	e2 17       	cp	r30, r18
    1c82:	f3 07       	cpc	r31, r19
    1c84:	71 f4       	brne	.+28     	; 0x1ca2 <free+0xd8>
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	84 0f       	add	r24, r20
    1c8c:	95 1f       	adc	r25, r21
    1c8e:	02 96       	adiw	r24, 0x02	; 2
    1c90:	11 96       	adiw	r26, 0x01	; 1
    1c92:	9c 93       	st	X, r25
    1c94:	8e 93       	st	-X, r24
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	13 96       	adiw	r26, 0x03	; 3
    1c9c:	9c 93       	st	X, r25
    1c9e:	8e 93       	st	-X, r24
    1ca0:	12 97       	sbiw	r26, 0x02	; 2
    1ca2:	e0 e0       	ldi	r30, 0x00	; 0
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	d8 01       	movw	r26, r16
    1ca8:	12 96       	adiw	r26, 0x02	; 2
    1caa:	8d 91       	ld	r24, X+
    1cac:	9c 91       	ld	r25, X
    1cae:	13 97       	sbiw	r26, 0x03	; 3
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	19 f0       	breq	.+6      	; 0x1cba <free+0xf0>
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	8c 01       	movw	r16, r24
    1cb8:	f6 cf       	rjmp	.-20     	; 0x1ca6 <free+0xdc>
    1cba:	8d 91       	ld	r24, X+
    1cbc:	9c 91       	ld	r25, X
    1cbe:	98 01       	movw	r18, r16
    1cc0:	2e 5f       	subi	r18, 0xFE	; 254
    1cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <__brkval>
    1ccc:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1cd0:	28 17       	cp	r18, r24
    1cd2:	39 07       	cpc	r19, r25
    1cd4:	69 f4       	brne	.+26     	; 0x1cf0 <free+0x126>
    1cd6:	30 97       	sbiw	r30, 0x00	; 0
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <free+0x11a>
    1cda:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <__flp+0x1>
    1cde:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <__flp>
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <free+0x11e>
    1ce4:	13 82       	std	Z+3, r1	; 0x03
    1ce6:	12 82       	std	Z+2, r1	; 0x02
    1ce8:	10 93 e5 02 	sts	0x02E5, r17	; 0x8002e5 <__brkval+0x1>
    1cec:	00 93 e4 02 	sts	0x02E4, r16	; 0x8002e4 <__brkval>
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <realloc>:
    1cfa:	a0 e0       	ldi	r26, 0x00	; 0
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e3 e8       	ldi	r30, 0x83	; 131
    1d00:	fe e0       	ldi	r31, 0x0E	; 14
    1d02:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__prologue_saves__+0x8>
    1d06:	ec 01       	movw	r28, r24
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	21 f4       	brne	.+8      	; 0x1d14 <realloc+0x1a>
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <malloc>
    1d12:	b8 c0       	rjmp	.+368    	; 0x1e84 <realloc+0x18a>
    1d14:	fc 01       	movw	r30, r24
    1d16:	e6 0f       	add	r30, r22
    1d18:	f7 1f       	adc	r31, r23
    1d1a:	9c 01       	movw	r18, r24
    1d1c:	22 50       	subi	r18, 0x02	; 2
    1d1e:	31 09       	sbc	r19, r1
    1d20:	e2 17       	cp	r30, r18
    1d22:	f3 07       	cpc	r31, r19
    1d24:	08 f4       	brcc	.+2      	; 0x1d28 <realloc+0x2e>
    1d26:	ac c0       	rjmp	.+344    	; 0x1e80 <realloc+0x186>
    1d28:	d9 01       	movw	r26, r18
    1d2a:	0d 91       	ld	r16, X+
    1d2c:	1c 91       	ld	r17, X
    1d2e:	11 97       	sbiw	r26, 0x01	; 1
    1d30:	06 17       	cp	r16, r22
    1d32:	17 07       	cpc	r17, r23
    1d34:	b0 f0       	brcs	.+44     	; 0x1d62 <realloc+0x68>
    1d36:	05 30       	cpi	r16, 0x05	; 5
    1d38:	11 05       	cpc	r17, r1
    1d3a:	08 f4       	brcc	.+2      	; 0x1d3e <realloc+0x44>
    1d3c:	9f c0       	rjmp	.+318    	; 0x1e7c <realloc+0x182>
    1d3e:	c8 01       	movw	r24, r16
    1d40:	04 97       	sbiw	r24, 0x04	; 4
    1d42:	86 17       	cp	r24, r22
    1d44:	97 07       	cpc	r25, r23
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <realloc+0x50>
    1d48:	99 c0       	rjmp	.+306    	; 0x1e7c <realloc+0x182>
    1d4a:	02 50       	subi	r16, 0x02	; 2
    1d4c:	11 09       	sbc	r17, r1
    1d4e:	06 1b       	sub	r16, r22
    1d50:	17 0b       	sbc	r17, r23
    1d52:	01 93       	st	Z+, r16
    1d54:	11 93       	st	Z+, r17
    1d56:	6d 93       	st	X+, r22
    1d58:	7c 93       	st	X, r23
    1d5a:	cf 01       	movw	r24, r30
    1d5c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <free>
    1d60:	8d c0       	rjmp	.+282    	; 0x1e7c <realloc+0x182>
    1d62:	5b 01       	movw	r10, r22
    1d64:	a0 1a       	sub	r10, r16
    1d66:	b1 0a       	sbc	r11, r17
    1d68:	4c 01       	movw	r8, r24
    1d6a:	80 0e       	add	r8, r16
    1d6c:	91 1e       	adc	r9, r17
    1d6e:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <__flp>
    1d72:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <__flp+0x1>
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	e1 2c       	mov	r14, r1
    1d7c:	f1 2c       	mov	r15, r1
    1d7e:	10 97       	sbiw	r26, 0x00	; 0
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <realloc+0x8a>
    1d82:	4a c0       	rjmp	.+148    	; 0x1e18 <realloc+0x11e>
    1d84:	a8 15       	cp	r26, r8
    1d86:	b9 05       	cpc	r27, r9
    1d88:	d1 f5       	brne	.+116    	; 0x1dfe <realloc+0x104>
    1d8a:	6d 90       	ld	r6, X+
    1d8c:	7c 90       	ld	r7, X
    1d8e:	11 97       	sbiw	r26, 0x01	; 1
    1d90:	63 01       	movw	r12, r6
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	c8 0e       	add	r12, r24
    1d96:	d1 1c       	adc	r13, r1
    1d98:	ca 14       	cp	r12, r10
    1d9a:	db 04       	cpc	r13, r11
    1d9c:	80 f1       	brcs	.+96     	; 0x1dfe <realloc+0x104>
    1d9e:	a3 01       	movw	r20, r6
    1da0:	4a 19       	sub	r20, r10
    1da2:	5b 09       	sbc	r21, r11
    1da4:	6a 01       	movw	r12, r20
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	c8 0e       	add	r12, r24
    1daa:	d1 1c       	adc	r13, r1
    1dac:	12 96       	adiw	r26, 0x02	; 2
    1dae:	bc 90       	ld	r11, X
    1db0:	12 97       	sbiw	r26, 0x02	; 2
    1db2:	13 96       	adiw	r26, 0x03	; 3
    1db4:	ac 91       	ld	r26, X
    1db6:	b5 e0       	ldi	r27, 0x05	; 5
    1db8:	cb 16       	cp	r12, r27
    1dba:	d1 04       	cpc	r13, r1
    1dbc:	40 f0       	brcs	.+16     	; 0x1dce <realloc+0xd4>
    1dbe:	b2 82       	std	Z+2, r11	; 0x02
    1dc0:	a3 83       	std	Z+3, r26	; 0x03
    1dc2:	51 83       	std	Z+1, r21	; 0x01
    1dc4:	40 83       	st	Z, r20
    1dc6:	d9 01       	movw	r26, r18
    1dc8:	6d 93       	st	X+, r22
    1dca:	7c 93       	st	X, r23
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <realloc+0xe8>
    1dce:	0e 5f       	subi	r16, 0xFE	; 254
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	c3 01       	movw	r24, r6
    1dd4:	80 0f       	add	r24, r16
    1dd6:	91 1f       	adc	r25, r17
    1dd8:	f9 01       	movw	r30, r18
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	80 83       	st	Z, r24
    1dde:	eb 2d       	mov	r30, r11
    1de0:	fa 2f       	mov	r31, r26
    1de2:	e1 14       	cp	r14, r1
    1de4:	f1 04       	cpc	r15, r1
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <realloc+0xfa>
    1de8:	d7 01       	movw	r26, r14
    1dea:	13 96       	adiw	r26, 0x03	; 3
    1dec:	fc 93       	st	X, r31
    1dee:	ee 93       	st	-X, r30
    1df0:	12 97       	sbiw	r26, 0x02	; 2
    1df2:	44 c0       	rjmp	.+136    	; 0x1e7c <realloc+0x182>
    1df4:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__flp+0x1>
    1df8:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__flp>
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <realloc+0x182>
    1dfe:	8d 91       	ld	r24, X+
    1e00:	9c 91       	ld	r25, X
    1e02:	11 97       	sbiw	r26, 0x01	; 1
    1e04:	48 17       	cp	r20, r24
    1e06:	59 07       	cpc	r21, r25
    1e08:	08 f4       	brcc	.+2      	; 0x1e0c <realloc+0x112>
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	7d 01       	movw	r14, r26
    1e0e:	12 96       	adiw	r26, 0x02	; 2
    1e10:	0d 90       	ld	r0, X+
    1e12:	bc 91       	ld	r27, X
    1e14:	a0 2d       	mov	r26, r0
    1e16:	b3 cf       	rjmp	.-154    	; 0x1d7e <realloc+0x84>
    1e18:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__brkval>
    1e1c:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1e20:	88 15       	cp	r24, r8
    1e22:	99 05       	cpc	r25, r9
    1e24:	e1 f4       	brne	.+56     	; 0x1e5e <realloc+0x164>
    1e26:	46 17       	cp	r20, r22
    1e28:	57 07       	cpc	r21, r23
    1e2a:	c8 f4       	brcc	.+50     	; 0x1e5e <realloc+0x164>
    1e2c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1e30:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	41 f4       	brne	.+16     	; 0x1e48 <realloc+0x14e>
    1e38:	8d b7       	in	r24, 0x3d	; 61
    1e3a:	9e b7       	in	r25, 0x3e	; 62
    1e3c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1e40:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1e44:	84 1b       	sub	r24, r20
    1e46:	95 0b       	sbc	r25, r21
    1e48:	e8 17       	cp	r30, r24
    1e4a:	f9 07       	cpc	r31, r25
    1e4c:	c8 f4       	brcc	.+50     	; 0x1e80 <realloc+0x186>
    1e4e:	f0 93 e5 02 	sts	0x02E5, r31	; 0x8002e5 <__brkval+0x1>
    1e52:	e0 93 e4 02 	sts	0x02E4, r30	; 0x8002e4 <__brkval>
    1e56:	f9 01       	movw	r30, r18
    1e58:	71 83       	std	Z+1, r23	; 0x01
    1e5a:	60 83       	st	Z, r22
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <realloc+0x182>
    1e5e:	cb 01       	movw	r24, r22
    1e60:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <malloc>
    1e64:	7c 01       	movw	r14, r24
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	59 f0       	breq	.+22     	; 0x1e80 <realloc+0x186>
    1e6a:	a8 01       	movw	r20, r16
    1e6c:	be 01       	movw	r22, r28
    1e6e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <memcpy>
    1e72:	ce 01       	movw	r24, r28
    1e74:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <free>
    1e78:	c7 01       	movw	r24, r14
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <realloc+0x18a>
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <realloc+0x18a>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	ee e0       	ldi	r30, 0x0E	; 14
    1e8a:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__epilogue_restores__+0x8>

00001e8e <toupper>:
    1e8e:	91 11       	cpse	r25, r1
    1e90:	08 95       	ret
    1e92:	81 56       	subi	r24, 0x61	; 97
    1e94:	8a 51       	subi	r24, 0x1A	; 26
    1e96:	08 f4       	brcc	.+2      	; 0x1e9a <toupper+0xc>
    1e98:	80 52       	subi	r24, 0x20	; 32
    1e9a:	85 58       	subi	r24, 0x85	; 133
    1e9c:	08 95       	ret

00001e9e <memcpy>:
    1e9e:	fb 01       	movw	r30, r22
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <memcpy+0xa>
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	0d 92       	st	X+, r0
    1ea8:	41 50       	subi	r20, 0x01	; 1
    1eaa:	50 40       	sbci	r21, 0x00	; 0
    1eac:	d8 f7       	brcc	.-10     	; 0x1ea4 <memcpy+0x6>
    1eae:	08 95       	ret

00001eb0 <strcmp>:
    1eb0:	fb 01       	movw	r30, r22
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	8d 91       	ld	r24, X+
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	80 19       	sub	r24, r0
    1eba:	01 10       	cpse	r0, r1
    1ebc:	d9 f3       	breq	.-10     	; 0x1eb4 <strcmp+0x4>
    1ebe:	99 0b       	sbc	r25, r25
    1ec0:	08 95       	ret

00001ec2 <strcpy>:
    1ec2:	fb 01       	movw	r30, r22
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	01 90       	ld	r0, Z+
    1ec8:	0d 92       	st	X+, r0
    1eca:	00 20       	and	r0, r0
    1ecc:	e1 f7       	brne	.-8      	; 0x1ec6 <strcpy+0x4>
    1ece:	08 95       	ret

00001ed0 <__prologue_saves__>:
    1ed0:	2f 92       	push	r2
    1ed2:	3f 92       	push	r3
    1ed4:	4f 92       	push	r4
    1ed6:	5f 92       	push	r5
    1ed8:	6f 92       	push	r6
    1eda:	7f 92       	push	r7
    1edc:	8f 92       	push	r8
    1ede:	9f 92       	push	r9
    1ee0:	af 92       	push	r10
    1ee2:	bf 92       	push	r11
    1ee4:	cf 92       	push	r12
    1ee6:	df 92       	push	r13
    1ee8:	ef 92       	push	r14
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	ca 1b       	sub	r28, r26
    1efa:	db 0b       	sbc	r29, r27
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	09 94       	ijmp

00001f08 <__epilogue_restores__>:
    1f08:	2a 88       	ldd	r2, Y+18	; 0x12
    1f0a:	39 88       	ldd	r3, Y+17	; 0x11
    1f0c:	48 88       	ldd	r4, Y+16	; 0x10
    1f0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f10:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f12:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f14:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f16:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f18:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f1a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f1c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f1e:	df 80       	ldd	r13, Y+7	; 0x07
    1f20:	ee 80       	ldd	r14, Y+6	; 0x06
    1f22:	fd 80       	ldd	r15, Y+5	; 0x05
    1f24:	0c 81       	ldd	r16, Y+4	; 0x04
    1f26:	1b 81       	ldd	r17, Y+3	; 0x03
    1f28:	aa 81       	ldd	r26, Y+2	; 0x02
    1f2a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f2c:	ce 0f       	add	r28, r30
    1f2e:	d1 1d       	adc	r29, r1
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	ed 01       	movw	r28, r26
    1f3c:	08 95       	ret

00001f3e <__do_global_dtors>:
    1f3e:	10 e0       	ldi	r17, 0x00	; 0
    1f40:	cf e5       	ldi	r28, 0x5F	; 95
    1f42:	d0 e0       	ldi	r29, 0x00	; 0
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <__do_global_dtors+0x10>
    1f46:	fe 01       	movw	r30, r28
    1f48:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__tablejump2__>
    1f4c:	21 96       	adiw	r28, 0x01	; 1
    1f4e:	c0 36       	cpi	r28, 0x60	; 96
    1f50:	d1 07       	cpc	r29, r17
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <__do_global_dtors+0x8>
    1f54:	f8 94       	cli

00001f56 <__stop_program>:
    1f56:	ff cf       	rjmp	.-2      	; 0x1f56 <__stop_program>
